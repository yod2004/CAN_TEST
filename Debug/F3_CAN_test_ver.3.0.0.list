
F3_CAN_test_ver.3.0.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f18  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080040a0  080040a0  000050a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040d8  080040d8  00006068  2**0
                  CONTENTS
  4 .ARM          00000000  080040d8  080040d8  00006068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080040d8  080040d8  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040d8  080040d8  000050d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080040dc  080040dc  000050dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080040e0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006068  2**0
                  CONTENTS
 10 .bss          0000027c  20000068  20000068  00006068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200002e4  200002e4  00006068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ad40  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000018b2  00000000  00000000  00010dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000830  00000000  00000000  00012690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000638  00000000  00000000  00012ec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b755  00000000  00000000  000134f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a8df  00000000  00000000  0002ec4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009f022  00000000  00000000  0003952c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000d854e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000026a4  00000000  00000000  000d8594  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000069  00000000  00000000  000dac38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000068 	.word	0x20000068
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004088 	.word	0x08004088

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000006c 	.word	0x2000006c
 80001c4:	08004088 	.word	0x08004088

080001c8 <HAL_CAN_RxFifo0MsgPendingCallback>:
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_CAN_Init(void);
/* USER CODE BEGIN PFP */

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b08c      	sub	sp, #48	@ 0x30
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t RxData[8];
	if(HAL_CAN_GetRxMessage(hcan,CAN_RX_FIFO0,&RxHeader,RxData)==HAL_OK){
 80001d0:	f107 0308 	add.w	r3, r7, #8
 80001d4:	f107 0210 	add.w	r2, r7, #16
 80001d8:	2100      	movs	r1, #0
 80001da:	6878      	ldr	r0, [r7, #4]
 80001dc:	f000 ff28 	bl	8001030 <HAL_CAN_GetRxMessage>
 80001e0:	4603      	mov	r3, r0
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	d121      	bne.n	800022a <HAL_CAN_RxFifo0MsgPendingCallback+0x62>
		id  = (RxHeader.IDE == CAN_ID_STD)? RxHeader.StdId : RxHeader.ExtId;
 80001e6:	69bb      	ldr	r3, [r7, #24]
 80001e8:	2b00      	cmp	r3, #0
 80001ea:	d101      	bne.n	80001f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>
 80001ec:	693b      	ldr	r3, [r7, #16]
 80001ee:	e000      	b.n	80001f2 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a>
 80001f0:	697b      	ldr	r3, [r7, #20]
 80001f2:	4a10      	ldr	r2, [pc, #64]	@ (8000234 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 80001f4:	6013      	str	r3, [r2, #0]
		dlc = RxHeader.DLC;
 80001f6:	6a3b      	ldr	r3, [r7, #32]
 80001f8:	4a0f      	ldr	r2, [pc, #60]	@ (8000238 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 80001fa:	6013      	str	r3, [r2, #0]
		for(uint8_t i = 0 ; i < 8 ; i ++ ){
 80001fc:	2300      	movs	r3, #0
 80001fe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000202:	e00e      	b.n	8000222 <HAL_CAN_RxFifo0MsgPendingCallback+0x5a>
			data[i] = RxData[i];
 8000204:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8000208:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800020c:	3230      	adds	r2, #48	@ 0x30
 800020e:	443a      	add	r2, r7
 8000210:	f812 1c28 	ldrb.w	r1, [r2, #-40]
 8000214:	4a09      	ldr	r2, [pc, #36]	@ (800023c <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8000216:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i = 0 ; i < 8 ; i ++ ){
 8000218:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800021c:	3301      	adds	r3, #1
 800021e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000222:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000226:	2b07      	cmp	r3, #7
 8000228:	d9ec      	bls.n	8000204 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>
		}
	}
}
 800022a:	bf00      	nop
 800022c:	3730      	adds	r7, #48	@ 0x30
 800022e:	46bd      	mov	sp, r7
 8000230:	bd80      	pop	{r7, pc}
 8000232:	bf00      	nop
 8000234:	20000180 	.word	0x20000180
 8000238:	20000184 	.word	0x20000184
 800023c:	20000188 	.word	0x20000188

08000240 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b082      	sub	sp, #8
 8000244:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000246:	f000 fb7f 	bl	8000948 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800024a:	f000 f8ef 	bl	800042c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800024e:	f000 f98f 	bl	8000570 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000252:	f000 f95d 	bl	8000510 <MX_USART2_UART_Init>
  MX_CAN_Init();
 8000256:	f000 f925 	bl	80004a4 <MX_CAN_Init>
  /* USER CODE BEGIN 2 */
  uint32_t fid = 0x200;               // 0b 010 0000 0000 (32ビットだけど先頭が0なので11ビットとして扱える的な).
 800025a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800025e:	607b      	str	r3, [r7, #4]
  uint32_t fmask = 0x7F0;             // 0b 111 1111 0000
 8000260:	f44f 63fe 	mov.w	r3, #2032	@ 0x7f0
 8000264:	603b      	str	r3, [r7, #0]
  filter.FilterIdHigh = fid << 5;     // 0b 0100 0000 0000 0000
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	015b      	lsls	r3, r3, #5
 800026a:	4a6a      	ldr	r2, [pc, #424]	@ (8000414 <main+0x1d4>)
 800026c:	6013      	str	r3, [r2, #0]
  filter.FilterIdLow = 0;             // 0b 0000 0000 0000 0000
 800026e:	4b69      	ldr	r3, [pc, #420]	@ (8000414 <main+0x1d4>)
 8000270:	2200      	movs	r2, #0
 8000272:	605a      	str	r2, [r3, #4]
  filter.FilterMaskIdHigh = fmask<<5; // 0b 1111 1110 0000 0000
 8000274:	683b      	ldr	r3, [r7, #0]
 8000276:	015b      	lsls	r3, r3, #5
 8000278:	4a66      	ldr	r2, [pc, #408]	@ (8000414 <main+0x1d4>)
 800027a:	6093      	str	r3, [r2, #8]
  filter.FilterMaskIdLow = 0;         // 0b 0000 0000 0000 0000
 800027c:	4b65      	ldr	r3, [pc, #404]	@ (8000414 <main+0x1d4>)
 800027e:	2200      	movs	r2, #0
 8000280:	60da      	str	r2, [r3, #12]

  filter.FilterIdHigh = 0b0100000000000000;
 8000282:	4b64      	ldr	r3, [pc, #400]	@ (8000414 <main+0x1d4>)
 8000284:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000288:	601a      	str	r2, [r3, #0]
  filter.FilterMaskIdHigh = 0b1111111110000000;
 800028a:	4b62      	ldr	r3, [pc, #392]	@ (8000414 <main+0x1d4>)
 800028c:	f64f 7280 	movw	r2, #65408	@ 0xff80
 8000290:	609a      	str	r2, [r3, #8]

  filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8000292:	4b60      	ldr	r3, [pc, #384]	@ (8000414 <main+0x1d4>)
 8000294:	2201      	movs	r2, #1
 8000296:	61da      	str	r2, [r3, #28]
  filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000298:	4b5e      	ldr	r3, [pc, #376]	@ (8000414 <main+0x1d4>)
 800029a:	2200      	movs	r2, #0
 800029c:	611a      	str	r2, [r3, #16]
  filter.FilterBank = 0;
 800029e:	4b5d      	ldr	r3, [pc, #372]	@ (8000414 <main+0x1d4>)
 80002a0:	2200      	movs	r2, #0
 80002a2:	615a      	str	r2, [r3, #20]
  filter.FilterMode = CAN_FILTERMODE_IDMASK;
 80002a4:	4b5b      	ldr	r3, [pc, #364]	@ (8000414 <main+0x1d4>)
 80002a6:	2200      	movs	r2, #0
 80002a8:	619a      	str	r2, [r3, #24]
  filter.SlaveStartFilterBank = 14;
 80002aa:	4b5a      	ldr	r3, [pc, #360]	@ (8000414 <main+0x1d4>)
 80002ac:	220e      	movs	r2, #14
 80002ae:	625a      	str	r2, [r3, #36]	@ 0x24
  filter.FilterActivation = ENABLE;
 80002b0:	4b58      	ldr	r3, [pc, #352]	@ (8000414 <main+0x1d4>)
 80002b2:	2201      	movs	r2, #1
 80002b4:	621a      	str	r2, [r3, #32]
  HAL_CAN_ConfigFilter(&hcan,&filter);
 80002b6:	4957      	ldr	r1, [pc, #348]	@ (8000414 <main+0x1d4>)
 80002b8:	4857      	ldr	r0, [pc, #348]	@ (8000418 <main+0x1d8>)
 80002ba:	f000 fca6 	bl	8000c0a <HAL_CAN_ConfigFilter>

  HAL_CAN_Start(&hcan);
 80002be:	4856      	ldr	r0, [pc, #344]	@ (8000418 <main+0x1d8>)
 80002c0:	f000 fd6d 	bl	8000d9e <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 80002c4:	2102      	movs	r1, #2
 80002c6:	4854      	ldr	r0, [pc, #336]	@ (8000418 <main+0x1d8>)
 80002c8:	f000 ffd4 	bl	8001274 <HAL_CAN_ActivateNotification>
  setbuf(stdout, NULL);
 80002cc:	4b53      	ldr	r3, [pc, #332]	@ (800041c <main+0x1dc>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	689b      	ldr	r3, [r3, #8]
 80002d2:	2100      	movs	r1, #0
 80002d4:	4618      	mov	r0, r3
 80002d6:	f003 fb67 	bl	80039a8 <setbuf>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(0<HAL_CAN_GetTxMailboxesFreeLevel(&hcan)){
 80002da:	484f      	ldr	r0, [pc, #316]	@ (8000418 <main+0x1d8>)
 80002dc:	f000 fe73 	bl	8000fc6 <HAL_CAN_GetTxMailboxesFreeLevel>
 80002e0:	4603      	mov	r3, r0
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d02d      	beq.n	8000342 <main+0x102>
		  TxHeader.StdId = 0x401;
 80002e6:	4b4e      	ldr	r3, [pc, #312]	@ (8000420 <main+0x1e0>)
 80002e8:	f240 4201 	movw	r2, #1025	@ 0x401
 80002ec:	601a      	str	r2, [r3, #0]
		  TxHeader.RTR = CAN_RTR_DATA;
 80002ee:	4b4c      	ldr	r3, [pc, #304]	@ (8000420 <main+0x1e0>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	60da      	str	r2, [r3, #12]
		  TxHeader.IDE = CAN_ID_STD;
 80002f4:	4b4a      	ldr	r3, [pc, #296]	@ (8000420 <main+0x1e0>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	609a      	str	r2, [r3, #8]
		  TxHeader.DLC = 8;
 80002fa:	4b49      	ldr	r3, [pc, #292]	@ (8000420 <main+0x1e0>)
 80002fc:	2208      	movs	r2, #8
 80002fe:	611a      	str	r2, [r3, #16]
		  TxHeader.TransmitGlobalTime = DISABLE;
 8000300:	4b47      	ldr	r3, [pc, #284]	@ (8000420 <main+0x1e0>)
 8000302:	2200      	movs	r2, #0
 8000304:	751a      	strb	r2, [r3, #20]
		  TxData[0] = 0x1;
 8000306:	4b47      	ldr	r3, [pc, #284]	@ (8000424 <main+0x1e4>)
 8000308:	2201      	movs	r2, #1
 800030a:	701a      	strb	r2, [r3, #0]
		  TxData[1] = 0x1;
 800030c:	4b45      	ldr	r3, [pc, #276]	@ (8000424 <main+0x1e4>)
 800030e:	2201      	movs	r2, #1
 8000310:	705a      	strb	r2, [r3, #1]
		  TxData[2] = 0x1;
 8000312:	4b44      	ldr	r3, [pc, #272]	@ (8000424 <main+0x1e4>)
 8000314:	2201      	movs	r2, #1
 8000316:	709a      	strb	r2, [r3, #2]
		  TxData[3] = 0x1;
 8000318:	4b42      	ldr	r3, [pc, #264]	@ (8000424 <main+0x1e4>)
 800031a:	2201      	movs	r2, #1
 800031c:	70da      	strb	r2, [r3, #3]
		  TxData[4] = 0x1;
 800031e:	4b41      	ldr	r3, [pc, #260]	@ (8000424 <main+0x1e4>)
 8000320:	2201      	movs	r2, #1
 8000322:	711a      	strb	r2, [r3, #4]
		  TxData[5] = 0x1;
 8000324:	4b3f      	ldr	r3, [pc, #252]	@ (8000424 <main+0x1e4>)
 8000326:	2201      	movs	r2, #1
 8000328:	715a      	strb	r2, [r3, #5]
		  TxData[6] = 0x1;
 800032a:	4b3e      	ldr	r3, [pc, #248]	@ (8000424 <main+0x1e4>)
 800032c:	2201      	movs	r2, #1
 800032e:	719a      	strb	r2, [r3, #6]
		  TxData[7] = 0x1;
 8000330:	4b3c      	ldr	r3, [pc, #240]	@ (8000424 <main+0x1e4>)
 8000332:	2201      	movs	r2, #1
 8000334:	71da      	strb	r2, [r3, #7]
		  HAL_CAN_AddTxMessage(&hcan,&TxHeader,TxData,&TxMailbox);
 8000336:	4b3c      	ldr	r3, [pc, #240]	@ (8000428 <main+0x1e8>)
 8000338:	4a3a      	ldr	r2, [pc, #232]	@ (8000424 <main+0x1e4>)
 800033a:	4939      	ldr	r1, [pc, #228]	@ (8000420 <main+0x1e0>)
 800033c:	4836      	ldr	r0, [pc, #216]	@ (8000418 <main+0x1d8>)
 800033e:	f000 fd72 	bl	8000e26 <HAL_CAN_AddTxMessage>
	  }

	  if(0<HAL_CAN_GetTxMailboxesFreeLevel(&hcan)){
 8000342:	4835      	ldr	r0, [pc, #212]	@ (8000418 <main+0x1d8>)
 8000344:	f000 fe3f 	bl	8000fc6 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d02d      	beq.n	80003aa <main+0x16a>
		  TxHeader.StdId = 0x202;
 800034e:	4b34      	ldr	r3, [pc, #208]	@ (8000420 <main+0x1e0>)
 8000350:	f240 2202 	movw	r2, #514	@ 0x202
 8000354:	601a      	str	r2, [r3, #0]
		  TxHeader.RTR = CAN_RTR_DATA;
 8000356:	4b32      	ldr	r3, [pc, #200]	@ (8000420 <main+0x1e0>)
 8000358:	2200      	movs	r2, #0
 800035a:	60da      	str	r2, [r3, #12]
		  TxHeader.IDE = CAN_ID_STD;
 800035c:	4b30      	ldr	r3, [pc, #192]	@ (8000420 <main+0x1e0>)
 800035e:	2200      	movs	r2, #0
 8000360:	609a      	str	r2, [r3, #8]
		  TxHeader.DLC = 8;
 8000362:	4b2f      	ldr	r3, [pc, #188]	@ (8000420 <main+0x1e0>)
 8000364:	2208      	movs	r2, #8
 8000366:	611a      	str	r2, [r3, #16]
		  TxHeader.TransmitGlobalTime = DISABLE;
 8000368:	4b2d      	ldr	r3, [pc, #180]	@ (8000420 <main+0x1e0>)
 800036a:	2200      	movs	r2, #0
 800036c:	751a      	strb	r2, [r3, #20]
		  TxData[0] = 0x2;
 800036e:	4b2d      	ldr	r3, [pc, #180]	@ (8000424 <main+0x1e4>)
 8000370:	2202      	movs	r2, #2
 8000372:	701a      	strb	r2, [r3, #0]
		  TxData[1] = 0x2;
 8000374:	4b2b      	ldr	r3, [pc, #172]	@ (8000424 <main+0x1e4>)
 8000376:	2202      	movs	r2, #2
 8000378:	705a      	strb	r2, [r3, #1]
		  TxData[2] = 0x2;
 800037a:	4b2a      	ldr	r3, [pc, #168]	@ (8000424 <main+0x1e4>)
 800037c:	2202      	movs	r2, #2
 800037e:	709a      	strb	r2, [r3, #2]
		  TxData[3] = 0x2;
 8000380:	4b28      	ldr	r3, [pc, #160]	@ (8000424 <main+0x1e4>)
 8000382:	2202      	movs	r2, #2
 8000384:	70da      	strb	r2, [r3, #3]
		  TxData[4] = 0x2;
 8000386:	4b27      	ldr	r3, [pc, #156]	@ (8000424 <main+0x1e4>)
 8000388:	2202      	movs	r2, #2
 800038a:	711a      	strb	r2, [r3, #4]
		  TxData[5] = 0x2;
 800038c:	4b25      	ldr	r3, [pc, #148]	@ (8000424 <main+0x1e4>)
 800038e:	2202      	movs	r2, #2
 8000390:	715a      	strb	r2, [r3, #5]
		  TxData[6] = 0x2;
 8000392:	4b24      	ldr	r3, [pc, #144]	@ (8000424 <main+0x1e4>)
 8000394:	2202      	movs	r2, #2
 8000396:	719a      	strb	r2, [r3, #6]
		  TxData[7] = 0x2;
 8000398:	4b22      	ldr	r3, [pc, #136]	@ (8000424 <main+0x1e4>)
 800039a:	2202      	movs	r2, #2
 800039c:	71da      	strb	r2, [r3, #7]
		  HAL_CAN_AddTxMessage(&hcan,&TxHeader,TxData,&TxMailbox);
 800039e:	4b22      	ldr	r3, [pc, #136]	@ (8000428 <main+0x1e8>)
 80003a0:	4a20      	ldr	r2, [pc, #128]	@ (8000424 <main+0x1e4>)
 80003a2:	491f      	ldr	r1, [pc, #124]	@ (8000420 <main+0x1e0>)
 80003a4:	481c      	ldr	r0, [pc, #112]	@ (8000418 <main+0x1d8>)
 80003a6:	f000 fd3e 	bl	8000e26 <HAL_CAN_AddTxMessage>
	  	  }

	  if(0<HAL_CAN_GetTxMailboxesFreeLevel(&hcan)){
 80003aa:	481b      	ldr	r0, [pc, #108]	@ (8000418 <main+0x1d8>)
 80003ac:	f000 fe0b 	bl	8000fc6 <HAL_CAN_GetTxMailboxesFreeLevel>
 80003b0:	4603      	mov	r3, r0
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d091      	beq.n	80002da <main+0x9a>
		  TxHeader.StdId = 0x203;
 80003b6:	4b1a      	ldr	r3, [pc, #104]	@ (8000420 <main+0x1e0>)
 80003b8:	f240 2203 	movw	r2, #515	@ 0x203
 80003bc:	601a      	str	r2, [r3, #0]
		  TxHeader.RTR = CAN_RTR_DATA;
 80003be:	4b18      	ldr	r3, [pc, #96]	@ (8000420 <main+0x1e0>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	60da      	str	r2, [r3, #12]
		  TxHeader.IDE = CAN_ID_STD;
 80003c4:	4b16      	ldr	r3, [pc, #88]	@ (8000420 <main+0x1e0>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	609a      	str	r2, [r3, #8]
		  TxHeader.DLC = 8;
 80003ca:	4b15      	ldr	r3, [pc, #84]	@ (8000420 <main+0x1e0>)
 80003cc:	2208      	movs	r2, #8
 80003ce:	611a      	str	r2, [r3, #16]
		  TxHeader.TransmitGlobalTime = DISABLE;
 80003d0:	4b13      	ldr	r3, [pc, #76]	@ (8000420 <main+0x1e0>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	751a      	strb	r2, [r3, #20]
		  TxData[0] = 0x3;
 80003d6:	4b13      	ldr	r3, [pc, #76]	@ (8000424 <main+0x1e4>)
 80003d8:	2203      	movs	r2, #3
 80003da:	701a      	strb	r2, [r3, #0]
		  TxData[1] = 0x3;
 80003dc:	4b11      	ldr	r3, [pc, #68]	@ (8000424 <main+0x1e4>)
 80003de:	2203      	movs	r2, #3
 80003e0:	705a      	strb	r2, [r3, #1]
		  TxData[2] = 0x3;
 80003e2:	4b10      	ldr	r3, [pc, #64]	@ (8000424 <main+0x1e4>)
 80003e4:	2203      	movs	r2, #3
 80003e6:	709a      	strb	r2, [r3, #2]
		  TxData[3] = 0x3;
 80003e8:	4b0e      	ldr	r3, [pc, #56]	@ (8000424 <main+0x1e4>)
 80003ea:	2203      	movs	r2, #3
 80003ec:	70da      	strb	r2, [r3, #3]
		  TxData[4] = 0x3;
 80003ee:	4b0d      	ldr	r3, [pc, #52]	@ (8000424 <main+0x1e4>)
 80003f0:	2203      	movs	r2, #3
 80003f2:	711a      	strb	r2, [r3, #4]
		  TxData[5] = 0x3;
 80003f4:	4b0b      	ldr	r3, [pc, #44]	@ (8000424 <main+0x1e4>)
 80003f6:	2203      	movs	r2, #3
 80003f8:	715a      	strb	r2, [r3, #5]
		  TxData[6] = 0x3;
 80003fa:	4b0a      	ldr	r3, [pc, #40]	@ (8000424 <main+0x1e4>)
 80003fc:	2203      	movs	r2, #3
 80003fe:	719a      	strb	r2, [r3, #6]
		  TxData[7] = 0x3;
 8000400:	4b08      	ldr	r3, [pc, #32]	@ (8000424 <main+0x1e4>)
 8000402:	2203      	movs	r2, #3
 8000404:	71da      	strb	r2, [r3, #7]
		  HAL_CAN_AddTxMessage(&hcan,&TxHeader,TxData,&TxMailbox);
 8000406:	4b08      	ldr	r3, [pc, #32]	@ (8000428 <main+0x1e8>)
 8000408:	4a06      	ldr	r2, [pc, #24]	@ (8000424 <main+0x1e4>)
 800040a:	4905      	ldr	r1, [pc, #20]	@ (8000420 <main+0x1e0>)
 800040c:	4802      	ldr	r0, [pc, #8]	@ (8000418 <main+0x1d8>)
 800040e:	f000 fd0a 	bl	8000e26 <HAL_CAN_AddTxMessage>
	  if(0<HAL_CAN_GetTxMailboxesFreeLevel(&hcan)){
 8000412:	e762      	b.n	80002da <main+0x9a>
 8000414:	2000009c 	.word	0x2000009c
 8000418:	200000c4 	.word	0x200000c4
 800041c:	20000018 	.word	0x20000018
 8000420:	20000084 	.word	0x20000084
 8000424:	20000178 	.word	0x20000178
 8000428:	20000174 	.word	0x20000174

0800042c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b090      	sub	sp, #64	@ 0x40
 8000430:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000432:	f107 0318 	add.w	r3, r7, #24
 8000436:	2228      	movs	r2, #40	@ 0x28
 8000438:	2100      	movs	r1, #0
 800043a:	4618      	mov	r0, r3
 800043c:	f003 fbb3 	bl	8003ba6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000440:	1d3b      	adds	r3, r7, #4
 8000442:	2200      	movs	r2, #0
 8000444:	601a      	str	r2, [r3, #0]
 8000446:	605a      	str	r2, [r3, #4]
 8000448:	609a      	str	r2, [r3, #8]
 800044a:	60da      	str	r2, [r3, #12]
 800044c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800044e:	2302      	movs	r3, #2
 8000450:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000452:	2301      	movs	r3, #1
 8000454:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000456:	2310      	movs	r3, #16
 8000458:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800045a:	2300      	movs	r3, #0
 800045c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800045e:	f107 0318 	add.w	r3, r7, #24
 8000462:	4618      	mov	r0, r3
 8000464:	f001 fbe0 	bl	8001c28 <HAL_RCC_OscConfig>
 8000468:	4603      	mov	r3, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d001      	beq.n	8000472 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800046e:	f000 f8a3 	bl	80005b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000472:	230f      	movs	r3, #15
 8000474:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000476:	2300      	movs	r3, #0
 8000478:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800047a:	2300      	movs	r3, #0
 800047c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800047e:	2300      	movs	r3, #0
 8000480:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000482:	2300      	movs	r3, #0
 8000484:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000486:	1d3b      	adds	r3, r7, #4
 8000488:	2100      	movs	r1, #0
 800048a:	4618      	mov	r0, r3
 800048c:	f002 fc0a 	bl	8002ca4 <HAL_RCC_ClockConfig>
 8000490:	4603      	mov	r3, r0
 8000492:	2b00      	cmp	r3, #0
 8000494:	d001      	beq.n	800049a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000496:	f000 f88f 	bl	80005b8 <Error_Handler>
  }
}
 800049a:	bf00      	nop
 800049c:	3740      	adds	r7, #64	@ 0x40
 800049e:	46bd      	mov	sp, r7
 80004a0:	bd80      	pop	{r7, pc}
	...

080004a4 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80004a8:	4b17      	ldr	r3, [pc, #92]	@ (8000508 <MX_CAN_Init+0x64>)
 80004aa:	4a18      	ldr	r2, [pc, #96]	@ (800050c <MX_CAN_Init+0x68>)
 80004ac:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 1;
 80004ae:	4b16      	ldr	r3, [pc, #88]	@ (8000508 <MX_CAN_Init+0x64>)
 80004b0:	2201      	movs	r2, #1
 80004b2:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80004b4:	4b14      	ldr	r3, [pc, #80]	@ (8000508 <MX_CAN_Init+0x64>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80004ba:	4b13      	ldr	r3, [pc, #76]	@ (8000508 <MX_CAN_Init+0x64>)
 80004bc:	2200      	movs	r2, #0
 80004be:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_12TQ;
 80004c0:	4b11      	ldr	r3, [pc, #68]	@ (8000508 <MX_CAN_Init+0x64>)
 80004c2:	f44f 2230 	mov.w	r2, #720896	@ 0xb0000
 80004c6:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 80004c8:	4b0f      	ldr	r3, [pc, #60]	@ (8000508 <MX_CAN_Init+0x64>)
 80004ca:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80004ce:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80004d0:	4b0d      	ldr	r3, [pc, #52]	@ (8000508 <MX_CAN_Init+0x64>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80004d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000508 <MX_CAN_Init+0x64>)
 80004d8:	2200      	movs	r2, #0
 80004da:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80004dc:	4b0a      	ldr	r3, [pc, #40]	@ (8000508 <MX_CAN_Init+0x64>)
 80004de:	2200      	movs	r2, #0
 80004e0:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80004e2:	4b09      	ldr	r3, [pc, #36]	@ (8000508 <MX_CAN_Init+0x64>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80004e8:	4b07      	ldr	r3, [pc, #28]	@ (8000508 <MX_CAN_Init+0x64>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80004ee:	4b06      	ldr	r3, [pc, #24]	@ (8000508 <MX_CAN_Init+0x64>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80004f4:	4804      	ldr	r0, [pc, #16]	@ (8000508 <MX_CAN_Init+0x64>)
 80004f6:	f000 fa8d 	bl	8000a14 <HAL_CAN_Init>
 80004fa:	4603      	mov	r3, r0
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d001      	beq.n	8000504 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000500:	f000 f85a 	bl	80005b8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000504:	bf00      	nop
 8000506:	bd80      	pop	{r7, pc}
 8000508:	200000c4 	.word	0x200000c4
 800050c:	40006400 	.word	0x40006400

08000510 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000514:	4b14      	ldr	r3, [pc, #80]	@ (8000568 <MX_USART2_UART_Init+0x58>)
 8000516:	4a15      	ldr	r2, [pc, #84]	@ (800056c <MX_USART2_UART_Init+0x5c>)
 8000518:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800051a:	4b13      	ldr	r3, [pc, #76]	@ (8000568 <MX_USART2_UART_Init+0x58>)
 800051c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000520:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000522:	4b11      	ldr	r3, [pc, #68]	@ (8000568 <MX_USART2_UART_Init+0x58>)
 8000524:	2200      	movs	r2, #0
 8000526:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000528:	4b0f      	ldr	r3, [pc, #60]	@ (8000568 <MX_USART2_UART_Init+0x58>)
 800052a:	2200      	movs	r2, #0
 800052c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800052e:	4b0e      	ldr	r3, [pc, #56]	@ (8000568 <MX_USART2_UART_Init+0x58>)
 8000530:	2200      	movs	r2, #0
 8000532:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000534:	4b0c      	ldr	r3, [pc, #48]	@ (8000568 <MX_USART2_UART_Init+0x58>)
 8000536:	220c      	movs	r2, #12
 8000538:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800053a:	4b0b      	ldr	r3, [pc, #44]	@ (8000568 <MX_USART2_UART_Init+0x58>)
 800053c:	2200      	movs	r2, #0
 800053e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000540:	4b09      	ldr	r3, [pc, #36]	@ (8000568 <MX_USART2_UART_Init+0x58>)
 8000542:	2200      	movs	r2, #0
 8000544:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000546:	4b08      	ldr	r3, [pc, #32]	@ (8000568 <MX_USART2_UART_Init+0x58>)
 8000548:	2200      	movs	r2, #0
 800054a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800054c:	4b06      	ldr	r3, [pc, #24]	@ (8000568 <MX_USART2_UART_Init+0x58>)
 800054e:	2200      	movs	r2, #0
 8000550:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000552:	4805      	ldr	r0, [pc, #20]	@ (8000568 <MX_USART2_UART_Init+0x58>)
 8000554:	f002 fdc6 	bl	80030e4 <HAL_UART_Init>
 8000558:	4603      	mov	r3, r0
 800055a:	2b00      	cmp	r3, #0
 800055c:	d001      	beq.n	8000562 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800055e:	f000 f82b 	bl	80005b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000562:	bf00      	nop
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	200000ec 	.word	0x200000ec
 800056c:	40004400 	.word	0x40004400

08000570 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000576:	4b0f      	ldr	r3, [pc, #60]	@ (80005b4 <MX_GPIO_Init+0x44>)
 8000578:	695b      	ldr	r3, [r3, #20]
 800057a:	4a0e      	ldr	r2, [pc, #56]	@ (80005b4 <MX_GPIO_Init+0x44>)
 800057c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000580:	6153      	str	r3, [r2, #20]
 8000582:	4b0c      	ldr	r3, [pc, #48]	@ (80005b4 <MX_GPIO_Init+0x44>)
 8000584:	695b      	ldr	r3, [r3, #20]
 8000586:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800058a:	607b      	str	r3, [r7, #4]
 800058c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800058e:	4b09      	ldr	r3, [pc, #36]	@ (80005b4 <MX_GPIO_Init+0x44>)
 8000590:	695b      	ldr	r3, [r3, #20]
 8000592:	4a08      	ldr	r2, [pc, #32]	@ (80005b4 <MX_GPIO_Init+0x44>)
 8000594:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000598:	6153      	str	r3, [r2, #20]
 800059a:	4b06      	ldr	r3, [pc, #24]	@ (80005b4 <MX_GPIO_Init+0x44>)
 800059c:	695b      	ldr	r3, [r3, #20]
 800059e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80005a2:	603b      	str	r3, [r7, #0]
 80005a4:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005a6:	bf00      	nop
 80005a8:	370c      	adds	r7, #12
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop
 80005b4:	40021000 	.word	0x40021000

080005b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005bc:	b672      	cpsid	i
}
 80005be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005c0:	bf00      	nop
 80005c2:	e7fd      	b.n	80005c0 <Error_Handler+0x8>

080005c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	b083      	sub	sp, #12
 80005c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005ca:	4b0f      	ldr	r3, [pc, #60]	@ (8000608 <HAL_MspInit+0x44>)
 80005cc:	699b      	ldr	r3, [r3, #24]
 80005ce:	4a0e      	ldr	r2, [pc, #56]	@ (8000608 <HAL_MspInit+0x44>)
 80005d0:	f043 0301 	orr.w	r3, r3, #1
 80005d4:	6193      	str	r3, [r2, #24]
 80005d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000608 <HAL_MspInit+0x44>)
 80005d8:	699b      	ldr	r3, [r3, #24]
 80005da:	f003 0301 	and.w	r3, r3, #1
 80005de:	607b      	str	r3, [r7, #4]
 80005e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e2:	4b09      	ldr	r3, [pc, #36]	@ (8000608 <HAL_MspInit+0x44>)
 80005e4:	69db      	ldr	r3, [r3, #28]
 80005e6:	4a08      	ldr	r2, [pc, #32]	@ (8000608 <HAL_MspInit+0x44>)
 80005e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005ec:	61d3      	str	r3, [r2, #28]
 80005ee:	4b06      	ldr	r3, [pc, #24]	@ (8000608 <HAL_MspInit+0x44>)
 80005f0:	69db      	ldr	r3, [r3, #28]
 80005f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005f6:	603b      	str	r3, [r7, #0]
 80005f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005fa:	bf00      	nop
 80005fc:	370c      	adds	r7, #12
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	40021000 	.word	0x40021000

0800060c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b08a      	sub	sp, #40	@ 0x28
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000614:	f107 0314 	add.w	r3, r7, #20
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	605a      	str	r2, [r3, #4]
 800061e:	609a      	str	r2, [r3, #8]
 8000620:	60da      	str	r2, [r3, #12]
 8000622:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a1c      	ldr	r2, [pc, #112]	@ (800069c <HAL_CAN_MspInit+0x90>)
 800062a:	4293      	cmp	r3, r2
 800062c:	d131      	bne.n	8000692 <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800062e:	4b1c      	ldr	r3, [pc, #112]	@ (80006a0 <HAL_CAN_MspInit+0x94>)
 8000630:	69db      	ldr	r3, [r3, #28]
 8000632:	4a1b      	ldr	r2, [pc, #108]	@ (80006a0 <HAL_CAN_MspInit+0x94>)
 8000634:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000638:	61d3      	str	r3, [r2, #28]
 800063a:	4b19      	ldr	r3, [pc, #100]	@ (80006a0 <HAL_CAN_MspInit+0x94>)
 800063c:	69db      	ldr	r3, [r3, #28]
 800063e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000642:	613b      	str	r3, [r7, #16]
 8000644:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000646:	4b16      	ldr	r3, [pc, #88]	@ (80006a0 <HAL_CAN_MspInit+0x94>)
 8000648:	695b      	ldr	r3, [r3, #20]
 800064a:	4a15      	ldr	r2, [pc, #84]	@ (80006a0 <HAL_CAN_MspInit+0x94>)
 800064c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000650:	6153      	str	r3, [r2, #20]
 8000652:	4b13      	ldr	r3, [pc, #76]	@ (80006a0 <HAL_CAN_MspInit+0x94>)
 8000654:	695b      	ldr	r3, [r3, #20]
 8000656:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800065a:	60fb      	str	r3, [r7, #12]
 800065c:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800065e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000662:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000664:	2302      	movs	r3, #2
 8000666:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000668:	2300      	movs	r3, #0
 800066a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800066c:	2303      	movs	r3, #3
 800066e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8000670:	2309      	movs	r3, #9
 8000672:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000674:	f107 0314 	add.w	r3, r7, #20
 8000678:	4619      	mov	r1, r3
 800067a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800067e:	f001 f961 	bl	8001944 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CAN_RX0_IRQn, 0, 0);
 8000682:	2200      	movs	r2, #0
 8000684:	2100      	movs	r1, #0
 8000686:	2014      	movs	r0, #20
 8000688:	f001 f925 	bl	80018d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX0_IRQn);
 800068c:	2014      	movs	r0, #20
 800068e:	f001 f93e 	bl	800190e <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN_MspInit 1 */

  }

}
 8000692:	bf00      	nop
 8000694:	3728      	adds	r7, #40	@ 0x28
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	40006400 	.word	0x40006400
 80006a0:	40021000 	.word	0x40021000

080006a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b08a      	sub	sp, #40	@ 0x28
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ac:	f107 0314 	add.w	r3, r7, #20
 80006b0:	2200      	movs	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]
 80006b4:	605a      	str	r2, [r3, #4]
 80006b6:	609a      	str	r2, [r3, #8]
 80006b8:	60da      	str	r2, [r3, #12]
 80006ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a18      	ldr	r2, [pc, #96]	@ (8000724 <HAL_UART_MspInit+0x80>)
 80006c2:	4293      	cmp	r3, r2
 80006c4:	d129      	bne.n	800071a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80006c6:	4b18      	ldr	r3, [pc, #96]	@ (8000728 <HAL_UART_MspInit+0x84>)
 80006c8:	69db      	ldr	r3, [r3, #28]
 80006ca:	4a17      	ldr	r2, [pc, #92]	@ (8000728 <HAL_UART_MspInit+0x84>)
 80006cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006d0:	61d3      	str	r3, [r2, #28]
 80006d2:	4b15      	ldr	r3, [pc, #84]	@ (8000728 <HAL_UART_MspInit+0x84>)
 80006d4:	69db      	ldr	r3, [r3, #28]
 80006d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80006da:	613b      	str	r3, [r7, #16]
 80006dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006de:	4b12      	ldr	r3, [pc, #72]	@ (8000728 <HAL_UART_MspInit+0x84>)
 80006e0:	695b      	ldr	r3, [r3, #20]
 80006e2:	4a11      	ldr	r2, [pc, #68]	@ (8000728 <HAL_UART_MspInit+0x84>)
 80006e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006e8:	6153      	str	r3, [r2, #20]
 80006ea:	4b0f      	ldr	r3, [pc, #60]	@ (8000728 <HAL_UART_MspInit+0x84>)
 80006ec:	695b      	ldr	r3, [r3, #20]
 80006ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80006f2:	60fb      	str	r3, [r7, #12]
 80006f4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 80006f6:	f248 0304 	movw	r3, #32772	@ 0x8004
 80006fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006fc:	2302      	movs	r3, #2
 80006fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000700:	2300      	movs	r3, #0
 8000702:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000704:	2303      	movs	r3, #3
 8000706:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000708:	2307      	movs	r3, #7
 800070a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800070c:	f107 0314 	add.w	r3, r7, #20
 8000710:	4619      	mov	r1, r3
 8000712:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000716:	f001 f915 	bl	8001944 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800071a:	bf00      	nop
 800071c:	3728      	adds	r7, #40	@ 0x28
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	40004400 	.word	0x40004400
 8000728:	40021000 	.word	0x40021000

0800072c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000730:	bf00      	nop
 8000732:	e7fd      	b.n	8000730 <NMI_Handler+0x4>

08000734 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000738:	bf00      	nop
 800073a:	e7fd      	b.n	8000738 <HardFault_Handler+0x4>

0800073c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000740:	bf00      	nop
 8000742:	e7fd      	b.n	8000740 <MemManage_Handler+0x4>

08000744 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000748:	bf00      	nop
 800074a:	e7fd      	b.n	8000748 <BusFault_Handler+0x4>

0800074c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000750:	bf00      	nop
 8000752:	e7fd      	b.n	8000750 <UsageFault_Handler+0x4>

08000754 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000758:	bf00      	nop
 800075a:	46bd      	mov	sp, r7
 800075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000760:	4770      	bx	lr

08000762 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000762:	b480      	push	{r7}
 8000764:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000766:	bf00      	nop
 8000768:	46bd      	mov	sp, r7
 800076a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076e:	4770      	bx	lr

08000770 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000774:	bf00      	nop
 8000776:	46bd      	mov	sp, r7
 8000778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077c:	4770      	bx	lr

0800077e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800077e:	b580      	push	{r7, lr}
 8000780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000782:	f000 f927 	bl	80009d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000786:	bf00      	nop
 8000788:	bd80      	pop	{r7, pc}
	...

0800078c <CAN_RX0_IRQHandler>:

/**
  * @brief This function handles CAN RX0 interrupt.
  */
void CAN_RX0_IRQHandler(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX0_IRQn 0 */

  /* USER CODE END CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000790:	4802      	ldr	r0, [pc, #8]	@ (800079c <CAN_RX0_IRQHandler+0x10>)
 8000792:	f000 fd95 	bl	80012c0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX0_IRQn 1 */

  /* USER CODE END CAN_RX0_IRQn 1 */
}
 8000796:	bf00      	nop
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	200000c4 	.word	0x200000c4

080007a0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b086      	sub	sp, #24
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	60f8      	str	r0, [r7, #12]
 80007a8:	60b9      	str	r1, [r7, #8]
 80007aa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007ac:	2300      	movs	r3, #0
 80007ae:	617b      	str	r3, [r7, #20]
 80007b0:	e00a      	b.n	80007c8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80007b2:	f3af 8000 	nop.w
 80007b6:	4601      	mov	r1, r0
 80007b8:	68bb      	ldr	r3, [r7, #8]
 80007ba:	1c5a      	adds	r2, r3, #1
 80007bc:	60ba      	str	r2, [r7, #8]
 80007be:	b2ca      	uxtb	r2, r1
 80007c0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007c2:	697b      	ldr	r3, [r7, #20]
 80007c4:	3301      	adds	r3, #1
 80007c6:	617b      	str	r3, [r7, #20]
 80007c8:	697a      	ldr	r2, [r7, #20]
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	429a      	cmp	r2, r3
 80007ce:	dbf0      	blt.n	80007b2 <_read+0x12>
  }

  return len;
 80007d0:	687b      	ldr	r3, [r7, #4]
}
 80007d2:	4618      	mov	r0, r3
 80007d4:	3718      	adds	r7, #24
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}

080007da <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80007da:	b580      	push	{r7, lr}
 80007dc:	b086      	sub	sp, #24
 80007de:	af00      	add	r7, sp, #0
 80007e0:	60f8      	str	r0, [r7, #12]
 80007e2:	60b9      	str	r1, [r7, #8]
 80007e4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007e6:	2300      	movs	r3, #0
 80007e8:	617b      	str	r3, [r7, #20]
 80007ea:	e009      	b.n	8000800 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80007ec:	68bb      	ldr	r3, [r7, #8]
 80007ee:	1c5a      	adds	r2, r3, #1
 80007f0:	60ba      	str	r2, [r7, #8]
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	4618      	mov	r0, r3
 80007f6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007fa:	697b      	ldr	r3, [r7, #20]
 80007fc:	3301      	adds	r3, #1
 80007fe:	617b      	str	r3, [r7, #20]
 8000800:	697a      	ldr	r2, [r7, #20]
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	429a      	cmp	r2, r3
 8000806:	dbf1      	blt.n	80007ec <_write+0x12>
  }
  return len;
 8000808:	687b      	ldr	r3, [r7, #4]
}
 800080a:	4618      	mov	r0, r3
 800080c:	3718      	adds	r7, #24
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}

08000812 <_close>:

int _close(int file)
{
 8000812:	b480      	push	{r7}
 8000814:	b083      	sub	sp, #12
 8000816:	af00      	add	r7, sp, #0
 8000818:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800081a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800081e:	4618      	mov	r0, r3
 8000820:	370c      	adds	r7, #12
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr

0800082a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800082a:	b480      	push	{r7}
 800082c:	b083      	sub	sp, #12
 800082e:	af00      	add	r7, sp, #0
 8000830:	6078      	str	r0, [r7, #4]
 8000832:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000834:	683b      	ldr	r3, [r7, #0]
 8000836:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800083a:	605a      	str	r2, [r3, #4]
  return 0;
 800083c:	2300      	movs	r3, #0
}
 800083e:	4618      	mov	r0, r3
 8000840:	370c      	adds	r7, #12
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr

0800084a <_lseek>:
  (void)file;
  return 1;
}

int _lseek(int file, int ptr, int dir)
{
 800084a:	b480      	push	{r7}
 800084c:	b085      	sub	sp, #20
 800084e:	af00      	add	r7, sp, #0
 8000850:	60f8      	str	r0, [r7, #12]
 8000852:	60b9      	str	r1, [r7, #8]
 8000854:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000856:	2300      	movs	r3, #0
}
 8000858:	4618      	mov	r0, r3
 800085a:	3714      	adds	r7, #20
 800085c:	46bd      	mov	sp, r7
 800085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000862:	4770      	bx	lr

08000864 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b086      	sub	sp, #24
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800086c:	4a14      	ldr	r2, [pc, #80]	@ (80008c0 <_sbrk+0x5c>)
 800086e:	4b15      	ldr	r3, [pc, #84]	@ (80008c4 <_sbrk+0x60>)
 8000870:	1ad3      	subs	r3, r2, r3
 8000872:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000874:	697b      	ldr	r3, [r7, #20]
 8000876:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000878:	4b13      	ldr	r3, [pc, #76]	@ (80008c8 <_sbrk+0x64>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	2b00      	cmp	r3, #0
 800087e:	d102      	bne.n	8000886 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000880:	4b11      	ldr	r3, [pc, #68]	@ (80008c8 <_sbrk+0x64>)
 8000882:	4a12      	ldr	r2, [pc, #72]	@ (80008cc <_sbrk+0x68>)
 8000884:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000886:	4b10      	ldr	r3, [pc, #64]	@ (80008c8 <_sbrk+0x64>)
 8000888:	681a      	ldr	r2, [r3, #0]
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	4413      	add	r3, r2
 800088e:	693a      	ldr	r2, [r7, #16]
 8000890:	429a      	cmp	r2, r3
 8000892:	d207      	bcs.n	80008a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000894:	f003 f9d6 	bl	8003c44 <__errno>
 8000898:	4603      	mov	r3, r0
 800089a:	220c      	movs	r2, #12
 800089c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800089e:	f04f 33ff 	mov.w	r3, #4294967295
 80008a2:	e009      	b.n	80008b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008a4:	4b08      	ldr	r3, [pc, #32]	@ (80008c8 <_sbrk+0x64>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008aa:	4b07      	ldr	r3, [pc, #28]	@ (80008c8 <_sbrk+0x64>)
 80008ac:	681a      	ldr	r2, [r3, #0]
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	4413      	add	r3, r2
 80008b2:	4a05      	ldr	r2, [pc, #20]	@ (80008c8 <_sbrk+0x64>)
 80008b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008b6:	68fb      	ldr	r3, [r7, #12]
}
 80008b8:	4618      	mov	r0, r3
 80008ba:	3718      	adds	r7, #24
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	20003000 	.word	0x20003000
 80008c4:	00000400 	.word	0x00000400
 80008c8:	20000190 	.word	0x20000190
 80008cc:	200002e8 	.word	0x200002e8

080008d0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008d4:	4b06      	ldr	r3, [pc, #24]	@ (80008f0 <SystemInit+0x20>)
 80008d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008da:	4a05      	ldr	r2, [pc, #20]	@ (80008f0 <SystemInit+0x20>)
 80008dc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80008e0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008e4:	bf00      	nop
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	e000ed00 	.word	0xe000ed00

080008f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80008f4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800092c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80008f8:	f7ff ffea 	bl	80008d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008fc:	480c      	ldr	r0, [pc, #48]	@ (8000930 <LoopForever+0x6>)
  ldr r1, =_edata
 80008fe:	490d      	ldr	r1, [pc, #52]	@ (8000934 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000900:	4a0d      	ldr	r2, [pc, #52]	@ (8000938 <LoopForever+0xe>)
  movs r3, #0
 8000902:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000904:	e002      	b.n	800090c <LoopCopyDataInit>

08000906 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000906:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000908:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800090a:	3304      	adds	r3, #4

0800090c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800090c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800090e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000910:	d3f9      	bcc.n	8000906 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000912:	4a0a      	ldr	r2, [pc, #40]	@ (800093c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000914:	4c0a      	ldr	r4, [pc, #40]	@ (8000940 <LoopForever+0x16>)
  movs r3, #0
 8000916:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000918:	e001      	b.n	800091e <LoopFillZerobss>

0800091a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800091a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800091c:	3204      	adds	r2, #4

0800091e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800091e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000920:	d3fb      	bcc.n	800091a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000922:	f003 f995 	bl	8003c50 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000926:	f7ff fc8b 	bl	8000240 <main>

0800092a <LoopForever>:

LoopForever:
    b LoopForever
 800092a:	e7fe      	b.n	800092a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800092c:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000930:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000934:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000938:	080040e0 	.word	0x080040e0
  ldr r2, =_sbss
 800093c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000940:	200002e4 	.word	0x200002e4

08000944 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000944:	e7fe      	b.n	8000944 <ADC1_2_IRQHandler>
	...

08000948 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800094c:	4b08      	ldr	r3, [pc, #32]	@ (8000970 <HAL_Init+0x28>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a07      	ldr	r2, [pc, #28]	@ (8000970 <HAL_Init+0x28>)
 8000952:	f043 0310 	orr.w	r3, r3, #16
 8000956:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000958:	2003      	movs	r0, #3
 800095a:	f000 ffb1 	bl	80018c0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800095e:	2000      	movs	r0, #0
 8000960:	f000 f808 	bl	8000974 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000964:	f7ff fe2e 	bl	80005c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000968:	2300      	movs	r3, #0
}
 800096a:	4618      	mov	r0, r3
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	40022000 	.word	0x40022000

08000974 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800097c:	4b12      	ldr	r3, [pc, #72]	@ (80009c8 <HAL_InitTick+0x54>)
 800097e:	681a      	ldr	r2, [r3, #0]
 8000980:	4b12      	ldr	r3, [pc, #72]	@ (80009cc <HAL_InitTick+0x58>)
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	4619      	mov	r1, r3
 8000986:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800098a:	fbb3 f3f1 	udiv	r3, r3, r1
 800098e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000992:	4618      	mov	r0, r3
 8000994:	f000 ffc9 	bl	800192a <HAL_SYSTICK_Config>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800099e:	2301      	movs	r3, #1
 80009a0:	e00e      	b.n	80009c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	2b0f      	cmp	r3, #15
 80009a6:	d80a      	bhi.n	80009be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009a8:	2200      	movs	r2, #0
 80009aa:	6879      	ldr	r1, [r7, #4]
 80009ac:	f04f 30ff 	mov.w	r0, #4294967295
 80009b0:	f000 ff91 	bl	80018d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009b4:	4a06      	ldr	r2, [pc, #24]	@ (80009d0 <HAL_InitTick+0x5c>)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80009ba:	2300      	movs	r3, #0
 80009bc:	e000      	b.n	80009c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009be:	2301      	movs	r3, #1
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	3708      	adds	r7, #8
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	20000000 	.word	0x20000000
 80009cc:	20000008 	.word	0x20000008
 80009d0:	20000004 	.word	0x20000004

080009d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009d8:	4b06      	ldr	r3, [pc, #24]	@ (80009f4 <HAL_IncTick+0x20>)
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	461a      	mov	r2, r3
 80009de:	4b06      	ldr	r3, [pc, #24]	@ (80009f8 <HAL_IncTick+0x24>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	4413      	add	r3, r2
 80009e4:	4a04      	ldr	r2, [pc, #16]	@ (80009f8 <HAL_IncTick+0x24>)
 80009e6:	6013      	str	r3, [r2, #0]
}
 80009e8:	bf00      	nop
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	20000008 	.word	0x20000008
 80009f8:	20000194 	.word	0x20000194

080009fc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  return uwTick;  
 8000a00:	4b03      	ldr	r3, [pc, #12]	@ (8000a10 <HAL_GetTick+0x14>)
 8000a02:	681b      	ldr	r3, [r3, #0]
}
 8000a04:	4618      	mov	r0, r3
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	20000194 	.word	0x20000194

08000a14 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b084      	sub	sp, #16
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d101      	bne.n	8000a26 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000a22:	2301      	movs	r3, #1
 8000a24:	e0ed      	b.n	8000c02 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a2c:	b2db      	uxtb	r3, r3
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d102      	bne.n	8000a38 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000a32:	6878      	ldr	r0, [r7, #4]
 8000a34:	f7ff fdea 	bl	800060c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	681a      	ldr	r2, [r3, #0]
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	f042 0201 	orr.w	r2, r2, #1
 8000a46:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000a48:	f7ff ffd8 	bl	80009fc <HAL_GetTick>
 8000a4c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000a4e:	e012      	b.n	8000a76 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000a50:	f7ff ffd4 	bl	80009fc <HAL_GetTick>
 8000a54:	4602      	mov	r2, r0
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	1ad3      	subs	r3, r2, r3
 8000a5a:	2b0a      	cmp	r3, #10
 8000a5c:	d90b      	bls.n	8000a76 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a62:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	2205      	movs	r2, #5
 8000a6e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000a72:	2301      	movs	r3, #1
 8000a74:	e0c5      	b.n	8000c02 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	685b      	ldr	r3, [r3, #4]
 8000a7c:	f003 0301 	and.w	r3, r3, #1
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d0e5      	beq.n	8000a50 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	681a      	ldr	r2, [r3, #0]
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	f022 0202 	bic.w	r2, r2, #2
 8000a92:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000a94:	f7ff ffb2 	bl	80009fc <HAL_GetTick>
 8000a98:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000a9a:	e012      	b.n	8000ac2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000a9c:	f7ff ffae 	bl	80009fc <HAL_GetTick>
 8000aa0:	4602      	mov	r2, r0
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	1ad3      	subs	r3, r2, r3
 8000aa6:	2b0a      	cmp	r3, #10
 8000aa8:	d90b      	bls.n	8000ac2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000aae:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	2205      	movs	r2, #5
 8000aba:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	e09f      	b.n	8000c02 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	685b      	ldr	r3, [r3, #4]
 8000ac8:	f003 0302 	and.w	r3, r3, #2
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d1e5      	bne.n	8000a9c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	7e1b      	ldrb	r3, [r3, #24]
 8000ad4:	2b01      	cmp	r3, #1
 8000ad6:	d108      	bne.n	8000aea <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	681a      	ldr	r2, [r3, #0]
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	e007      	b.n	8000afa <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	681a      	ldr	r2, [r3, #0]
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000af8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	7e5b      	ldrb	r3, [r3, #25]
 8000afe:	2b01      	cmp	r3, #1
 8000b00:	d108      	bne.n	8000b14 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	681a      	ldr	r2, [r3, #0]
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000b10:	601a      	str	r2, [r3, #0]
 8000b12:	e007      	b.n	8000b24 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	681a      	ldr	r2, [r3, #0]
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000b22:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	7e9b      	ldrb	r3, [r3, #26]
 8000b28:	2b01      	cmp	r3, #1
 8000b2a:	d108      	bne.n	8000b3e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	681a      	ldr	r2, [r3, #0]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	f042 0220 	orr.w	r2, r2, #32
 8000b3a:	601a      	str	r2, [r3, #0]
 8000b3c:	e007      	b.n	8000b4e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	681a      	ldr	r2, [r3, #0]
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	f022 0220 	bic.w	r2, r2, #32
 8000b4c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	7edb      	ldrb	r3, [r3, #27]
 8000b52:	2b01      	cmp	r3, #1
 8000b54:	d108      	bne.n	8000b68 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	681a      	ldr	r2, [r3, #0]
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	f022 0210 	bic.w	r2, r2, #16
 8000b64:	601a      	str	r2, [r3, #0]
 8000b66:	e007      	b.n	8000b78 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	681a      	ldr	r2, [r3, #0]
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	f042 0210 	orr.w	r2, r2, #16
 8000b76:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	7f1b      	ldrb	r3, [r3, #28]
 8000b7c:	2b01      	cmp	r3, #1
 8000b7e:	d108      	bne.n	8000b92 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	681a      	ldr	r2, [r3, #0]
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	f042 0208 	orr.w	r2, r2, #8
 8000b8e:	601a      	str	r2, [r3, #0]
 8000b90:	e007      	b.n	8000ba2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	681a      	ldr	r2, [r3, #0]
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	f022 0208 	bic.w	r2, r2, #8
 8000ba0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	7f5b      	ldrb	r3, [r3, #29]
 8000ba6:	2b01      	cmp	r3, #1
 8000ba8:	d108      	bne.n	8000bbc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	681a      	ldr	r2, [r3, #0]
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	f042 0204 	orr.w	r2, r2, #4
 8000bb8:	601a      	str	r2, [r3, #0]
 8000bba:	e007      	b.n	8000bcc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	681a      	ldr	r2, [r3, #0]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	f022 0204 	bic.w	r2, r2, #4
 8000bca:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	689a      	ldr	r2, [r3, #8]
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	68db      	ldr	r3, [r3, #12]
 8000bd4:	431a      	orrs	r2, r3
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	691b      	ldr	r3, [r3, #16]
 8000bda:	431a      	orrs	r2, r3
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	695b      	ldr	r3, [r3, #20]
 8000be0:	ea42 0103 	orr.w	r1, r2, r3
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	1e5a      	subs	r2, r3, #1
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	430a      	orrs	r2, r1
 8000bf0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000c00:	2300      	movs	r3, #0
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	3710      	adds	r7, #16
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}

08000c0a <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	b087      	sub	sp, #28
 8000c0e:	af00      	add	r7, sp, #0
 8000c10:	6078      	str	r0, [r7, #4]
 8000c12:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c20:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000c22:	7cfb      	ldrb	r3, [r7, #19]
 8000c24:	2b01      	cmp	r3, #1
 8000c26:	d003      	beq.n	8000c30 <HAL_CAN_ConfigFilter+0x26>
 8000c28:	7cfb      	ldrb	r3, [r7, #19]
 8000c2a:	2b02      	cmp	r3, #2
 8000c2c:	f040 80aa 	bne.w	8000d84 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000c36:	f043 0201 	orr.w	r2, r3, #1
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	695b      	ldr	r3, [r3, #20]
 8000c44:	f003 031f 	and.w	r3, r3, #31
 8000c48:	2201      	movs	r2, #1
 8000c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	43db      	mvns	r3, r3
 8000c5a:	401a      	ands	r2, r3
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	69db      	ldr	r3, [r3, #28]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d123      	bne.n	8000cb2 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000c6a:	697b      	ldr	r3, [r7, #20]
 8000c6c:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	43db      	mvns	r3, r3
 8000c74:	401a      	ands	r2, r3
 8000c76:	697b      	ldr	r3, [r7, #20]
 8000c78:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	68db      	ldr	r3, [r3, #12]
 8000c80:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	685b      	ldr	r3, [r3, #4]
 8000c86:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000c88:	683a      	ldr	r2, [r7, #0]
 8000c8a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000c8c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000c8e:	697b      	ldr	r3, [r7, #20]
 8000c90:	3248      	adds	r2, #72	@ 0x48
 8000c92:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	689b      	ldr	r3, [r3, #8]
 8000c9a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000ca6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000ca8:	6979      	ldr	r1, [r7, #20]
 8000caa:	3348      	adds	r3, #72	@ 0x48
 8000cac:	00db      	lsls	r3, r3, #3
 8000cae:	440b      	add	r3, r1
 8000cb0:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	69db      	ldr	r3, [r3, #28]
 8000cb6:	2b01      	cmp	r3, #1
 8000cb8:	d122      	bne.n	8000d00 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000cba:	697b      	ldr	r3, [r7, #20]
 8000cbc:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	431a      	orrs	r2, r3
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000cd6:	683a      	ldr	r2, [r7, #0]
 8000cd8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000cda:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	3248      	adds	r2, #72	@ 0x48
 8000ce0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	689b      	ldr	r3, [r3, #8]
 8000ce8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	68db      	ldr	r3, [r3, #12]
 8000cee:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000cf4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000cf6:	6979      	ldr	r1, [r7, #20]
 8000cf8:	3348      	adds	r3, #72	@ 0x48
 8000cfa:	00db      	lsls	r3, r3, #3
 8000cfc:	440b      	add	r3, r1
 8000cfe:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	699b      	ldr	r3, [r3, #24]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d109      	bne.n	8000d1c <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	43db      	mvns	r3, r3
 8000d12:	401a      	ands	r2, r3
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8000d1a:	e007      	b.n	8000d2c <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	431a      	orrs	r2, r3
 8000d26:	697b      	ldr	r3, [r7, #20]
 8000d28:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	691b      	ldr	r3, [r3, #16]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d109      	bne.n	8000d48 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	43db      	mvns	r3, r3
 8000d3e:	401a      	ands	r2, r3
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8000d46:	e007      	b.n	8000d58 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	431a      	orrs	r2, r3
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	6a1b      	ldr	r3, [r3, #32]
 8000d5c:	2b01      	cmp	r3, #1
 8000d5e:	d107      	bne.n	8000d70 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	431a      	orrs	r2, r3
 8000d6a:	697b      	ldr	r3, [r7, #20]
 8000d6c:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000d76:	f023 0201 	bic.w	r2, r3, #1
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8000d80:	2300      	movs	r3, #0
 8000d82:	e006      	b.n	8000d92 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d88:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000d90:	2301      	movs	r3, #1
  }
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	371c      	adds	r7, #28
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr

08000d9e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000d9e:	b580      	push	{r7, lr}
 8000da0:	b084      	sub	sp, #16
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	2b01      	cmp	r3, #1
 8000db0:	d12e      	bne.n	8000e10 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	2202      	movs	r2, #2
 8000db6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	681a      	ldr	r2, [r3, #0]
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f022 0201 	bic.w	r2, r2, #1
 8000dc8:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000dca:	f7ff fe17 	bl	80009fc <HAL_GetTick>
 8000dce:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000dd0:	e012      	b.n	8000df8 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000dd2:	f7ff fe13 	bl	80009fc <HAL_GetTick>
 8000dd6:	4602      	mov	r2, r0
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	1ad3      	subs	r3, r2, r3
 8000ddc:	2b0a      	cmp	r3, #10
 8000dde:	d90b      	bls.n	8000df8 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000de4:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	2205      	movs	r2, #5
 8000df0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000df4:	2301      	movs	r3, #1
 8000df6:	e012      	b.n	8000e1e <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	f003 0301 	and.w	r3, r3, #1
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d1e5      	bne.n	8000dd2 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	2200      	movs	r2, #0
 8000e0a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	e006      	b.n	8000e1e <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e14:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000e1c:	2301      	movs	r3, #1
  }
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3710      	adds	r7, #16
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}

08000e26 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8000e26:	b480      	push	{r7}
 8000e28:	b089      	sub	sp, #36	@ 0x24
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	60f8      	str	r0, [r7, #12]
 8000e2e:	60b9      	str	r1, [r7, #8]
 8000e30:	607a      	str	r2, [r7, #4]
 8000e32:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e3a:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	689b      	ldr	r3, [r3, #8]
 8000e42:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000e44:	7ffb      	ldrb	r3, [r7, #31]
 8000e46:	2b01      	cmp	r3, #1
 8000e48:	d003      	beq.n	8000e52 <HAL_CAN_AddTxMessage+0x2c>
 8000e4a:	7ffb      	ldrb	r3, [r7, #31]
 8000e4c:	2b02      	cmp	r3, #2
 8000e4e:	f040 80ad 	bne.w	8000fac <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000e52:	69bb      	ldr	r3, [r7, #24]
 8000e54:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d10a      	bne.n	8000e72 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000e5c:	69bb      	ldr	r3, [r7, #24]
 8000e5e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d105      	bne.n	8000e72 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000e66:	69bb      	ldr	r3, [r7, #24]
 8000e68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	f000 8095 	beq.w	8000f9c <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000e72:	69bb      	ldr	r3, [r7, #24]
 8000e74:	0e1b      	lsrs	r3, r3, #24
 8000e76:	f003 0303 	and.w	r3, r3, #3
 8000e7a:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	409a      	lsls	r2, r3
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000e86:	68bb      	ldr	r3, [r7, #8]
 8000e88:	689b      	ldr	r3, [r3, #8]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d10d      	bne.n	8000eaa <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000e8e:	68bb      	ldr	r3, [r7, #8]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000e98:	68f9      	ldr	r1, [r7, #12]
 8000e9a:	6809      	ldr	r1, [r1, #0]
 8000e9c:	431a      	orrs	r2, r3
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	3318      	adds	r3, #24
 8000ea2:	011b      	lsls	r3, r3, #4
 8000ea4:	440b      	add	r3, r1
 8000ea6:	601a      	str	r2, [r3, #0]
 8000ea8:	e00f      	b.n	8000eca <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000eaa:	68bb      	ldr	r3, [r7, #8]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000eb0:	68bb      	ldr	r3, [r7, #8]
 8000eb2:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000eb4:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000eb6:	68bb      	ldr	r3, [r7, #8]
 8000eb8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000eba:	68f9      	ldr	r1, [r7, #12]
 8000ebc:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000ebe:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	3318      	adds	r3, #24
 8000ec4:	011b      	lsls	r3, r3, #4
 8000ec6:	440b      	add	r3, r1
 8000ec8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	6819      	ldr	r1, [r3, #0]
 8000ece:	68bb      	ldr	r3, [r7, #8]
 8000ed0:	691a      	ldr	r2, [r3, #16]
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	3318      	adds	r3, #24
 8000ed6:	011b      	lsls	r3, r3, #4
 8000ed8:	440b      	add	r3, r1
 8000eda:	3304      	adds	r3, #4
 8000edc:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000ede:	68bb      	ldr	r3, [r7, #8]
 8000ee0:	7d1b      	ldrb	r3, [r3, #20]
 8000ee2:	2b01      	cmp	r3, #1
 8000ee4:	d111      	bne.n	8000f0a <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	3318      	adds	r3, #24
 8000eee:	011b      	lsls	r3, r3, #4
 8000ef0:	4413      	add	r3, r2
 8000ef2:	3304      	adds	r3, #4
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	68fa      	ldr	r2, [r7, #12]
 8000ef8:	6811      	ldr	r1, [r2, #0]
 8000efa:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	3318      	adds	r3, #24
 8000f02:	011b      	lsls	r3, r3, #4
 8000f04:	440b      	add	r3, r1
 8000f06:	3304      	adds	r3, #4
 8000f08:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	3307      	adds	r3, #7
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	061a      	lsls	r2, r3, #24
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	3306      	adds	r3, #6
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	041b      	lsls	r3, r3, #16
 8000f1a:	431a      	orrs	r2, r3
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	3305      	adds	r3, #5
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	021b      	lsls	r3, r3, #8
 8000f24:	4313      	orrs	r3, r2
 8000f26:	687a      	ldr	r2, [r7, #4]
 8000f28:	3204      	adds	r2, #4
 8000f2a:	7812      	ldrb	r2, [r2, #0]
 8000f2c:	4610      	mov	r0, r2
 8000f2e:	68fa      	ldr	r2, [r7, #12]
 8000f30:	6811      	ldr	r1, [r2, #0]
 8000f32:	ea43 0200 	orr.w	r2, r3, r0
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	011b      	lsls	r3, r3, #4
 8000f3a:	440b      	add	r3, r1
 8000f3c:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8000f40:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	3303      	adds	r3, #3
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	061a      	lsls	r2, r3, #24
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	3302      	adds	r3, #2
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	041b      	lsls	r3, r3, #16
 8000f52:	431a      	orrs	r2, r3
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	3301      	adds	r3, #1
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	021b      	lsls	r3, r3, #8
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	687a      	ldr	r2, [r7, #4]
 8000f60:	7812      	ldrb	r2, [r2, #0]
 8000f62:	4610      	mov	r0, r2
 8000f64:	68fa      	ldr	r2, [r7, #12]
 8000f66:	6811      	ldr	r1, [r2, #0]
 8000f68:	ea43 0200 	orr.w	r2, r3, r0
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	011b      	lsls	r3, r3, #4
 8000f70:	440b      	add	r3, r1
 8000f72:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8000f76:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	3318      	adds	r3, #24
 8000f80:	011b      	lsls	r3, r3, #4
 8000f82:	4413      	add	r3, r2
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	68fa      	ldr	r2, [r7, #12]
 8000f88:	6811      	ldr	r1, [r2, #0]
 8000f8a:	f043 0201 	orr.w	r2, r3, #1
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	3318      	adds	r3, #24
 8000f92:	011b      	lsls	r3, r3, #4
 8000f94:	440b      	add	r3, r1
 8000f96:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	e00e      	b.n	8000fba <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fa0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	e006      	b.n	8000fba <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fb0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000fb8:	2301      	movs	r3, #1
  }
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3724      	adds	r7, #36	@ 0x24
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr

08000fc6 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8000fc6:	b480      	push	{r7}
 8000fc8:	b085      	sub	sp, #20
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fd8:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8000fda:	7afb      	ldrb	r3, [r7, #11]
 8000fdc:	2b01      	cmp	r3, #1
 8000fde:	d002      	beq.n	8000fe6 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8000fe0:	7afb      	ldrb	r3, [r7, #11]
 8000fe2:	2b02      	cmp	r3, #2
 8000fe4:	d11d      	bne.n	8001022 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	689b      	ldr	r3, [r3, #8]
 8000fec:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d002      	beq.n	8000ffa <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	3301      	adds	r3, #1
 8000ff8:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	689b      	ldr	r3, [r3, #8]
 8001000:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001004:	2b00      	cmp	r3, #0
 8001006:	d002      	beq.n	800100e <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	3301      	adds	r3, #1
 800100c:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	689b      	ldr	r3, [r3, #8]
 8001014:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001018:	2b00      	cmp	r3, #0
 800101a:	d002      	beq.n	8001022 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	3301      	adds	r3, #1
 8001020:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8001022:	68fb      	ldr	r3, [r7, #12]
}
 8001024:	4618      	mov	r0, r3
 8001026:	3714      	adds	r7, #20
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr

08001030 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001030:	b480      	push	{r7}
 8001032:	b087      	sub	sp, #28
 8001034:	af00      	add	r7, sp, #0
 8001036:	60f8      	str	r0, [r7, #12]
 8001038:	60b9      	str	r1, [r7, #8]
 800103a:	607a      	str	r2, [r7, #4]
 800103c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001044:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001046:	7dfb      	ldrb	r3, [r7, #23]
 8001048:	2b01      	cmp	r3, #1
 800104a:	d003      	beq.n	8001054 <HAL_CAN_GetRxMessage+0x24>
 800104c:	7dfb      	ldrb	r3, [r7, #23]
 800104e:	2b02      	cmp	r3, #2
 8001050:	f040 8103 	bne.w	800125a <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d10e      	bne.n	8001078 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	68db      	ldr	r3, [r3, #12]
 8001060:	f003 0303 	and.w	r3, r3, #3
 8001064:	2b00      	cmp	r3, #0
 8001066:	d116      	bne.n	8001096 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800106c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001074:	2301      	movs	r3, #1
 8001076:	e0f7      	b.n	8001268 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	691b      	ldr	r3, [r3, #16]
 800107e:	f003 0303 	and.w	r3, r3, #3
 8001082:	2b00      	cmp	r3, #0
 8001084:	d107      	bne.n	8001096 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800108a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001092:	2301      	movs	r3, #1
 8001094:	e0e8      	b.n	8001268 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	68bb      	ldr	r3, [r7, #8]
 800109c:	331b      	adds	r3, #27
 800109e:	011b      	lsls	r3, r3, #4
 80010a0:	4413      	add	r3, r2
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f003 0204 	and.w	r2, r3, #4
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	689b      	ldr	r3, [r3, #8]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d10c      	bne.n	80010ce <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	331b      	adds	r3, #27
 80010bc:	011b      	lsls	r3, r3, #4
 80010be:	4413      	add	r3, r2
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	0d5b      	lsrs	r3, r3, #21
 80010c4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	e00b      	b.n	80010e6 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	68bb      	ldr	r3, [r7, #8]
 80010d4:	331b      	adds	r3, #27
 80010d6:	011b      	lsls	r3, r3, #4
 80010d8:	4413      	add	r3, r2
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	08db      	lsrs	r3, r3, #3
 80010de:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	68bb      	ldr	r3, [r7, #8]
 80010ec:	331b      	adds	r3, #27
 80010ee:	011b      	lsls	r3, r3, #4
 80010f0:	4413      	add	r3, r2
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f003 0202 	and.w	r2, r3, #2
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	331b      	adds	r3, #27
 8001104:	011b      	lsls	r3, r3, #4
 8001106:	4413      	add	r3, r2
 8001108:	3304      	adds	r3, #4
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f003 0308 	and.w	r3, r3, #8
 8001110:	2b00      	cmp	r3, #0
 8001112:	d003      	beq.n	800111c <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2208      	movs	r2, #8
 8001118:	611a      	str	r2, [r3, #16]
 800111a:	e00b      	b.n	8001134 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	331b      	adds	r3, #27
 8001124:	011b      	lsls	r3, r3, #4
 8001126:	4413      	add	r3, r2
 8001128:	3304      	adds	r3, #4
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f003 020f 	and.w	r2, r3, #15
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	331b      	adds	r3, #27
 800113c:	011b      	lsls	r3, r3, #4
 800113e:	4413      	add	r3, r2
 8001140:	3304      	adds	r3, #4
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	0a1b      	lsrs	r3, r3, #8
 8001146:	b2da      	uxtb	r2, r3
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	331b      	adds	r3, #27
 8001154:	011b      	lsls	r3, r3, #4
 8001156:	4413      	add	r3, r2
 8001158:	3304      	adds	r3, #4
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	0c1b      	lsrs	r3, r3, #16
 800115e:	b29a      	uxth	r2, r3
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	011b      	lsls	r3, r3, #4
 800116c:	4413      	add	r3, r2
 800116e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	b2da      	uxtb	r2, r3
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	68bb      	ldr	r3, [r7, #8]
 8001180:	011b      	lsls	r3, r3, #4
 8001182:	4413      	add	r3, r2
 8001184:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	0a1a      	lsrs	r2, r3, #8
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	3301      	adds	r3, #1
 8001190:	b2d2      	uxtb	r2, r2
 8001192:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	011b      	lsls	r3, r3, #4
 800119c:	4413      	add	r3, r2
 800119e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	0c1a      	lsrs	r2, r3, #16
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	3302      	adds	r3, #2
 80011aa:	b2d2      	uxtb	r2, r2
 80011ac:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	68bb      	ldr	r3, [r7, #8]
 80011b4:	011b      	lsls	r3, r3, #4
 80011b6:	4413      	add	r3, r2
 80011b8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	0e1a      	lsrs	r2, r3, #24
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	3303      	adds	r3, #3
 80011c4:	b2d2      	uxtb	r2, r2
 80011c6:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	011b      	lsls	r3, r3, #4
 80011d0:	4413      	add	r3, r2
 80011d2:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	3304      	adds	r3, #4
 80011dc:	b2d2      	uxtb	r2, r2
 80011de:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	011b      	lsls	r3, r3, #4
 80011e8:	4413      	add	r3, r2
 80011ea:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	0a1a      	lsrs	r2, r3, #8
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	3305      	adds	r3, #5
 80011f6:	b2d2      	uxtb	r2, r2
 80011f8:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	68bb      	ldr	r3, [r7, #8]
 8001200:	011b      	lsls	r3, r3, #4
 8001202:	4413      	add	r3, r2
 8001204:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	0c1a      	lsrs	r2, r3, #16
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	3306      	adds	r3, #6
 8001210:	b2d2      	uxtb	r2, r2
 8001212:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	011b      	lsls	r3, r3, #4
 800121c:	4413      	add	r3, r2
 800121e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	0e1a      	lsrs	r2, r3, #24
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	3307      	adds	r3, #7
 800122a:	b2d2      	uxtb	r2, r2
 800122c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800122e:	68bb      	ldr	r3, [r7, #8]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d108      	bne.n	8001246 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	68da      	ldr	r2, [r3, #12]
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f042 0220 	orr.w	r2, r2, #32
 8001242:	60da      	str	r2, [r3, #12]
 8001244:	e007      	b.n	8001256 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	691a      	ldr	r2, [r3, #16]
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f042 0220 	orr.w	r2, r2, #32
 8001254:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001256:	2300      	movs	r3, #0
 8001258:	e006      	b.n	8001268 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800125e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001266:	2301      	movs	r3, #1
  }
}
 8001268:	4618      	mov	r0, r3
 800126a:	371c      	adds	r7, #28
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr

08001274 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001274:	b480      	push	{r7}
 8001276:	b085      	sub	sp, #20
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001284:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001286:	7bfb      	ldrb	r3, [r7, #15]
 8001288:	2b01      	cmp	r3, #1
 800128a:	d002      	beq.n	8001292 <HAL_CAN_ActivateNotification+0x1e>
 800128c:	7bfb      	ldrb	r3, [r7, #15]
 800128e:	2b02      	cmp	r3, #2
 8001290:	d109      	bne.n	80012a6 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	6959      	ldr	r1, [r3, #20]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	683a      	ldr	r2, [r7, #0]
 800129e:	430a      	orrs	r2, r1
 80012a0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80012a2:	2300      	movs	r3, #0
 80012a4:	e006      	b.n	80012b4 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012aa:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
  }
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3714      	adds	r7, #20
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr

080012c0 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b08a      	sub	sp, #40	@ 0x28
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80012c8:	2300      	movs	r3, #0
 80012ca:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	695b      	ldr	r3, [r3, #20]
 80012d2:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	68db      	ldr	r3, [r3, #12]
 80012ea:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	691b      	ldr	r3, [r3, #16]
 80012f2:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	699b      	ldr	r3, [r3, #24]
 80012fa:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80012fc:	6a3b      	ldr	r3, [r7, #32]
 80012fe:	f003 0301 	and.w	r3, r3, #1
 8001302:	2b00      	cmp	r3, #0
 8001304:	d07c      	beq.n	8001400 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001306:	69bb      	ldr	r3, [r7, #24]
 8001308:	f003 0301 	and.w	r3, r3, #1
 800130c:	2b00      	cmp	r3, #0
 800130e:	d023      	beq.n	8001358 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	2201      	movs	r2, #1
 8001316:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001318:	69bb      	ldr	r3, [r7, #24]
 800131a:	f003 0302 	and.w	r3, r3, #2
 800131e:	2b00      	cmp	r3, #0
 8001320:	d003      	beq.n	800132a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f000 f983 	bl	800162e <HAL_CAN_TxMailbox0CompleteCallback>
 8001328:	e016      	b.n	8001358 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800132a:	69bb      	ldr	r3, [r7, #24]
 800132c:	f003 0304 	and.w	r3, r3, #4
 8001330:	2b00      	cmp	r3, #0
 8001332:	d004      	beq.n	800133e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001336:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800133a:	627b      	str	r3, [r7, #36]	@ 0x24
 800133c:	e00c      	b.n	8001358 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800133e:	69bb      	ldr	r3, [r7, #24]
 8001340:	f003 0308 	and.w	r3, r3, #8
 8001344:	2b00      	cmp	r3, #0
 8001346:	d004      	beq.n	8001352 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800134a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800134e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001350:	e002      	b.n	8001358 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001352:	6878      	ldr	r0, [r7, #4]
 8001354:	f000 f989 	bl	800166a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001358:	69bb      	ldr	r3, [r7, #24]
 800135a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800135e:	2b00      	cmp	r3, #0
 8001360:	d024      	beq.n	80013ac <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800136a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800136c:	69bb      	ldr	r3, [r7, #24]
 800136e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001372:	2b00      	cmp	r3, #0
 8001374:	d003      	beq.n	800137e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001376:	6878      	ldr	r0, [r7, #4]
 8001378:	f000 f963 	bl	8001642 <HAL_CAN_TxMailbox1CompleteCallback>
 800137c:	e016      	b.n	80013ac <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800137e:	69bb      	ldr	r3, [r7, #24]
 8001380:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001384:	2b00      	cmp	r3, #0
 8001386:	d004      	beq.n	8001392 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800138a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800138e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001390:	e00c      	b.n	80013ac <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001392:	69bb      	ldr	r3, [r7, #24]
 8001394:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001398:	2b00      	cmp	r3, #0
 800139a:	d004      	beq.n	80013a6 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800139c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800139e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80013a4:	e002      	b.n	80013ac <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f000 f969 	bl	800167e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80013ac:	69bb      	ldr	r3, [r7, #24]
 80013ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d024      	beq.n	8001400 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80013be:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80013c0:	69bb      	ldr	r3, [r7, #24]
 80013c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d003      	beq.n	80013d2 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f000 f943 	bl	8001656 <HAL_CAN_TxMailbox2CompleteCallback>
 80013d0:	e016      	b.n	8001400 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80013d2:	69bb      	ldr	r3, [r7, #24]
 80013d4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d004      	beq.n	80013e6 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80013dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80013e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80013e4:	e00c      	b.n	8001400 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80013e6:	69bb      	ldr	r3, [r7, #24]
 80013e8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d004      	beq.n	80013fa <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80013f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80013f8:	e002      	b.n	8001400 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	f000 f949 	bl	8001692 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001400:	6a3b      	ldr	r3, [r7, #32]
 8001402:	f003 0308 	and.w	r3, r3, #8
 8001406:	2b00      	cmp	r3, #0
 8001408:	d00c      	beq.n	8001424 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	f003 0310 	and.w	r3, r3, #16
 8001410:	2b00      	cmp	r3, #0
 8001412:	d007      	beq.n	8001424 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001416:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800141a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	2210      	movs	r2, #16
 8001422:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001424:	6a3b      	ldr	r3, [r7, #32]
 8001426:	f003 0304 	and.w	r3, r3, #4
 800142a:	2b00      	cmp	r3, #0
 800142c:	d00b      	beq.n	8001446 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	f003 0308 	and.w	r3, r3, #8
 8001434:	2b00      	cmp	r3, #0
 8001436:	d006      	beq.n	8001446 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	2208      	movs	r2, #8
 800143e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001440:	6878      	ldr	r0, [r7, #4]
 8001442:	f000 f930 	bl	80016a6 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001446:	6a3b      	ldr	r3, [r7, #32]
 8001448:	f003 0302 	and.w	r3, r3, #2
 800144c:	2b00      	cmp	r3, #0
 800144e:	d009      	beq.n	8001464 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	68db      	ldr	r3, [r3, #12]
 8001456:	f003 0303 	and.w	r3, r3, #3
 800145a:	2b00      	cmp	r3, #0
 800145c:	d002      	beq.n	8001464 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800145e:	6878      	ldr	r0, [r7, #4]
 8001460:	f7fe feb2 	bl	80001c8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001464:	6a3b      	ldr	r3, [r7, #32]
 8001466:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800146a:	2b00      	cmp	r3, #0
 800146c:	d00c      	beq.n	8001488 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	f003 0310 	and.w	r3, r3, #16
 8001474:	2b00      	cmp	r3, #0
 8001476:	d007      	beq.n	8001488 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800147a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800147e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	2210      	movs	r2, #16
 8001486:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001488:	6a3b      	ldr	r3, [r7, #32]
 800148a:	f003 0320 	and.w	r3, r3, #32
 800148e:	2b00      	cmp	r3, #0
 8001490:	d00b      	beq.n	80014aa <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	f003 0308 	and.w	r3, r3, #8
 8001498:	2b00      	cmp	r3, #0
 800149a:	d006      	beq.n	80014aa <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	2208      	movs	r2, #8
 80014a2:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80014a4:	6878      	ldr	r0, [r7, #4]
 80014a6:	f000 f912 	bl	80016ce <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80014aa:	6a3b      	ldr	r3, [r7, #32]
 80014ac:	f003 0310 	and.w	r3, r3, #16
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d009      	beq.n	80014c8 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	691b      	ldr	r3, [r3, #16]
 80014ba:	f003 0303 	and.w	r3, r3, #3
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d002      	beq.n	80014c8 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	f000 f8f9 	bl	80016ba <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80014c8:	6a3b      	ldr	r3, [r7, #32]
 80014ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d00b      	beq.n	80014ea <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	f003 0310 	and.w	r3, r3, #16
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d006      	beq.n	80014ea <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	2210      	movs	r2, #16
 80014e2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	f000 f8fc 	bl	80016e2 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80014ea:	6a3b      	ldr	r3, [r7, #32]
 80014ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d00b      	beq.n	800150c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	f003 0308 	and.w	r3, r3, #8
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d006      	beq.n	800150c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	2208      	movs	r2, #8
 8001504:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f000 f8f5 	bl	80016f6 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800150c:	6a3b      	ldr	r3, [r7, #32]
 800150e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001512:	2b00      	cmp	r3, #0
 8001514:	d07b      	beq.n	800160e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	f003 0304 	and.w	r3, r3, #4
 800151c:	2b00      	cmp	r3, #0
 800151e:	d072      	beq.n	8001606 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001520:	6a3b      	ldr	r3, [r7, #32]
 8001522:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001526:	2b00      	cmp	r3, #0
 8001528:	d008      	beq.n	800153c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001530:	2b00      	cmp	r3, #0
 8001532:	d003      	beq.n	800153c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001536:	f043 0301 	orr.w	r3, r3, #1
 800153a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800153c:	6a3b      	ldr	r3, [r7, #32]
 800153e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001542:	2b00      	cmp	r3, #0
 8001544:	d008      	beq.n	8001558 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800154c:	2b00      	cmp	r3, #0
 800154e:	d003      	beq.n	8001558 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001552:	f043 0302 	orr.w	r3, r3, #2
 8001556:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001558:	6a3b      	ldr	r3, [r7, #32]
 800155a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800155e:	2b00      	cmp	r3, #0
 8001560:	d008      	beq.n	8001574 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001568:	2b00      	cmp	r3, #0
 800156a:	d003      	beq.n	8001574 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800156c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800156e:	f043 0304 	orr.w	r3, r3, #4
 8001572:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001574:	6a3b      	ldr	r3, [r7, #32]
 8001576:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800157a:	2b00      	cmp	r3, #0
 800157c:	d043      	beq.n	8001606 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001584:	2b00      	cmp	r3, #0
 8001586:	d03e      	beq.n	8001606 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800158e:	2b60      	cmp	r3, #96	@ 0x60
 8001590:	d02b      	beq.n	80015ea <HAL_CAN_IRQHandler+0x32a>
 8001592:	2b60      	cmp	r3, #96	@ 0x60
 8001594:	d82e      	bhi.n	80015f4 <HAL_CAN_IRQHandler+0x334>
 8001596:	2b50      	cmp	r3, #80	@ 0x50
 8001598:	d022      	beq.n	80015e0 <HAL_CAN_IRQHandler+0x320>
 800159a:	2b50      	cmp	r3, #80	@ 0x50
 800159c:	d82a      	bhi.n	80015f4 <HAL_CAN_IRQHandler+0x334>
 800159e:	2b40      	cmp	r3, #64	@ 0x40
 80015a0:	d019      	beq.n	80015d6 <HAL_CAN_IRQHandler+0x316>
 80015a2:	2b40      	cmp	r3, #64	@ 0x40
 80015a4:	d826      	bhi.n	80015f4 <HAL_CAN_IRQHandler+0x334>
 80015a6:	2b30      	cmp	r3, #48	@ 0x30
 80015a8:	d010      	beq.n	80015cc <HAL_CAN_IRQHandler+0x30c>
 80015aa:	2b30      	cmp	r3, #48	@ 0x30
 80015ac:	d822      	bhi.n	80015f4 <HAL_CAN_IRQHandler+0x334>
 80015ae:	2b10      	cmp	r3, #16
 80015b0:	d002      	beq.n	80015b8 <HAL_CAN_IRQHandler+0x2f8>
 80015b2:	2b20      	cmp	r3, #32
 80015b4:	d005      	beq.n	80015c2 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80015b6:	e01d      	b.n	80015f4 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80015b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015ba:	f043 0308 	orr.w	r3, r3, #8
 80015be:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80015c0:	e019      	b.n	80015f6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80015c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015c4:	f043 0310 	orr.w	r3, r3, #16
 80015c8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80015ca:	e014      	b.n	80015f6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80015cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015ce:	f043 0320 	orr.w	r3, r3, #32
 80015d2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80015d4:	e00f      	b.n	80015f6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80015d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80015dc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80015de:	e00a      	b.n	80015f6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80015e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80015e6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80015e8:	e005      	b.n	80015f6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80015ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015f0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80015f2:	e000      	b.n	80015f6 <HAL_CAN_IRQHandler+0x336>
            break;
 80015f4:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	699a      	ldr	r2, [r3, #24]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001604:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	2204      	movs	r2, #4
 800160c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800160e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001610:	2b00      	cmp	r3, #0
 8001612:	d008      	beq.n	8001626 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800161a:	431a      	orrs	r2, r3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f000 f872 	bl	800170a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001626:	bf00      	nop
 8001628:	3728      	adds	r7, #40	@ 0x28
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}

0800162e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800162e:	b480      	push	{r7}
 8001630:	b083      	sub	sp, #12
 8001632:	af00      	add	r7, sp, #0
 8001634:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001636:	bf00      	nop
 8001638:	370c      	adds	r7, #12
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr

08001642 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001642:	b480      	push	{r7}
 8001644:	b083      	sub	sp, #12
 8001646:	af00      	add	r7, sp, #0
 8001648:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800164a:	bf00      	nop
 800164c:	370c      	adds	r7, #12
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr

08001656 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001656:	b480      	push	{r7}
 8001658:	b083      	sub	sp, #12
 800165a:	af00      	add	r7, sp, #0
 800165c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800165e:	bf00      	nop
 8001660:	370c      	adds	r7, #12
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr

0800166a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800166a:	b480      	push	{r7}
 800166c:	b083      	sub	sp, #12
 800166e:	af00      	add	r7, sp, #0
 8001670:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001672:	bf00      	nop
 8001674:	370c      	adds	r7, #12
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr

0800167e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800167e:	b480      	push	{r7}
 8001680:	b083      	sub	sp, #12
 8001682:	af00      	add	r7, sp, #0
 8001684:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001686:	bf00      	nop
 8001688:	370c      	adds	r7, #12
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr

08001692 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001692:	b480      	push	{r7}
 8001694:	b083      	sub	sp, #12
 8001696:	af00      	add	r7, sp, #0
 8001698:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800169a:	bf00      	nop
 800169c:	370c      	adds	r7, #12
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr

080016a6 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80016a6:	b480      	push	{r7}
 80016a8:	b083      	sub	sp, #12
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80016ae:	bf00      	nop
 80016b0:	370c      	adds	r7, #12
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr

080016ba <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80016ba:	b480      	push	{r7}
 80016bc:	b083      	sub	sp, #12
 80016be:	af00      	add	r7, sp, #0
 80016c0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80016c2:	bf00      	nop
 80016c4:	370c      	adds	r7, #12
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr

080016ce <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80016ce:	b480      	push	{r7}
 80016d0:	b083      	sub	sp, #12
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80016d6:	bf00      	nop
 80016d8:	370c      	adds	r7, #12
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr

080016e2 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80016e2:	b480      	push	{r7}
 80016e4:	b083      	sub	sp, #12
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80016ea:	bf00      	nop
 80016ec:	370c      	adds	r7, #12
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr

080016f6 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80016f6:	b480      	push	{r7}
 80016f8:	b083      	sub	sp, #12
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80016fe:	bf00      	nop
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr

0800170a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800170a:	b480      	push	{r7}
 800170c:	b083      	sub	sp, #12
 800170e:	af00      	add	r7, sp, #0
 8001710:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001712:	bf00      	nop
 8001714:	370c      	adds	r7, #12
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
	...

08001720 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001720:	b480      	push	{r7}
 8001722:	b085      	sub	sp, #20
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f003 0307 	and.w	r3, r3, #7
 800172e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001730:	4b0c      	ldr	r3, [pc, #48]	@ (8001764 <__NVIC_SetPriorityGrouping+0x44>)
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001736:	68ba      	ldr	r2, [r7, #8]
 8001738:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800173c:	4013      	ands	r3, r2
 800173e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001748:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800174c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001750:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001752:	4a04      	ldr	r2, [pc, #16]	@ (8001764 <__NVIC_SetPriorityGrouping+0x44>)
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	60d3      	str	r3, [r2, #12]
}
 8001758:	bf00      	nop
 800175a:	3714      	adds	r7, #20
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr
 8001764:	e000ed00 	.word	0xe000ed00

08001768 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800176c:	4b04      	ldr	r3, [pc, #16]	@ (8001780 <__NVIC_GetPriorityGrouping+0x18>)
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	0a1b      	lsrs	r3, r3, #8
 8001772:	f003 0307 	and.w	r3, r3, #7
}
 8001776:	4618      	mov	r0, r3
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr
 8001780:	e000ed00 	.word	0xe000ed00

08001784 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	4603      	mov	r3, r0
 800178c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800178e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001792:	2b00      	cmp	r3, #0
 8001794:	db0b      	blt.n	80017ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001796:	79fb      	ldrb	r3, [r7, #7]
 8001798:	f003 021f 	and.w	r2, r3, #31
 800179c:	4907      	ldr	r1, [pc, #28]	@ (80017bc <__NVIC_EnableIRQ+0x38>)
 800179e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a2:	095b      	lsrs	r3, r3, #5
 80017a4:	2001      	movs	r0, #1
 80017a6:	fa00 f202 	lsl.w	r2, r0, r2
 80017aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017ae:	bf00      	nop
 80017b0:	370c      	adds	r7, #12
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	e000e100 	.word	0xe000e100

080017c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	4603      	mov	r3, r0
 80017c8:	6039      	str	r1, [r7, #0]
 80017ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	db0a      	blt.n	80017ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	b2da      	uxtb	r2, r3
 80017d8:	490c      	ldr	r1, [pc, #48]	@ (800180c <__NVIC_SetPriority+0x4c>)
 80017da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017de:	0112      	lsls	r2, r2, #4
 80017e0:	b2d2      	uxtb	r2, r2
 80017e2:	440b      	add	r3, r1
 80017e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017e8:	e00a      	b.n	8001800 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	b2da      	uxtb	r2, r3
 80017ee:	4908      	ldr	r1, [pc, #32]	@ (8001810 <__NVIC_SetPriority+0x50>)
 80017f0:	79fb      	ldrb	r3, [r7, #7]
 80017f2:	f003 030f 	and.w	r3, r3, #15
 80017f6:	3b04      	subs	r3, #4
 80017f8:	0112      	lsls	r2, r2, #4
 80017fa:	b2d2      	uxtb	r2, r2
 80017fc:	440b      	add	r3, r1
 80017fe:	761a      	strb	r2, [r3, #24]
}
 8001800:	bf00      	nop
 8001802:	370c      	adds	r7, #12
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr
 800180c:	e000e100 	.word	0xe000e100
 8001810:	e000ed00 	.word	0xe000ed00

08001814 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001814:	b480      	push	{r7}
 8001816:	b089      	sub	sp, #36	@ 0x24
 8001818:	af00      	add	r7, sp, #0
 800181a:	60f8      	str	r0, [r7, #12]
 800181c:	60b9      	str	r1, [r7, #8]
 800181e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	f003 0307 	and.w	r3, r3, #7
 8001826:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001828:	69fb      	ldr	r3, [r7, #28]
 800182a:	f1c3 0307 	rsb	r3, r3, #7
 800182e:	2b04      	cmp	r3, #4
 8001830:	bf28      	it	cs
 8001832:	2304      	movcs	r3, #4
 8001834:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	3304      	adds	r3, #4
 800183a:	2b06      	cmp	r3, #6
 800183c:	d902      	bls.n	8001844 <NVIC_EncodePriority+0x30>
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	3b03      	subs	r3, #3
 8001842:	e000      	b.n	8001846 <NVIC_EncodePriority+0x32>
 8001844:	2300      	movs	r3, #0
 8001846:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001848:	f04f 32ff 	mov.w	r2, #4294967295
 800184c:	69bb      	ldr	r3, [r7, #24]
 800184e:	fa02 f303 	lsl.w	r3, r2, r3
 8001852:	43da      	mvns	r2, r3
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	401a      	ands	r2, r3
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800185c:	f04f 31ff 	mov.w	r1, #4294967295
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	fa01 f303 	lsl.w	r3, r1, r3
 8001866:	43d9      	mvns	r1, r3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800186c:	4313      	orrs	r3, r2
         );
}
 800186e:	4618      	mov	r0, r3
 8001870:	3724      	adds	r7, #36	@ 0x24
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr
	...

0800187c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	3b01      	subs	r3, #1
 8001888:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800188c:	d301      	bcc.n	8001892 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800188e:	2301      	movs	r3, #1
 8001890:	e00f      	b.n	80018b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001892:	4a0a      	ldr	r2, [pc, #40]	@ (80018bc <SysTick_Config+0x40>)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	3b01      	subs	r3, #1
 8001898:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800189a:	210f      	movs	r1, #15
 800189c:	f04f 30ff 	mov.w	r0, #4294967295
 80018a0:	f7ff ff8e 	bl	80017c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018a4:	4b05      	ldr	r3, [pc, #20]	@ (80018bc <SysTick_Config+0x40>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018aa:	4b04      	ldr	r3, [pc, #16]	@ (80018bc <SysTick_Config+0x40>)
 80018ac:	2207      	movs	r2, #7
 80018ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018b0:	2300      	movs	r3, #0
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3708      	adds	r7, #8
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	e000e010 	.word	0xe000e010

080018c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018c8:	6878      	ldr	r0, [r7, #4]
 80018ca:	f7ff ff29 	bl	8001720 <__NVIC_SetPriorityGrouping>
}
 80018ce:	bf00      	nop
 80018d0:	3708      	adds	r7, #8
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}

080018d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018d6:	b580      	push	{r7, lr}
 80018d8:	b086      	sub	sp, #24
 80018da:	af00      	add	r7, sp, #0
 80018dc:	4603      	mov	r3, r0
 80018de:	60b9      	str	r1, [r7, #8]
 80018e0:	607a      	str	r2, [r7, #4]
 80018e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018e4:	2300      	movs	r3, #0
 80018e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018e8:	f7ff ff3e 	bl	8001768 <__NVIC_GetPriorityGrouping>
 80018ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	68b9      	ldr	r1, [r7, #8]
 80018f2:	6978      	ldr	r0, [r7, #20]
 80018f4:	f7ff ff8e 	bl	8001814 <NVIC_EncodePriority>
 80018f8:	4602      	mov	r2, r0
 80018fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018fe:	4611      	mov	r1, r2
 8001900:	4618      	mov	r0, r3
 8001902:	f7ff ff5d 	bl	80017c0 <__NVIC_SetPriority>
}
 8001906:	bf00      	nop
 8001908:	3718      	adds	r7, #24
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}

0800190e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800190e:	b580      	push	{r7, lr}
 8001910:	b082      	sub	sp, #8
 8001912:	af00      	add	r7, sp, #0
 8001914:	4603      	mov	r3, r0
 8001916:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001918:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800191c:	4618      	mov	r0, r3
 800191e:	f7ff ff31 	bl	8001784 <__NVIC_EnableIRQ>
}
 8001922:	bf00      	nop
 8001924:	3708      	adds	r7, #8
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}

0800192a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800192a:	b580      	push	{r7, lr}
 800192c:	b082      	sub	sp, #8
 800192e:	af00      	add	r7, sp, #0
 8001930:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001932:	6878      	ldr	r0, [r7, #4]
 8001934:	f7ff ffa2 	bl	800187c <SysTick_Config>
 8001938:	4603      	mov	r3, r0
}
 800193a:	4618      	mov	r0, r3
 800193c:	3708      	adds	r7, #8
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
	...

08001944 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001944:	b480      	push	{r7}
 8001946:	b087      	sub	sp, #28
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800194e:	2300      	movs	r3, #0
 8001950:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001952:	e14e      	b.n	8001bf2 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	2101      	movs	r1, #1
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	fa01 f303 	lsl.w	r3, r1, r3
 8001960:	4013      	ands	r3, r2
 8001962:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	2b00      	cmp	r3, #0
 8001968:	f000 8140 	beq.w	8001bec <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f003 0303 	and.w	r3, r3, #3
 8001974:	2b01      	cmp	r3, #1
 8001976:	d005      	beq.n	8001984 <HAL_GPIO_Init+0x40>
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f003 0303 	and.w	r3, r3, #3
 8001980:	2b02      	cmp	r3, #2
 8001982:	d130      	bne.n	80019e6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	005b      	lsls	r3, r3, #1
 800198e:	2203      	movs	r2, #3
 8001990:	fa02 f303 	lsl.w	r3, r2, r3
 8001994:	43db      	mvns	r3, r3
 8001996:	693a      	ldr	r2, [r7, #16]
 8001998:	4013      	ands	r3, r2
 800199a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	68da      	ldr	r2, [r3, #12]
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	005b      	lsls	r3, r3, #1
 80019a4:	fa02 f303 	lsl.w	r3, r2, r3
 80019a8:	693a      	ldr	r2, [r7, #16]
 80019aa:	4313      	orrs	r3, r2
 80019ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	693a      	ldr	r2, [r7, #16]
 80019b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019ba:	2201      	movs	r2, #1
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	fa02 f303 	lsl.w	r3, r2, r3
 80019c2:	43db      	mvns	r3, r3
 80019c4:	693a      	ldr	r2, [r7, #16]
 80019c6:	4013      	ands	r3, r2
 80019c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	091b      	lsrs	r3, r3, #4
 80019d0:	f003 0201 	and.w	r2, r3, #1
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	fa02 f303 	lsl.w	r3, r2, r3
 80019da:	693a      	ldr	r2, [r7, #16]
 80019dc:	4313      	orrs	r3, r2
 80019de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	693a      	ldr	r2, [r7, #16]
 80019e4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f003 0303 	and.w	r3, r3, #3
 80019ee:	2b03      	cmp	r3, #3
 80019f0:	d017      	beq.n	8001a22 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	68db      	ldr	r3, [r3, #12]
 80019f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	005b      	lsls	r3, r3, #1
 80019fc:	2203      	movs	r2, #3
 80019fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001a02:	43db      	mvns	r3, r3
 8001a04:	693a      	ldr	r2, [r7, #16]
 8001a06:	4013      	ands	r3, r2
 8001a08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	689a      	ldr	r2, [r3, #8]
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	005b      	lsls	r3, r3, #1
 8001a12:	fa02 f303 	lsl.w	r3, r2, r3
 8001a16:	693a      	ldr	r2, [r7, #16]
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	693a      	ldr	r2, [r7, #16]
 8001a20:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	f003 0303 	and.w	r3, r3, #3
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	d123      	bne.n	8001a76 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	08da      	lsrs	r2, r3, #3
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	3208      	adds	r2, #8
 8001a36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a3a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	f003 0307 	and.w	r3, r3, #7
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	220f      	movs	r2, #15
 8001a46:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4a:	43db      	mvns	r3, r3
 8001a4c:	693a      	ldr	r2, [r7, #16]
 8001a4e:	4013      	ands	r3, r2
 8001a50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	691a      	ldr	r2, [r3, #16]
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	f003 0307 	and.w	r3, r3, #7
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a62:	693a      	ldr	r2, [r7, #16]
 8001a64:	4313      	orrs	r3, r2
 8001a66:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	08da      	lsrs	r2, r3, #3
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	3208      	adds	r2, #8
 8001a70:	6939      	ldr	r1, [r7, #16]
 8001a72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	005b      	lsls	r3, r3, #1
 8001a80:	2203      	movs	r2, #3
 8001a82:	fa02 f303 	lsl.w	r3, r2, r3
 8001a86:	43db      	mvns	r3, r3
 8001a88:	693a      	ldr	r2, [r7, #16]
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	f003 0203 	and.w	r2, r3, #3
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	005b      	lsls	r3, r3, #1
 8001a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9e:	693a      	ldr	r2, [r7, #16]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	693a      	ldr	r2, [r7, #16]
 8001aa8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	f000 809a 	beq.w	8001bec <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ab8:	4b55      	ldr	r3, [pc, #340]	@ (8001c10 <HAL_GPIO_Init+0x2cc>)
 8001aba:	699b      	ldr	r3, [r3, #24]
 8001abc:	4a54      	ldr	r2, [pc, #336]	@ (8001c10 <HAL_GPIO_Init+0x2cc>)
 8001abe:	f043 0301 	orr.w	r3, r3, #1
 8001ac2:	6193      	str	r3, [r2, #24]
 8001ac4:	4b52      	ldr	r3, [pc, #328]	@ (8001c10 <HAL_GPIO_Init+0x2cc>)
 8001ac6:	699b      	ldr	r3, [r3, #24]
 8001ac8:	f003 0301 	and.w	r3, r3, #1
 8001acc:	60bb      	str	r3, [r7, #8]
 8001ace:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ad0:	4a50      	ldr	r2, [pc, #320]	@ (8001c14 <HAL_GPIO_Init+0x2d0>)
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	089b      	lsrs	r3, r3, #2
 8001ad6:	3302      	adds	r3, #2
 8001ad8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001adc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	f003 0303 	and.w	r3, r3, #3
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	220f      	movs	r2, #15
 8001ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aec:	43db      	mvns	r3, r3
 8001aee:	693a      	ldr	r2, [r7, #16]
 8001af0:	4013      	ands	r3, r2
 8001af2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001afa:	d013      	beq.n	8001b24 <HAL_GPIO_Init+0x1e0>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	4a46      	ldr	r2, [pc, #280]	@ (8001c18 <HAL_GPIO_Init+0x2d4>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d00d      	beq.n	8001b20 <HAL_GPIO_Init+0x1dc>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	4a45      	ldr	r2, [pc, #276]	@ (8001c1c <HAL_GPIO_Init+0x2d8>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d007      	beq.n	8001b1c <HAL_GPIO_Init+0x1d8>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	4a44      	ldr	r2, [pc, #272]	@ (8001c20 <HAL_GPIO_Init+0x2dc>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d101      	bne.n	8001b18 <HAL_GPIO_Init+0x1d4>
 8001b14:	2303      	movs	r3, #3
 8001b16:	e006      	b.n	8001b26 <HAL_GPIO_Init+0x1e2>
 8001b18:	2305      	movs	r3, #5
 8001b1a:	e004      	b.n	8001b26 <HAL_GPIO_Init+0x1e2>
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	e002      	b.n	8001b26 <HAL_GPIO_Init+0x1e2>
 8001b20:	2301      	movs	r3, #1
 8001b22:	e000      	b.n	8001b26 <HAL_GPIO_Init+0x1e2>
 8001b24:	2300      	movs	r3, #0
 8001b26:	697a      	ldr	r2, [r7, #20]
 8001b28:	f002 0203 	and.w	r2, r2, #3
 8001b2c:	0092      	lsls	r2, r2, #2
 8001b2e:	4093      	lsls	r3, r2
 8001b30:	693a      	ldr	r2, [r7, #16]
 8001b32:	4313      	orrs	r3, r2
 8001b34:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b36:	4937      	ldr	r1, [pc, #220]	@ (8001c14 <HAL_GPIO_Init+0x2d0>)
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	089b      	lsrs	r3, r3, #2
 8001b3c:	3302      	adds	r3, #2
 8001b3e:	693a      	ldr	r2, [r7, #16]
 8001b40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b44:	4b37      	ldr	r3, [pc, #220]	@ (8001c24 <HAL_GPIO_Init+0x2e0>)
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	43db      	mvns	r3, r3
 8001b4e:	693a      	ldr	r2, [r7, #16]
 8001b50:	4013      	ands	r3, r2
 8001b52:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d003      	beq.n	8001b68 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001b60:	693a      	ldr	r2, [r7, #16]
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	4313      	orrs	r3, r2
 8001b66:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001b68:	4a2e      	ldr	r2, [pc, #184]	@ (8001c24 <HAL_GPIO_Init+0x2e0>)
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b6e:	4b2d      	ldr	r3, [pc, #180]	@ (8001c24 <HAL_GPIO_Init+0x2e0>)
 8001b70:	68db      	ldr	r3, [r3, #12]
 8001b72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	43db      	mvns	r3, r3
 8001b78:	693a      	ldr	r2, [r7, #16]
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d003      	beq.n	8001b92 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001b8a:	693a      	ldr	r2, [r7, #16]
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001b92:	4a24      	ldr	r2, [pc, #144]	@ (8001c24 <HAL_GPIO_Init+0x2e0>)
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b98:	4b22      	ldr	r3, [pc, #136]	@ (8001c24 <HAL_GPIO_Init+0x2e0>)
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	43db      	mvns	r3, r3
 8001ba2:	693a      	ldr	r2, [r7, #16]
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d003      	beq.n	8001bbc <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001bb4:	693a      	ldr	r2, [r7, #16]
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001bbc:	4a19      	ldr	r2, [pc, #100]	@ (8001c24 <HAL_GPIO_Init+0x2e0>)
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bc2:	4b18      	ldr	r3, [pc, #96]	@ (8001c24 <HAL_GPIO_Init+0x2e0>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	43db      	mvns	r3, r3
 8001bcc:	693a      	ldr	r2, [r7, #16]
 8001bce:	4013      	ands	r3, r2
 8001bd0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d003      	beq.n	8001be6 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001bde:	693a      	ldr	r2, [r7, #16]
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001be6:	4a0f      	ldr	r2, [pc, #60]	@ (8001c24 <HAL_GPIO_Init+0x2e0>)
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	3301      	adds	r3, #1
 8001bf0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	fa22 f303 	lsr.w	r3, r2, r3
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	f47f aea9 	bne.w	8001954 <HAL_GPIO_Init+0x10>
  }
}
 8001c02:	bf00      	nop
 8001c04:	bf00      	nop
 8001c06:	371c      	adds	r7, #28
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr
 8001c10:	40021000 	.word	0x40021000
 8001c14:	40010000 	.word	0x40010000
 8001c18:	48000400 	.word	0x48000400
 8001c1c:	48000800 	.word	0x48000800
 8001c20:	48000c00 	.word	0x48000c00
 8001c24:	40010400 	.word	0x40010400

08001c28 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c34:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c38:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c3e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d102      	bne.n	8001c4e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	f001 b823 	b.w	8002c94 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c52:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 0301 	and.w	r3, r3, #1
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	f000 817d 	beq.w	8001f5e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001c64:	4bbc      	ldr	r3, [pc, #752]	@ (8001f58 <HAL_RCC_OscConfig+0x330>)
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f003 030c 	and.w	r3, r3, #12
 8001c6c:	2b04      	cmp	r3, #4
 8001c6e:	d00c      	beq.n	8001c8a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c70:	4bb9      	ldr	r3, [pc, #740]	@ (8001f58 <HAL_RCC_OscConfig+0x330>)
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f003 030c 	and.w	r3, r3, #12
 8001c78:	2b08      	cmp	r3, #8
 8001c7a:	d15c      	bne.n	8001d36 <HAL_RCC_OscConfig+0x10e>
 8001c7c:	4bb6      	ldr	r3, [pc, #728]	@ (8001f58 <HAL_RCC_OscConfig+0x330>)
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c88:	d155      	bne.n	8001d36 <HAL_RCC_OscConfig+0x10e>
 8001c8a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c8e:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c92:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8001c96:	fa93 f3a3 	rbit	r3, r3
 8001c9a:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001c9e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ca2:	fab3 f383 	clz	r3, r3
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	095b      	lsrs	r3, r3, #5
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	f043 0301 	orr.w	r3, r3, #1
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d102      	bne.n	8001cbc <HAL_RCC_OscConfig+0x94>
 8001cb6:	4ba8      	ldr	r3, [pc, #672]	@ (8001f58 <HAL_RCC_OscConfig+0x330>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	e015      	b.n	8001ce8 <HAL_RCC_OscConfig+0xc0>
 8001cbc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001cc0:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc4:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8001cc8:	fa93 f3a3 	rbit	r3, r3
 8001ccc:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001cd0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001cd4:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001cd8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8001cdc:	fa93 f3a3 	rbit	r3, r3
 8001ce0:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8001ce4:	4b9c      	ldr	r3, [pc, #624]	@ (8001f58 <HAL_RCC_OscConfig+0x330>)
 8001ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ce8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001cec:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8001cf0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001cf4:	fa92 f2a2 	rbit	r2, r2
 8001cf8:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8001cfc:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8001d00:	fab2 f282 	clz	r2, r2
 8001d04:	b2d2      	uxtb	r2, r2
 8001d06:	f042 0220 	orr.w	r2, r2, #32
 8001d0a:	b2d2      	uxtb	r2, r2
 8001d0c:	f002 021f 	and.w	r2, r2, #31
 8001d10:	2101      	movs	r1, #1
 8001d12:	fa01 f202 	lsl.w	r2, r1, r2
 8001d16:	4013      	ands	r3, r2
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	f000 811f 	beq.w	8001f5c <HAL_RCC_OscConfig+0x334>
 8001d1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d22:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	f040 8116 	bne.w	8001f5c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	f000 bfaf 	b.w	8002c94 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d3a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d46:	d106      	bne.n	8001d56 <HAL_RCC_OscConfig+0x12e>
 8001d48:	4b83      	ldr	r3, [pc, #524]	@ (8001f58 <HAL_RCC_OscConfig+0x330>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a82      	ldr	r2, [pc, #520]	@ (8001f58 <HAL_RCC_OscConfig+0x330>)
 8001d4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d52:	6013      	str	r3, [r2, #0]
 8001d54:	e036      	b.n	8001dc4 <HAL_RCC_OscConfig+0x19c>
 8001d56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d5a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d10c      	bne.n	8001d80 <HAL_RCC_OscConfig+0x158>
 8001d66:	4b7c      	ldr	r3, [pc, #496]	@ (8001f58 <HAL_RCC_OscConfig+0x330>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a7b      	ldr	r2, [pc, #492]	@ (8001f58 <HAL_RCC_OscConfig+0x330>)
 8001d6c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d70:	6013      	str	r3, [r2, #0]
 8001d72:	4b79      	ldr	r3, [pc, #484]	@ (8001f58 <HAL_RCC_OscConfig+0x330>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a78      	ldr	r2, [pc, #480]	@ (8001f58 <HAL_RCC_OscConfig+0x330>)
 8001d78:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d7c:	6013      	str	r3, [r2, #0]
 8001d7e:	e021      	b.n	8001dc4 <HAL_RCC_OscConfig+0x19c>
 8001d80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d84:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d90:	d10c      	bne.n	8001dac <HAL_RCC_OscConfig+0x184>
 8001d92:	4b71      	ldr	r3, [pc, #452]	@ (8001f58 <HAL_RCC_OscConfig+0x330>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a70      	ldr	r2, [pc, #448]	@ (8001f58 <HAL_RCC_OscConfig+0x330>)
 8001d98:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d9c:	6013      	str	r3, [r2, #0]
 8001d9e:	4b6e      	ldr	r3, [pc, #440]	@ (8001f58 <HAL_RCC_OscConfig+0x330>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a6d      	ldr	r2, [pc, #436]	@ (8001f58 <HAL_RCC_OscConfig+0x330>)
 8001da4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001da8:	6013      	str	r3, [r2, #0]
 8001daa:	e00b      	b.n	8001dc4 <HAL_RCC_OscConfig+0x19c>
 8001dac:	4b6a      	ldr	r3, [pc, #424]	@ (8001f58 <HAL_RCC_OscConfig+0x330>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a69      	ldr	r2, [pc, #420]	@ (8001f58 <HAL_RCC_OscConfig+0x330>)
 8001db2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001db6:	6013      	str	r3, [r2, #0]
 8001db8:	4b67      	ldr	r3, [pc, #412]	@ (8001f58 <HAL_RCC_OscConfig+0x330>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a66      	ldr	r2, [pc, #408]	@ (8001f58 <HAL_RCC_OscConfig+0x330>)
 8001dbe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001dc2:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001dc4:	4b64      	ldr	r3, [pc, #400]	@ (8001f58 <HAL_RCC_OscConfig+0x330>)
 8001dc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dc8:	f023 020f 	bic.w	r2, r3, #15
 8001dcc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dd0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	495f      	ldr	r1, [pc, #380]	@ (8001f58 <HAL_RCC_OscConfig+0x330>)
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001dde:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001de2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d059      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dee:	f7fe fe05 	bl	80009fc <HAL_GetTick>
 8001df2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001df6:	e00a      	b.n	8001e0e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001df8:	f7fe fe00 	bl	80009fc <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001e02:	1ad3      	subs	r3, r2, r3
 8001e04:	2b64      	cmp	r3, #100	@ 0x64
 8001e06:	d902      	bls.n	8001e0e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001e08:	2303      	movs	r3, #3
 8001e0a:	f000 bf43 	b.w	8002c94 <HAL_RCC_OscConfig+0x106c>
 8001e0e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e12:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e16:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001e1a:	fa93 f3a3 	rbit	r3, r3
 8001e1e:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8001e22:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e26:	fab3 f383 	clz	r3, r3
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	095b      	lsrs	r3, r3, #5
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	f043 0301 	orr.w	r3, r3, #1
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d102      	bne.n	8001e40 <HAL_RCC_OscConfig+0x218>
 8001e3a:	4b47      	ldr	r3, [pc, #284]	@ (8001f58 <HAL_RCC_OscConfig+0x330>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	e015      	b.n	8001e6c <HAL_RCC_OscConfig+0x244>
 8001e40:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e44:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e48:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001e4c:	fa93 f3a3 	rbit	r3, r3
 8001e50:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001e54:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e58:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001e5c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8001e60:	fa93 f3a3 	rbit	r3, r3
 8001e64:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8001e68:	4b3b      	ldr	r3, [pc, #236]	@ (8001f58 <HAL_RCC_OscConfig+0x330>)
 8001e6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e6c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001e70:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8001e74:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001e78:	fa92 f2a2 	rbit	r2, r2
 8001e7c:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8001e80:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8001e84:	fab2 f282 	clz	r2, r2
 8001e88:	b2d2      	uxtb	r2, r2
 8001e8a:	f042 0220 	orr.w	r2, r2, #32
 8001e8e:	b2d2      	uxtb	r2, r2
 8001e90:	f002 021f 	and.w	r2, r2, #31
 8001e94:	2101      	movs	r1, #1
 8001e96:	fa01 f202 	lsl.w	r2, r1, r2
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d0ab      	beq.n	8001df8 <HAL_RCC_OscConfig+0x1d0>
 8001ea0:	e05d      	b.n	8001f5e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea2:	f7fe fdab 	bl	80009fc <HAL_GetTick>
 8001ea6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eaa:	e00a      	b.n	8001ec2 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001eac:	f7fe fda6 	bl	80009fc <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	2b64      	cmp	r3, #100	@ 0x64
 8001eba:	d902      	bls.n	8001ec2 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	f000 bee9 	b.w	8002c94 <HAL_RCC_OscConfig+0x106c>
 8001ec2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ec6:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eca:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8001ece:	fa93 f3a3 	rbit	r3, r3
 8001ed2:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8001ed6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eda:	fab3 f383 	clz	r3, r3
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	095b      	lsrs	r3, r3, #5
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	f043 0301 	orr.w	r3, r3, #1
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d102      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x2cc>
 8001eee:	4b1a      	ldr	r3, [pc, #104]	@ (8001f58 <HAL_RCC_OscConfig+0x330>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	e015      	b.n	8001f20 <HAL_RCC_OscConfig+0x2f8>
 8001ef4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ef8:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001efc:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8001f00:	fa93 f3a3 	rbit	r3, r3
 8001f04:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001f08:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001f0c:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001f10:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8001f14:	fa93 f3a3 	rbit	r3, r3
 8001f18:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8001f1c:	4b0e      	ldr	r3, [pc, #56]	@ (8001f58 <HAL_RCC_OscConfig+0x330>)
 8001f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f20:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001f24:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8001f28:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001f2c:	fa92 f2a2 	rbit	r2, r2
 8001f30:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8001f34:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001f38:	fab2 f282 	clz	r2, r2
 8001f3c:	b2d2      	uxtb	r2, r2
 8001f3e:	f042 0220 	orr.w	r2, r2, #32
 8001f42:	b2d2      	uxtb	r2, r2
 8001f44:	f002 021f 	and.w	r2, r2, #31
 8001f48:	2101      	movs	r1, #1
 8001f4a:	fa01 f202 	lsl.w	r2, r1, r2
 8001f4e:	4013      	ands	r3, r2
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d1ab      	bne.n	8001eac <HAL_RCC_OscConfig+0x284>
 8001f54:	e003      	b.n	8001f5e <HAL_RCC_OscConfig+0x336>
 8001f56:	bf00      	nop
 8001f58:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f62:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 0302 	and.w	r3, r3, #2
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	f000 817d 	beq.w	800226e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001f74:	4ba6      	ldr	r3, [pc, #664]	@ (8002210 <HAL_RCC_OscConfig+0x5e8>)
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f003 030c 	and.w	r3, r3, #12
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d00b      	beq.n	8001f98 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001f80:	4ba3      	ldr	r3, [pc, #652]	@ (8002210 <HAL_RCC_OscConfig+0x5e8>)
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f003 030c 	and.w	r3, r3, #12
 8001f88:	2b08      	cmp	r3, #8
 8001f8a:	d172      	bne.n	8002072 <HAL_RCC_OscConfig+0x44a>
 8001f8c:	4ba0      	ldr	r3, [pc, #640]	@ (8002210 <HAL_RCC_OscConfig+0x5e8>)
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d16c      	bne.n	8002072 <HAL_RCC_OscConfig+0x44a>
 8001f98:	2302      	movs	r3, #2
 8001f9a:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f9e:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001fa2:	fa93 f3a3 	rbit	r3, r3
 8001fa6:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8001faa:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fae:	fab3 f383 	clz	r3, r3
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	095b      	lsrs	r3, r3, #5
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	f043 0301 	orr.w	r3, r3, #1
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d102      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x3a0>
 8001fc2:	4b93      	ldr	r3, [pc, #588]	@ (8002210 <HAL_RCC_OscConfig+0x5e8>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	e013      	b.n	8001ff0 <HAL_RCC_OscConfig+0x3c8>
 8001fc8:	2302      	movs	r3, #2
 8001fca:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fce:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8001fd2:	fa93 f3a3 	rbit	r3, r3
 8001fd6:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001fda:	2302      	movs	r3, #2
 8001fdc:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001fe0:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8001fe4:	fa93 f3a3 	rbit	r3, r3
 8001fe8:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8001fec:	4b88      	ldr	r3, [pc, #544]	@ (8002210 <HAL_RCC_OscConfig+0x5e8>)
 8001fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ff0:	2202      	movs	r2, #2
 8001ff2:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8001ff6:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001ffa:	fa92 f2a2 	rbit	r2, r2
 8001ffe:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8002002:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8002006:	fab2 f282 	clz	r2, r2
 800200a:	b2d2      	uxtb	r2, r2
 800200c:	f042 0220 	orr.w	r2, r2, #32
 8002010:	b2d2      	uxtb	r2, r2
 8002012:	f002 021f 	and.w	r2, r2, #31
 8002016:	2101      	movs	r1, #1
 8002018:	fa01 f202 	lsl.w	r2, r1, r2
 800201c:	4013      	ands	r3, r2
 800201e:	2b00      	cmp	r3, #0
 8002020:	d00a      	beq.n	8002038 <HAL_RCC_OscConfig+0x410>
 8002022:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002026:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	691b      	ldr	r3, [r3, #16]
 800202e:	2b01      	cmp	r3, #1
 8002030:	d002      	beq.n	8002038 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	f000 be2e 	b.w	8002c94 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002038:	4b75      	ldr	r3, [pc, #468]	@ (8002210 <HAL_RCC_OscConfig+0x5e8>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002040:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002044:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	695b      	ldr	r3, [r3, #20]
 800204c:	21f8      	movs	r1, #248	@ 0xf8
 800204e:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002052:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8002056:	fa91 f1a1 	rbit	r1, r1
 800205a:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 800205e:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8002062:	fab1 f181 	clz	r1, r1
 8002066:	b2c9      	uxtb	r1, r1
 8002068:	408b      	lsls	r3, r1
 800206a:	4969      	ldr	r1, [pc, #420]	@ (8002210 <HAL_RCC_OscConfig+0x5e8>)
 800206c:	4313      	orrs	r3, r2
 800206e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002070:	e0fd      	b.n	800226e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002072:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002076:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	691b      	ldr	r3, [r3, #16]
 800207e:	2b00      	cmp	r3, #0
 8002080:	f000 8088 	beq.w	8002194 <HAL_RCC_OscConfig+0x56c>
 8002084:	2301      	movs	r3, #1
 8002086:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800208a:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 800208e:	fa93 f3a3 	rbit	r3, r3
 8002092:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8002096:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800209a:	fab3 f383 	clz	r3, r3
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80020a4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	461a      	mov	r2, r3
 80020ac:	2301      	movs	r3, #1
 80020ae:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020b0:	f7fe fca4 	bl	80009fc <HAL_GetTick>
 80020b4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020b8:	e00a      	b.n	80020d0 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020ba:	f7fe fc9f 	bl	80009fc <HAL_GetTick>
 80020be:	4602      	mov	r2, r0
 80020c0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	2b02      	cmp	r3, #2
 80020c8:	d902      	bls.n	80020d0 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80020ca:	2303      	movs	r3, #3
 80020cc:	f000 bde2 	b.w	8002c94 <HAL_RCC_OscConfig+0x106c>
 80020d0:	2302      	movs	r3, #2
 80020d2:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d6:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80020da:	fa93 f3a3 	rbit	r3, r3
 80020de:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 80020e2:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020e6:	fab3 f383 	clz	r3, r3
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	095b      	lsrs	r3, r3, #5
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	f043 0301 	orr.w	r3, r3, #1
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d102      	bne.n	8002100 <HAL_RCC_OscConfig+0x4d8>
 80020fa:	4b45      	ldr	r3, [pc, #276]	@ (8002210 <HAL_RCC_OscConfig+0x5e8>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	e013      	b.n	8002128 <HAL_RCC_OscConfig+0x500>
 8002100:	2302      	movs	r3, #2
 8002102:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002106:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800210a:	fa93 f3a3 	rbit	r3, r3
 800210e:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8002112:	2302      	movs	r3, #2
 8002114:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002118:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800211c:	fa93 f3a3 	rbit	r3, r3
 8002120:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8002124:	4b3a      	ldr	r3, [pc, #232]	@ (8002210 <HAL_RCC_OscConfig+0x5e8>)
 8002126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002128:	2202      	movs	r2, #2
 800212a:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 800212e:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8002132:	fa92 f2a2 	rbit	r2, r2
 8002136:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 800213a:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 800213e:	fab2 f282 	clz	r2, r2
 8002142:	b2d2      	uxtb	r2, r2
 8002144:	f042 0220 	orr.w	r2, r2, #32
 8002148:	b2d2      	uxtb	r2, r2
 800214a:	f002 021f 	and.w	r2, r2, #31
 800214e:	2101      	movs	r1, #1
 8002150:	fa01 f202 	lsl.w	r2, r1, r2
 8002154:	4013      	ands	r3, r2
 8002156:	2b00      	cmp	r3, #0
 8002158:	d0af      	beq.n	80020ba <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800215a:	4b2d      	ldr	r3, [pc, #180]	@ (8002210 <HAL_RCC_OscConfig+0x5e8>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002162:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002166:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	695b      	ldr	r3, [r3, #20]
 800216e:	21f8      	movs	r1, #248	@ 0xf8
 8002170:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002174:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8002178:	fa91 f1a1 	rbit	r1, r1
 800217c:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8002180:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8002184:	fab1 f181 	clz	r1, r1
 8002188:	b2c9      	uxtb	r1, r1
 800218a:	408b      	lsls	r3, r1
 800218c:	4920      	ldr	r1, [pc, #128]	@ (8002210 <HAL_RCC_OscConfig+0x5e8>)
 800218e:	4313      	orrs	r3, r2
 8002190:	600b      	str	r3, [r1, #0]
 8002192:	e06c      	b.n	800226e <HAL_RCC_OscConfig+0x646>
 8002194:	2301      	movs	r3, #1
 8002196:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800219a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800219e:	fa93 f3a3 	rbit	r3, r3
 80021a2:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 80021a6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021aa:	fab3 f383 	clz	r3, r3
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80021b4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	461a      	mov	r2, r3
 80021bc:	2300      	movs	r3, #0
 80021be:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c0:	f7fe fc1c 	bl	80009fc <HAL_GetTick>
 80021c4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021c8:	e00a      	b.n	80021e0 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021ca:	f7fe fc17 	bl	80009fc <HAL_GetTick>
 80021ce:	4602      	mov	r2, r0
 80021d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	d902      	bls.n	80021e0 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	f000 bd5a 	b.w	8002c94 <HAL_RCC_OscConfig+0x106c>
 80021e0:	2302      	movs	r3, #2
 80021e2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021e6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80021ea:	fa93 f3a3 	rbit	r3, r3
 80021ee:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 80021f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021f6:	fab3 f383 	clz	r3, r3
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	095b      	lsrs	r3, r3, #5
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	f043 0301 	orr.w	r3, r3, #1
 8002204:	b2db      	uxtb	r3, r3
 8002206:	2b01      	cmp	r3, #1
 8002208:	d104      	bne.n	8002214 <HAL_RCC_OscConfig+0x5ec>
 800220a:	4b01      	ldr	r3, [pc, #4]	@ (8002210 <HAL_RCC_OscConfig+0x5e8>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	e015      	b.n	800223c <HAL_RCC_OscConfig+0x614>
 8002210:	40021000 	.word	0x40021000
 8002214:	2302      	movs	r3, #2
 8002216:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800221a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800221e:	fa93 f3a3 	rbit	r3, r3
 8002222:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002226:	2302      	movs	r3, #2
 8002228:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 800222c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002230:	fa93 f3a3 	rbit	r3, r3
 8002234:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002238:	4bc8      	ldr	r3, [pc, #800]	@ (800255c <HAL_RCC_OscConfig+0x934>)
 800223a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800223c:	2202      	movs	r2, #2
 800223e:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8002242:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002246:	fa92 f2a2 	rbit	r2, r2
 800224a:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 800224e:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8002252:	fab2 f282 	clz	r2, r2
 8002256:	b2d2      	uxtb	r2, r2
 8002258:	f042 0220 	orr.w	r2, r2, #32
 800225c:	b2d2      	uxtb	r2, r2
 800225e:	f002 021f 	and.w	r2, r2, #31
 8002262:	2101      	movs	r1, #1
 8002264:	fa01 f202 	lsl.w	r2, r1, r2
 8002268:	4013      	ands	r3, r2
 800226a:	2b00      	cmp	r3, #0
 800226c:	d1ad      	bne.n	80021ca <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800226e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002272:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0308 	and.w	r3, r3, #8
 800227e:	2b00      	cmp	r3, #0
 8002280:	f000 8110 	beq.w	80024a4 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002284:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002288:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	699b      	ldr	r3, [r3, #24]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d079      	beq.n	8002388 <HAL_RCC_OscConfig+0x760>
 8002294:	2301      	movs	r3, #1
 8002296:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800229a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800229e:	fa93 f3a3 	rbit	r3, r3
 80022a2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 80022a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022aa:	fab3 f383 	clz	r3, r3
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	461a      	mov	r2, r3
 80022b2:	4bab      	ldr	r3, [pc, #684]	@ (8002560 <HAL_RCC_OscConfig+0x938>)
 80022b4:	4413      	add	r3, r2
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	461a      	mov	r2, r3
 80022ba:	2301      	movs	r3, #1
 80022bc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022be:	f7fe fb9d 	bl	80009fc <HAL_GetTick>
 80022c2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022c6:	e00a      	b.n	80022de <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022c8:	f7fe fb98 	bl	80009fc <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80022d2:	1ad3      	subs	r3, r2, r3
 80022d4:	2b02      	cmp	r3, #2
 80022d6:	d902      	bls.n	80022de <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80022d8:	2303      	movs	r3, #3
 80022da:	f000 bcdb 	b.w	8002c94 <HAL_RCC_OscConfig+0x106c>
 80022de:	2302      	movs	r3, #2
 80022e0:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e4:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80022e8:	fa93 f3a3 	rbit	r3, r3
 80022ec:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80022f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022f4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80022f8:	2202      	movs	r2, #2
 80022fa:	601a      	str	r2, [r3, #0]
 80022fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002300:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	fa93 f2a3 	rbit	r2, r3
 800230a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800230e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002312:	601a      	str	r2, [r3, #0]
 8002314:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002318:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800231c:	2202      	movs	r2, #2
 800231e:	601a      	str	r2, [r3, #0]
 8002320:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002324:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	fa93 f2a3 	rbit	r2, r3
 800232e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002332:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002336:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002338:	4b88      	ldr	r3, [pc, #544]	@ (800255c <HAL_RCC_OscConfig+0x934>)
 800233a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800233c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002340:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002344:	2102      	movs	r1, #2
 8002346:	6019      	str	r1, [r3, #0]
 8002348:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800234c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	fa93 f1a3 	rbit	r1, r3
 8002356:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800235a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800235e:	6019      	str	r1, [r3, #0]
  return result;
 8002360:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002364:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	fab3 f383 	clz	r3, r3
 800236e:	b2db      	uxtb	r3, r3
 8002370:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002374:	b2db      	uxtb	r3, r3
 8002376:	f003 031f 	and.w	r3, r3, #31
 800237a:	2101      	movs	r1, #1
 800237c:	fa01 f303 	lsl.w	r3, r1, r3
 8002380:	4013      	ands	r3, r2
 8002382:	2b00      	cmp	r3, #0
 8002384:	d0a0      	beq.n	80022c8 <HAL_RCC_OscConfig+0x6a0>
 8002386:	e08d      	b.n	80024a4 <HAL_RCC_OscConfig+0x87c>
 8002388:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800238c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002390:	2201      	movs	r2, #1
 8002392:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002394:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002398:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	fa93 f2a3 	rbit	r2, r3
 80023a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023a6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80023aa:	601a      	str	r2, [r3, #0]
  return result;
 80023ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023b0:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80023b4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023b6:	fab3 f383 	clz	r3, r3
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	461a      	mov	r2, r3
 80023be:	4b68      	ldr	r3, [pc, #416]	@ (8002560 <HAL_RCC_OscConfig+0x938>)
 80023c0:	4413      	add	r3, r2
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	461a      	mov	r2, r3
 80023c6:	2300      	movs	r3, #0
 80023c8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023ca:	f7fe fb17 	bl	80009fc <HAL_GetTick>
 80023ce:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023d2:	e00a      	b.n	80023ea <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023d4:	f7fe fb12 	bl	80009fc <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d902      	bls.n	80023ea <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80023e4:	2303      	movs	r3, #3
 80023e6:	f000 bc55 	b.w	8002c94 <HAL_RCC_OscConfig+0x106c>
 80023ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023ee:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80023f2:	2202      	movs	r2, #2
 80023f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023fa:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	fa93 f2a3 	rbit	r2, r3
 8002404:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002408:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800240c:	601a      	str	r2, [r3, #0]
 800240e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002412:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002416:	2202      	movs	r2, #2
 8002418:	601a      	str	r2, [r3, #0]
 800241a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800241e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	fa93 f2a3 	rbit	r2, r3
 8002428:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800242c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002430:	601a      	str	r2, [r3, #0]
 8002432:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002436:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800243a:	2202      	movs	r2, #2
 800243c:	601a      	str	r2, [r3, #0]
 800243e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002442:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	fa93 f2a3 	rbit	r2, r3
 800244c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002450:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002454:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002456:	4b41      	ldr	r3, [pc, #260]	@ (800255c <HAL_RCC_OscConfig+0x934>)
 8002458:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800245a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800245e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002462:	2102      	movs	r1, #2
 8002464:	6019      	str	r1, [r3, #0]
 8002466:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800246a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	fa93 f1a3 	rbit	r1, r3
 8002474:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002478:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800247c:	6019      	str	r1, [r3, #0]
  return result;
 800247e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002482:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	fab3 f383 	clz	r3, r3
 800248c:	b2db      	uxtb	r3, r3
 800248e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002492:	b2db      	uxtb	r3, r3
 8002494:	f003 031f 	and.w	r3, r3, #31
 8002498:	2101      	movs	r1, #1
 800249a:	fa01 f303 	lsl.w	r3, r1, r3
 800249e:	4013      	ands	r3, r2
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d197      	bne.n	80023d4 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024a8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 0304 	and.w	r3, r3, #4
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	f000 81a1 	beq.w	80027fc <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024ba:	2300      	movs	r3, #0
 80024bc:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024c0:	4b26      	ldr	r3, [pc, #152]	@ (800255c <HAL_RCC_OscConfig+0x934>)
 80024c2:	69db      	ldr	r3, [r3, #28]
 80024c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d116      	bne.n	80024fa <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024cc:	4b23      	ldr	r3, [pc, #140]	@ (800255c <HAL_RCC_OscConfig+0x934>)
 80024ce:	69db      	ldr	r3, [r3, #28]
 80024d0:	4a22      	ldr	r2, [pc, #136]	@ (800255c <HAL_RCC_OscConfig+0x934>)
 80024d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024d6:	61d3      	str	r3, [r2, #28]
 80024d8:	4b20      	ldr	r3, [pc, #128]	@ (800255c <HAL_RCC_OscConfig+0x934>)
 80024da:	69db      	ldr	r3, [r3, #28]
 80024dc:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80024e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024e4:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80024e8:	601a      	str	r2, [r3, #0]
 80024ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024ee:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80024f2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80024f4:	2301      	movs	r3, #1
 80024f6:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024fa:	4b1a      	ldr	r3, [pc, #104]	@ (8002564 <HAL_RCC_OscConfig+0x93c>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002502:	2b00      	cmp	r3, #0
 8002504:	d11a      	bne.n	800253c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002506:	4b17      	ldr	r3, [pc, #92]	@ (8002564 <HAL_RCC_OscConfig+0x93c>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a16      	ldr	r2, [pc, #88]	@ (8002564 <HAL_RCC_OscConfig+0x93c>)
 800250c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002510:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002512:	f7fe fa73 	bl	80009fc <HAL_GetTick>
 8002516:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800251a:	e009      	b.n	8002530 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800251c:	f7fe fa6e 	bl	80009fc <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002526:	1ad3      	subs	r3, r2, r3
 8002528:	2b64      	cmp	r3, #100	@ 0x64
 800252a:	d901      	bls.n	8002530 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800252c:	2303      	movs	r3, #3
 800252e:	e3b1      	b.n	8002c94 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002530:	4b0c      	ldr	r3, [pc, #48]	@ (8002564 <HAL_RCC_OscConfig+0x93c>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002538:	2b00      	cmp	r3, #0
 800253a:	d0ef      	beq.n	800251c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800253c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002540:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	2b01      	cmp	r3, #1
 800254a:	d10d      	bne.n	8002568 <HAL_RCC_OscConfig+0x940>
 800254c:	4b03      	ldr	r3, [pc, #12]	@ (800255c <HAL_RCC_OscConfig+0x934>)
 800254e:	6a1b      	ldr	r3, [r3, #32]
 8002550:	4a02      	ldr	r2, [pc, #8]	@ (800255c <HAL_RCC_OscConfig+0x934>)
 8002552:	f043 0301 	orr.w	r3, r3, #1
 8002556:	6213      	str	r3, [r2, #32]
 8002558:	e03c      	b.n	80025d4 <HAL_RCC_OscConfig+0x9ac>
 800255a:	bf00      	nop
 800255c:	40021000 	.word	0x40021000
 8002560:	10908120 	.word	0x10908120
 8002564:	40007000 	.word	0x40007000
 8002568:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800256c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d10c      	bne.n	8002592 <HAL_RCC_OscConfig+0x96a>
 8002578:	4bc1      	ldr	r3, [pc, #772]	@ (8002880 <HAL_RCC_OscConfig+0xc58>)
 800257a:	6a1b      	ldr	r3, [r3, #32]
 800257c:	4ac0      	ldr	r2, [pc, #768]	@ (8002880 <HAL_RCC_OscConfig+0xc58>)
 800257e:	f023 0301 	bic.w	r3, r3, #1
 8002582:	6213      	str	r3, [r2, #32]
 8002584:	4bbe      	ldr	r3, [pc, #760]	@ (8002880 <HAL_RCC_OscConfig+0xc58>)
 8002586:	6a1b      	ldr	r3, [r3, #32]
 8002588:	4abd      	ldr	r2, [pc, #756]	@ (8002880 <HAL_RCC_OscConfig+0xc58>)
 800258a:	f023 0304 	bic.w	r3, r3, #4
 800258e:	6213      	str	r3, [r2, #32]
 8002590:	e020      	b.n	80025d4 <HAL_RCC_OscConfig+0x9ac>
 8002592:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002596:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	68db      	ldr	r3, [r3, #12]
 800259e:	2b05      	cmp	r3, #5
 80025a0:	d10c      	bne.n	80025bc <HAL_RCC_OscConfig+0x994>
 80025a2:	4bb7      	ldr	r3, [pc, #732]	@ (8002880 <HAL_RCC_OscConfig+0xc58>)
 80025a4:	6a1b      	ldr	r3, [r3, #32]
 80025a6:	4ab6      	ldr	r2, [pc, #728]	@ (8002880 <HAL_RCC_OscConfig+0xc58>)
 80025a8:	f043 0304 	orr.w	r3, r3, #4
 80025ac:	6213      	str	r3, [r2, #32]
 80025ae:	4bb4      	ldr	r3, [pc, #720]	@ (8002880 <HAL_RCC_OscConfig+0xc58>)
 80025b0:	6a1b      	ldr	r3, [r3, #32]
 80025b2:	4ab3      	ldr	r2, [pc, #716]	@ (8002880 <HAL_RCC_OscConfig+0xc58>)
 80025b4:	f043 0301 	orr.w	r3, r3, #1
 80025b8:	6213      	str	r3, [r2, #32]
 80025ba:	e00b      	b.n	80025d4 <HAL_RCC_OscConfig+0x9ac>
 80025bc:	4bb0      	ldr	r3, [pc, #704]	@ (8002880 <HAL_RCC_OscConfig+0xc58>)
 80025be:	6a1b      	ldr	r3, [r3, #32]
 80025c0:	4aaf      	ldr	r2, [pc, #700]	@ (8002880 <HAL_RCC_OscConfig+0xc58>)
 80025c2:	f023 0301 	bic.w	r3, r3, #1
 80025c6:	6213      	str	r3, [r2, #32]
 80025c8:	4bad      	ldr	r3, [pc, #692]	@ (8002880 <HAL_RCC_OscConfig+0xc58>)
 80025ca:	6a1b      	ldr	r3, [r3, #32]
 80025cc:	4aac      	ldr	r2, [pc, #688]	@ (8002880 <HAL_RCC_OscConfig+0xc58>)
 80025ce:	f023 0304 	bic.w	r3, r3, #4
 80025d2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025d8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	f000 8081 	beq.w	80026e8 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025e6:	f7fe fa09 	bl	80009fc <HAL_GetTick>
 80025ea:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025ee:	e00b      	b.n	8002608 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025f0:	f7fe fa04 	bl	80009fc <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80025fa:	1ad3      	subs	r3, r2, r3
 80025fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002600:	4293      	cmp	r3, r2
 8002602:	d901      	bls.n	8002608 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002604:	2303      	movs	r3, #3
 8002606:	e345      	b.n	8002c94 <HAL_RCC_OscConfig+0x106c>
 8002608:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800260c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002610:	2202      	movs	r2, #2
 8002612:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002614:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002618:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	fa93 f2a3 	rbit	r2, r3
 8002622:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002626:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800262a:	601a      	str	r2, [r3, #0]
 800262c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002630:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002634:	2202      	movs	r2, #2
 8002636:	601a      	str	r2, [r3, #0]
 8002638:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800263c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	fa93 f2a3 	rbit	r2, r3
 8002646:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800264a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800264e:	601a      	str	r2, [r3, #0]
  return result;
 8002650:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002654:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002658:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800265a:	fab3 f383 	clz	r3, r3
 800265e:	b2db      	uxtb	r3, r3
 8002660:	095b      	lsrs	r3, r3, #5
 8002662:	b2db      	uxtb	r3, r3
 8002664:	f043 0302 	orr.w	r3, r3, #2
 8002668:	b2db      	uxtb	r3, r3
 800266a:	2b02      	cmp	r3, #2
 800266c:	d102      	bne.n	8002674 <HAL_RCC_OscConfig+0xa4c>
 800266e:	4b84      	ldr	r3, [pc, #528]	@ (8002880 <HAL_RCC_OscConfig+0xc58>)
 8002670:	6a1b      	ldr	r3, [r3, #32]
 8002672:	e013      	b.n	800269c <HAL_RCC_OscConfig+0xa74>
 8002674:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002678:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800267c:	2202      	movs	r2, #2
 800267e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002680:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002684:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	fa93 f2a3 	rbit	r2, r3
 800268e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002692:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002696:	601a      	str	r2, [r3, #0]
 8002698:	4b79      	ldr	r3, [pc, #484]	@ (8002880 <HAL_RCC_OscConfig+0xc58>)
 800269a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800269c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80026a0:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80026a4:	2102      	movs	r1, #2
 80026a6:	6011      	str	r1, [r2, #0]
 80026a8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80026ac:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80026b0:	6812      	ldr	r2, [r2, #0]
 80026b2:	fa92 f1a2 	rbit	r1, r2
 80026b6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80026ba:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80026be:	6011      	str	r1, [r2, #0]
  return result;
 80026c0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80026c4:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80026c8:	6812      	ldr	r2, [r2, #0]
 80026ca:	fab2 f282 	clz	r2, r2
 80026ce:	b2d2      	uxtb	r2, r2
 80026d0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80026d4:	b2d2      	uxtb	r2, r2
 80026d6:	f002 021f 	and.w	r2, r2, #31
 80026da:	2101      	movs	r1, #1
 80026dc:	fa01 f202 	lsl.w	r2, r1, r2
 80026e0:	4013      	ands	r3, r2
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d084      	beq.n	80025f0 <HAL_RCC_OscConfig+0x9c8>
 80026e6:	e07f      	b.n	80027e8 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026e8:	f7fe f988 	bl	80009fc <HAL_GetTick>
 80026ec:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026f0:	e00b      	b.n	800270a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026f2:	f7fe f983 	bl	80009fc <HAL_GetTick>
 80026f6:	4602      	mov	r2, r0
 80026f8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002702:	4293      	cmp	r3, r2
 8002704:	d901      	bls.n	800270a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002706:	2303      	movs	r3, #3
 8002708:	e2c4      	b.n	8002c94 <HAL_RCC_OscConfig+0x106c>
 800270a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800270e:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002712:	2202      	movs	r2, #2
 8002714:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002716:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800271a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	fa93 f2a3 	rbit	r2, r3
 8002724:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002728:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800272c:	601a      	str	r2, [r3, #0]
 800272e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002732:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002736:	2202      	movs	r2, #2
 8002738:	601a      	str	r2, [r3, #0]
 800273a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800273e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	fa93 f2a3 	rbit	r2, r3
 8002748:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800274c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002750:	601a      	str	r2, [r3, #0]
  return result;
 8002752:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002756:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800275a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800275c:	fab3 f383 	clz	r3, r3
 8002760:	b2db      	uxtb	r3, r3
 8002762:	095b      	lsrs	r3, r3, #5
 8002764:	b2db      	uxtb	r3, r3
 8002766:	f043 0302 	orr.w	r3, r3, #2
 800276a:	b2db      	uxtb	r3, r3
 800276c:	2b02      	cmp	r3, #2
 800276e:	d102      	bne.n	8002776 <HAL_RCC_OscConfig+0xb4e>
 8002770:	4b43      	ldr	r3, [pc, #268]	@ (8002880 <HAL_RCC_OscConfig+0xc58>)
 8002772:	6a1b      	ldr	r3, [r3, #32]
 8002774:	e013      	b.n	800279e <HAL_RCC_OscConfig+0xb76>
 8002776:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800277a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800277e:	2202      	movs	r2, #2
 8002780:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002782:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002786:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	fa93 f2a3 	rbit	r2, r3
 8002790:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002794:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002798:	601a      	str	r2, [r3, #0]
 800279a:	4b39      	ldr	r3, [pc, #228]	@ (8002880 <HAL_RCC_OscConfig+0xc58>)
 800279c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800279e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80027a2:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80027a6:	2102      	movs	r1, #2
 80027a8:	6011      	str	r1, [r2, #0]
 80027aa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80027ae:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80027b2:	6812      	ldr	r2, [r2, #0]
 80027b4:	fa92 f1a2 	rbit	r1, r2
 80027b8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80027bc:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80027c0:	6011      	str	r1, [r2, #0]
  return result;
 80027c2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80027c6:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80027ca:	6812      	ldr	r2, [r2, #0]
 80027cc:	fab2 f282 	clz	r2, r2
 80027d0:	b2d2      	uxtb	r2, r2
 80027d2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80027d6:	b2d2      	uxtb	r2, r2
 80027d8:	f002 021f 	and.w	r2, r2, #31
 80027dc:	2101      	movs	r1, #1
 80027de:	fa01 f202 	lsl.w	r2, r1, r2
 80027e2:	4013      	ands	r3, r2
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d184      	bne.n	80026f2 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80027e8:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d105      	bne.n	80027fc <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027f0:	4b23      	ldr	r3, [pc, #140]	@ (8002880 <HAL_RCC_OscConfig+0xc58>)
 80027f2:	69db      	ldr	r3, [r3, #28]
 80027f4:	4a22      	ldr	r2, [pc, #136]	@ (8002880 <HAL_RCC_OscConfig+0xc58>)
 80027f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027fa:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002800:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	69db      	ldr	r3, [r3, #28]
 8002808:	2b00      	cmp	r3, #0
 800280a:	f000 8242 	beq.w	8002c92 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800280e:	4b1c      	ldr	r3, [pc, #112]	@ (8002880 <HAL_RCC_OscConfig+0xc58>)
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f003 030c 	and.w	r3, r3, #12
 8002816:	2b08      	cmp	r3, #8
 8002818:	f000 8213 	beq.w	8002c42 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800281c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002820:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	69db      	ldr	r3, [r3, #28]
 8002828:	2b02      	cmp	r3, #2
 800282a:	f040 8162 	bne.w	8002af2 <HAL_RCC_OscConfig+0xeca>
 800282e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002832:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002836:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800283a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800283c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002840:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	fa93 f2a3 	rbit	r2, r3
 800284a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800284e:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002852:	601a      	str	r2, [r3, #0]
  return result;
 8002854:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002858:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800285c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800285e:	fab3 f383 	clz	r3, r3
 8002862:	b2db      	uxtb	r3, r3
 8002864:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002868:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	461a      	mov	r2, r3
 8002870:	2300      	movs	r3, #0
 8002872:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002874:	f7fe f8c2 	bl	80009fc <HAL_GetTick>
 8002878:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800287c:	e00c      	b.n	8002898 <HAL_RCC_OscConfig+0xc70>
 800287e:	bf00      	nop
 8002880:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002884:	f7fe f8ba 	bl	80009fc <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	2b02      	cmp	r3, #2
 8002892:	d901      	bls.n	8002898 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002894:	2303      	movs	r3, #3
 8002896:	e1fd      	b.n	8002c94 <HAL_RCC_OscConfig+0x106c>
 8002898:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800289c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80028a0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80028a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028aa:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	fa93 f2a3 	rbit	r2, r3
 80028b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028b8:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80028bc:	601a      	str	r2, [r3, #0]
  return result;
 80028be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028c2:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80028c6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028c8:	fab3 f383 	clz	r3, r3
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	095b      	lsrs	r3, r3, #5
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	f043 0301 	orr.w	r3, r3, #1
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d102      	bne.n	80028e2 <HAL_RCC_OscConfig+0xcba>
 80028dc:	4bb0      	ldr	r3, [pc, #704]	@ (8002ba0 <HAL_RCC_OscConfig+0xf78>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	e027      	b.n	8002932 <HAL_RCC_OscConfig+0xd0a>
 80028e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028e6:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80028ea:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80028ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028f4:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	fa93 f2a3 	rbit	r2, r3
 80028fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002902:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002906:	601a      	str	r2, [r3, #0]
 8002908:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800290c:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002910:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002914:	601a      	str	r2, [r3, #0]
 8002916:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800291a:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	fa93 f2a3 	rbit	r2, r3
 8002924:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002928:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800292c:	601a      	str	r2, [r3, #0]
 800292e:	4b9c      	ldr	r3, [pc, #624]	@ (8002ba0 <HAL_RCC_OscConfig+0xf78>)
 8002930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002932:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002936:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800293a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800293e:	6011      	str	r1, [r2, #0]
 8002940:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002944:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002948:	6812      	ldr	r2, [r2, #0]
 800294a:	fa92 f1a2 	rbit	r1, r2
 800294e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002952:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002956:	6011      	str	r1, [r2, #0]
  return result;
 8002958:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800295c:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002960:	6812      	ldr	r2, [r2, #0]
 8002962:	fab2 f282 	clz	r2, r2
 8002966:	b2d2      	uxtb	r2, r2
 8002968:	f042 0220 	orr.w	r2, r2, #32
 800296c:	b2d2      	uxtb	r2, r2
 800296e:	f002 021f 	and.w	r2, r2, #31
 8002972:	2101      	movs	r1, #1
 8002974:	fa01 f202 	lsl.w	r2, r1, r2
 8002978:	4013      	ands	r3, r2
 800297a:	2b00      	cmp	r3, #0
 800297c:	d182      	bne.n	8002884 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800297e:	4b88      	ldr	r3, [pc, #544]	@ (8002ba0 <HAL_RCC_OscConfig+0xf78>)
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002986:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800298a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002992:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002996:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	6a1b      	ldr	r3, [r3, #32]
 800299e:	430b      	orrs	r3, r1
 80029a0:	497f      	ldr	r1, [pc, #508]	@ (8002ba0 <HAL_RCC_OscConfig+0xf78>)
 80029a2:	4313      	orrs	r3, r2
 80029a4:	604b      	str	r3, [r1, #4]
 80029a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029aa:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80029ae:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80029b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029b8:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	fa93 f2a3 	rbit	r2, r3
 80029c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029c6:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80029ca:	601a      	str	r2, [r3, #0]
  return result;
 80029cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029d0:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80029d4:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029d6:	fab3 f383 	clz	r3, r3
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80029e0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	461a      	mov	r2, r3
 80029e8:	2301      	movs	r3, #1
 80029ea:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ec:	f7fe f806 	bl	80009fc <HAL_GetTick>
 80029f0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029f4:	e009      	b.n	8002a0a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029f6:	f7fe f801 	bl	80009fc <HAL_GetTick>
 80029fa:	4602      	mov	r2, r0
 80029fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	d901      	bls.n	8002a0a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	e144      	b.n	8002c94 <HAL_RCC_OscConfig+0x106c>
 8002a0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a0e:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002a12:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a16:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a1c:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	fa93 f2a3 	rbit	r2, r3
 8002a26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a2a:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002a2e:	601a      	str	r2, [r3, #0]
  return result;
 8002a30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a34:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002a38:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a3a:	fab3 f383 	clz	r3, r3
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	095b      	lsrs	r3, r3, #5
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	f043 0301 	orr.w	r3, r3, #1
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d102      	bne.n	8002a54 <HAL_RCC_OscConfig+0xe2c>
 8002a4e:	4b54      	ldr	r3, [pc, #336]	@ (8002ba0 <HAL_RCC_OscConfig+0xf78>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	e027      	b.n	8002aa4 <HAL_RCC_OscConfig+0xe7c>
 8002a54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a58:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002a5c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a60:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a66:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	fa93 f2a3 	rbit	r2, r3
 8002a70:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a74:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002a78:	601a      	str	r2, [r3, #0]
 8002a7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a7e:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002a82:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a86:	601a      	str	r2, [r3, #0]
 8002a88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a8c:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	fa93 f2a3 	rbit	r2, r3
 8002a96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a9a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002a9e:	601a      	str	r2, [r3, #0]
 8002aa0:	4b3f      	ldr	r3, [pc, #252]	@ (8002ba0 <HAL_RCC_OscConfig+0xf78>)
 8002aa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aa4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002aa8:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002aac:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002ab0:	6011      	str	r1, [r2, #0]
 8002ab2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002ab6:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002aba:	6812      	ldr	r2, [r2, #0]
 8002abc:	fa92 f1a2 	rbit	r1, r2
 8002ac0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002ac4:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002ac8:	6011      	str	r1, [r2, #0]
  return result;
 8002aca:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002ace:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002ad2:	6812      	ldr	r2, [r2, #0]
 8002ad4:	fab2 f282 	clz	r2, r2
 8002ad8:	b2d2      	uxtb	r2, r2
 8002ada:	f042 0220 	orr.w	r2, r2, #32
 8002ade:	b2d2      	uxtb	r2, r2
 8002ae0:	f002 021f 	and.w	r2, r2, #31
 8002ae4:	2101      	movs	r1, #1
 8002ae6:	fa01 f202 	lsl.w	r2, r1, r2
 8002aea:	4013      	ands	r3, r2
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d082      	beq.n	80029f6 <HAL_RCC_OscConfig+0xdce>
 8002af0:	e0cf      	b.n	8002c92 <HAL_RCC_OscConfig+0x106a>
 8002af2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002af6:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002afa:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002afe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b04:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	fa93 f2a3 	rbit	r2, r3
 8002b0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b12:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002b16:	601a      	str	r2, [r3, #0]
  return result;
 8002b18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b1c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002b20:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b22:	fab3 f383 	clz	r3, r3
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002b2c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	461a      	mov	r2, r3
 8002b34:	2300      	movs	r3, #0
 8002b36:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b38:	f7fd ff60 	bl	80009fc <HAL_GetTick>
 8002b3c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b40:	e009      	b.n	8002b56 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b42:	f7fd ff5b 	bl	80009fc <HAL_GetTick>
 8002b46:	4602      	mov	r2, r0
 8002b48:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	d901      	bls.n	8002b56 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	e09e      	b.n	8002c94 <HAL_RCC_OscConfig+0x106c>
 8002b56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b5a:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002b5e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002b62:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b64:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b68:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	fa93 f2a3 	rbit	r2, r3
 8002b72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b76:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002b7a:	601a      	str	r2, [r3, #0]
  return result;
 8002b7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b80:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002b84:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b86:	fab3 f383 	clz	r3, r3
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	095b      	lsrs	r3, r3, #5
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	f043 0301 	orr.w	r3, r3, #1
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d104      	bne.n	8002ba4 <HAL_RCC_OscConfig+0xf7c>
 8002b9a:	4b01      	ldr	r3, [pc, #4]	@ (8002ba0 <HAL_RCC_OscConfig+0xf78>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	e029      	b.n	8002bf4 <HAL_RCC_OscConfig+0xfcc>
 8002ba0:	40021000 	.word	0x40021000
 8002ba4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ba8:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002bac:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002bb0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bb6:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	fa93 f2a3 	rbit	r2, r3
 8002bc0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bc4:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002bc8:	601a      	str	r2, [r3, #0]
 8002bca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bce:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002bd2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002bd6:	601a      	str	r2, [r3, #0]
 8002bd8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bdc:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	fa93 f2a3 	rbit	r2, r3
 8002be6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bea:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002bee:	601a      	str	r2, [r3, #0]
 8002bf0:	4b2b      	ldr	r3, [pc, #172]	@ (8002ca0 <HAL_RCC_OscConfig+0x1078>)
 8002bf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bf4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002bf8:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002bfc:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002c00:	6011      	str	r1, [r2, #0]
 8002c02:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c06:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002c0a:	6812      	ldr	r2, [r2, #0]
 8002c0c:	fa92 f1a2 	rbit	r1, r2
 8002c10:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c14:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002c18:	6011      	str	r1, [r2, #0]
  return result;
 8002c1a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c1e:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002c22:	6812      	ldr	r2, [r2, #0]
 8002c24:	fab2 f282 	clz	r2, r2
 8002c28:	b2d2      	uxtb	r2, r2
 8002c2a:	f042 0220 	orr.w	r2, r2, #32
 8002c2e:	b2d2      	uxtb	r2, r2
 8002c30:	f002 021f 	and.w	r2, r2, #31
 8002c34:	2101      	movs	r1, #1
 8002c36:	fa01 f202 	lsl.w	r2, r1, r2
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d180      	bne.n	8002b42 <HAL_RCC_OscConfig+0xf1a>
 8002c40:	e027      	b.n	8002c92 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c46:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	69db      	ldr	r3, [r3, #28]
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d101      	bne.n	8002c56 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e01e      	b.n	8002c94 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002c56:	4b12      	ldr	r3, [pc, #72]	@ (8002ca0 <HAL_RCC_OscConfig+0x1078>)
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002c5e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002c62:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002c66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c6a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	6a1b      	ldr	r3, [r3, #32]
 8002c72:	429a      	cmp	r2, r3
 8002c74:	d10b      	bne.n	8002c8e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002c76:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002c7a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002c7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c82:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d001      	beq.n	8002c92 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e000      	b.n	8002c94 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002c92:	2300      	movs	r3, #0
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	40021000 	.word	0x40021000

08002ca4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b09e      	sub	sp, #120	@ 0x78
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d101      	bne.n	8002cbc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e162      	b.n	8002f82 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002cbc:	4b90      	ldr	r3, [pc, #576]	@ (8002f00 <HAL_RCC_ClockConfig+0x25c>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0307 	and.w	r3, r3, #7
 8002cc4:	683a      	ldr	r2, [r7, #0]
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d910      	bls.n	8002cec <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cca:	4b8d      	ldr	r3, [pc, #564]	@ (8002f00 <HAL_RCC_ClockConfig+0x25c>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f023 0207 	bic.w	r2, r3, #7
 8002cd2:	498b      	ldr	r1, [pc, #556]	@ (8002f00 <HAL_RCC_ClockConfig+0x25c>)
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cda:	4b89      	ldr	r3, [pc, #548]	@ (8002f00 <HAL_RCC_ClockConfig+0x25c>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0307 	and.w	r3, r3, #7
 8002ce2:	683a      	ldr	r2, [r7, #0]
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d001      	beq.n	8002cec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e14a      	b.n	8002f82 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0302 	and.w	r3, r3, #2
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d008      	beq.n	8002d0a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cf8:	4b82      	ldr	r3, [pc, #520]	@ (8002f04 <HAL_RCC_ClockConfig+0x260>)
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	497f      	ldr	r1, [pc, #508]	@ (8002f04 <HAL_RCC_ClockConfig+0x260>)
 8002d06:	4313      	orrs	r3, r2
 8002d08:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0301 	and.w	r3, r3, #1
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	f000 80dc 	beq.w	8002ed0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d13c      	bne.n	8002d9a <HAL_RCC_ClockConfig+0xf6>
 8002d20:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002d24:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d26:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002d28:	fa93 f3a3 	rbit	r3, r3
 8002d2c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002d2e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d30:	fab3 f383 	clz	r3, r3
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	095b      	lsrs	r3, r3, #5
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	f043 0301 	orr.w	r3, r3, #1
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d102      	bne.n	8002d4a <HAL_RCC_ClockConfig+0xa6>
 8002d44:	4b6f      	ldr	r3, [pc, #444]	@ (8002f04 <HAL_RCC_ClockConfig+0x260>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	e00f      	b.n	8002d6a <HAL_RCC_ClockConfig+0xc6>
 8002d4a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002d4e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d50:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002d52:	fa93 f3a3 	rbit	r3, r3
 8002d56:	667b      	str	r3, [r7, #100]	@ 0x64
 8002d58:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002d5c:	663b      	str	r3, [r7, #96]	@ 0x60
 8002d5e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002d60:	fa93 f3a3 	rbit	r3, r3
 8002d64:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002d66:	4b67      	ldr	r3, [pc, #412]	@ (8002f04 <HAL_RCC_ClockConfig+0x260>)
 8002d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d6a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002d6e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002d70:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002d72:	fa92 f2a2 	rbit	r2, r2
 8002d76:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002d78:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002d7a:	fab2 f282 	clz	r2, r2
 8002d7e:	b2d2      	uxtb	r2, r2
 8002d80:	f042 0220 	orr.w	r2, r2, #32
 8002d84:	b2d2      	uxtb	r2, r2
 8002d86:	f002 021f 	and.w	r2, r2, #31
 8002d8a:	2101      	movs	r1, #1
 8002d8c:	fa01 f202 	lsl.w	r2, r1, r2
 8002d90:	4013      	ands	r3, r2
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d17b      	bne.n	8002e8e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e0f3      	b.n	8002f82 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d13c      	bne.n	8002e1c <HAL_RCC_ClockConfig+0x178>
 8002da2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002da6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002daa:	fa93 f3a3 	rbit	r3, r3
 8002dae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002db0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002db2:	fab3 f383 	clz	r3, r3
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	095b      	lsrs	r3, r3, #5
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	f043 0301 	orr.w	r3, r3, #1
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d102      	bne.n	8002dcc <HAL_RCC_ClockConfig+0x128>
 8002dc6:	4b4f      	ldr	r3, [pc, #316]	@ (8002f04 <HAL_RCC_ClockConfig+0x260>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	e00f      	b.n	8002dec <HAL_RCC_ClockConfig+0x148>
 8002dcc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002dd0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002dd4:	fa93 f3a3 	rbit	r3, r3
 8002dd8:	647b      	str	r3, [r7, #68]	@ 0x44
 8002dda:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002dde:	643b      	str	r3, [r7, #64]	@ 0x40
 8002de0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002de2:	fa93 f3a3 	rbit	r3, r3
 8002de6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002de8:	4b46      	ldr	r3, [pc, #280]	@ (8002f04 <HAL_RCC_ClockConfig+0x260>)
 8002dea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dec:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002df0:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002df2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002df4:	fa92 f2a2 	rbit	r2, r2
 8002df8:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002dfa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002dfc:	fab2 f282 	clz	r2, r2
 8002e00:	b2d2      	uxtb	r2, r2
 8002e02:	f042 0220 	orr.w	r2, r2, #32
 8002e06:	b2d2      	uxtb	r2, r2
 8002e08:	f002 021f 	and.w	r2, r2, #31
 8002e0c:	2101      	movs	r1, #1
 8002e0e:	fa01 f202 	lsl.w	r2, r1, r2
 8002e12:	4013      	ands	r3, r2
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d13a      	bne.n	8002e8e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e0b2      	b.n	8002f82 <HAL_RCC_ClockConfig+0x2de>
 8002e1c:	2302      	movs	r3, #2
 8002e1e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e22:	fa93 f3a3 	rbit	r3, r3
 8002e26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002e28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e2a:	fab3 f383 	clz	r3, r3
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	095b      	lsrs	r3, r3, #5
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	f043 0301 	orr.w	r3, r3, #1
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d102      	bne.n	8002e44 <HAL_RCC_ClockConfig+0x1a0>
 8002e3e:	4b31      	ldr	r3, [pc, #196]	@ (8002f04 <HAL_RCC_ClockConfig+0x260>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	e00d      	b.n	8002e60 <HAL_RCC_ClockConfig+0x1bc>
 8002e44:	2302      	movs	r3, #2
 8002e46:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e4a:	fa93 f3a3 	rbit	r3, r3
 8002e4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e50:	2302      	movs	r3, #2
 8002e52:	623b      	str	r3, [r7, #32]
 8002e54:	6a3b      	ldr	r3, [r7, #32]
 8002e56:	fa93 f3a3 	rbit	r3, r3
 8002e5a:	61fb      	str	r3, [r7, #28]
 8002e5c:	4b29      	ldr	r3, [pc, #164]	@ (8002f04 <HAL_RCC_ClockConfig+0x260>)
 8002e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e60:	2202      	movs	r2, #2
 8002e62:	61ba      	str	r2, [r7, #24]
 8002e64:	69ba      	ldr	r2, [r7, #24]
 8002e66:	fa92 f2a2 	rbit	r2, r2
 8002e6a:	617a      	str	r2, [r7, #20]
  return result;
 8002e6c:	697a      	ldr	r2, [r7, #20]
 8002e6e:	fab2 f282 	clz	r2, r2
 8002e72:	b2d2      	uxtb	r2, r2
 8002e74:	f042 0220 	orr.w	r2, r2, #32
 8002e78:	b2d2      	uxtb	r2, r2
 8002e7a:	f002 021f 	and.w	r2, r2, #31
 8002e7e:	2101      	movs	r1, #1
 8002e80:	fa01 f202 	lsl.w	r2, r1, r2
 8002e84:	4013      	ands	r3, r2
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d101      	bne.n	8002e8e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e079      	b.n	8002f82 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e8e:	4b1d      	ldr	r3, [pc, #116]	@ (8002f04 <HAL_RCC_ClockConfig+0x260>)
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	f023 0203 	bic.w	r2, r3, #3
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	491a      	ldr	r1, [pc, #104]	@ (8002f04 <HAL_RCC_ClockConfig+0x260>)
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ea0:	f7fd fdac 	bl	80009fc <HAL_GetTick>
 8002ea4:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ea6:	e00a      	b.n	8002ebe <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ea8:	f7fd fda8 	bl	80009fc <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d901      	bls.n	8002ebe <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e061      	b.n	8002f82 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ebe:	4b11      	ldr	r3, [pc, #68]	@ (8002f04 <HAL_RCC_ClockConfig+0x260>)
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	f003 020c 	and.w	r2, r3, #12
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d1eb      	bne.n	8002ea8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ed0:	4b0b      	ldr	r3, [pc, #44]	@ (8002f00 <HAL_RCC_ClockConfig+0x25c>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 0307 	and.w	r3, r3, #7
 8002ed8:	683a      	ldr	r2, [r7, #0]
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d214      	bcs.n	8002f08 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ede:	4b08      	ldr	r3, [pc, #32]	@ (8002f00 <HAL_RCC_ClockConfig+0x25c>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f023 0207 	bic.w	r2, r3, #7
 8002ee6:	4906      	ldr	r1, [pc, #24]	@ (8002f00 <HAL_RCC_ClockConfig+0x25c>)
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	4313      	orrs	r3, r2
 8002eec:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eee:	4b04      	ldr	r3, [pc, #16]	@ (8002f00 <HAL_RCC_ClockConfig+0x25c>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0307 	and.w	r3, r3, #7
 8002ef6:	683a      	ldr	r2, [r7, #0]
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d005      	beq.n	8002f08 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e040      	b.n	8002f82 <HAL_RCC_ClockConfig+0x2de>
 8002f00:	40022000 	.word	0x40022000
 8002f04:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0304 	and.w	r3, r3, #4
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d008      	beq.n	8002f26 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f14:	4b1d      	ldr	r3, [pc, #116]	@ (8002f8c <HAL_RCC_ClockConfig+0x2e8>)
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	491a      	ldr	r1, [pc, #104]	@ (8002f8c <HAL_RCC_ClockConfig+0x2e8>)
 8002f22:	4313      	orrs	r3, r2
 8002f24:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 0308 	and.w	r3, r3, #8
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d009      	beq.n	8002f46 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f32:	4b16      	ldr	r3, [pc, #88]	@ (8002f8c <HAL_RCC_ClockConfig+0x2e8>)
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	691b      	ldr	r3, [r3, #16]
 8002f3e:	00db      	lsls	r3, r3, #3
 8002f40:	4912      	ldr	r1, [pc, #72]	@ (8002f8c <HAL_RCC_ClockConfig+0x2e8>)
 8002f42:	4313      	orrs	r3, r2
 8002f44:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002f46:	f000 f829 	bl	8002f9c <HAL_RCC_GetSysClockFreq>
 8002f4a:	4601      	mov	r1, r0
 8002f4c:	4b0f      	ldr	r3, [pc, #60]	@ (8002f8c <HAL_RCC_ClockConfig+0x2e8>)
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002f54:	22f0      	movs	r2, #240	@ 0xf0
 8002f56:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f58:	693a      	ldr	r2, [r7, #16]
 8002f5a:	fa92 f2a2 	rbit	r2, r2
 8002f5e:	60fa      	str	r2, [r7, #12]
  return result;
 8002f60:	68fa      	ldr	r2, [r7, #12]
 8002f62:	fab2 f282 	clz	r2, r2
 8002f66:	b2d2      	uxtb	r2, r2
 8002f68:	40d3      	lsrs	r3, r2
 8002f6a:	4a09      	ldr	r2, [pc, #36]	@ (8002f90 <HAL_RCC_ClockConfig+0x2ec>)
 8002f6c:	5cd3      	ldrb	r3, [r2, r3]
 8002f6e:	fa21 f303 	lsr.w	r3, r1, r3
 8002f72:	4a08      	ldr	r2, [pc, #32]	@ (8002f94 <HAL_RCC_ClockConfig+0x2f0>)
 8002f74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002f76:	4b08      	ldr	r3, [pc, #32]	@ (8002f98 <HAL_RCC_ClockConfig+0x2f4>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f7fd fcfa 	bl	8000974 <HAL_InitTick>
  
  return HAL_OK;
 8002f80:	2300      	movs	r3, #0
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3778      	adds	r7, #120	@ 0x78
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	40021000 	.word	0x40021000
 8002f90:	080040a0 	.word	0x080040a0
 8002f94:	20000000 	.word	0x20000000
 8002f98:	20000004 	.word	0x20000004

08002f9c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b087      	sub	sp, #28
 8002fa0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	60fb      	str	r3, [r7, #12]
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	60bb      	str	r3, [r7, #8]
 8002faa:	2300      	movs	r3, #0
 8002fac:	617b      	str	r3, [r7, #20]
 8002fae:	2300      	movs	r3, #0
 8002fb0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002fb6:	4b1e      	ldr	r3, [pc, #120]	@ (8003030 <HAL_RCC_GetSysClockFreq+0x94>)
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	f003 030c 	and.w	r3, r3, #12
 8002fc2:	2b04      	cmp	r3, #4
 8002fc4:	d002      	beq.n	8002fcc <HAL_RCC_GetSysClockFreq+0x30>
 8002fc6:	2b08      	cmp	r3, #8
 8002fc8:	d003      	beq.n	8002fd2 <HAL_RCC_GetSysClockFreq+0x36>
 8002fca:	e026      	b.n	800301a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002fcc:	4b19      	ldr	r3, [pc, #100]	@ (8003034 <HAL_RCC_GetSysClockFreq+0x98>)
 8002fce:	613b      	str	r3, [r7, #16]
      break;
 8002fd0:	e026      	b.n	8003020 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	0c9b      	lsrs	r3, r3, #18
 8002fd6:	f003 030f 	and.w	r3, r3, #15
 8002fda:	4a17      	ldr	r2, [pc, #92]	@ (8003038 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002fdc:	5cd3      	ldrb	r3, [r2, r3]
 8002fde:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002fe0:	4b13      	ldr	r3, [pc, #76]	@ (8003030 <HAL_RCC_GetSysClockFreq+0x94>)
 8002fe2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fe4:	f003 030f 	and.w	r3, r3, #15
 8002fe8:	4a14      	ldr	r2, [pc, #80]	@ (800303c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002fea:	5cd3      	ldrb	r3, [r2, r3]
 8002fec:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d008      	beq.n	800300a <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002ff8:	4a0e      	ldr	r2, [pc, #56]	@ (8003034 <HAL_RCC_GetSysClockFreq+0x98>)
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	fb02 f303 	mul.w	r3, r2, r3
 8003006:	617b      	str	r3, [r7, #20]
 8003008:	e004      	b.n	8003014 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4a0c      	ldr	r2, [pc, #48]	@ (8003040 <HAL_RCC_GetSysClockFreq+0xa4>)
 800300e:	fb02 f303 	mul.w	r3, r2, r3
 8003012:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	613b      	str	r3, [r7, #16]
      break;
 8003018:	e002      	b.n	8003020 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800301a:	4b06      	ldr	r3, [pc, #24]	@ (8003034 <HAL_RCC_GetSysClockFreq+0x98>)
 800301c:	613b      	str	r3, [r7, #16]
      break;
 800301e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003020:	693b      	ldr	r3, [r7, #16]
}
 8003022:	4618      	mov	r0, r3
 8003024:	371c      	adds	r7, #28
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr
 800302e:	bf00      	nop
 8003030:	40021000 	.word	0x40021000
 8003034:	007a1200 	.word	0x007a1200
 8003038:	080040b8 	.word	0x080040b8
 800303c:	080040c8 	.word	0x080040c8
 8003040:	003d0900 	.word	0x003d0900

08003044 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003044:	b480      	push	{r7}
 8003046:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003048:	4b03      	ldr	r3, [pc, #12]	@ (8003058 <HAL_RCC_GetHCLKFreq+0x14>)
 800304a:	681b      	ldr	r3, [r3, #0]
}
 800304c:	4618      	mov	r0, r3
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr
 8003056:	bf00      	nop
 8003058:	20000000 	.word	0x20000000

0800305c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b082      	sub	sp, #8
 8003060:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003062:	f7ff ffef 	bl	8003044 <HAL_RCC_GetHCLKFreq>
 8003066:	4601      	mov	r1, r0
 8003068:	4b0b      	ldr	r3, [pc, #44]	@ (8003098 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003070:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003074:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	fa92 f2a2 	rbit	r2, r2
 800307c:	603a      	str	r2, [r7, #0]
  return result;
 800307e:	683a      	ldr	r2, [r7, #0]
 8003080:	fab2 f282 	clz	r2, r2
 8003084:	b2d2      	uxtb	r2, r2
 8003086:	40d3      	lsrs	r3, r2
 8003088:	4a04      	ldr	r2, [pc, #16]	@ (800309c <HAL_RCC_GetPCLK1Freq+0x40>)
 800308a:	5cd3      	ldrb	r3, [r2, r3]
 800308c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003090:	4618      	mov	r0, r3
 8003092:	3708      	adds	r7, #8
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}
 8003098:	40021000 	.word	0x40021000
 800309c:	080040b0 	.word	0x080040b0

080030a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80030a6:	f7ff ffcd 	bl	8003044 <HAL_RCC_GetHCLKFreq>
 80030aa:	4601      	mov	r1, r0
 80030ac:	4b0b      	ldr	r3, [pc, #44]	@ (80030dc <HAL_RCC_GetPCLK2Freq+0x3c>)
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 80030b4:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 80030b8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	fa92 f2a2 	rbit	r2, r2
 80030c0:	603a      	str	r2, [r7, #0]
  return result;
 80030c2:	683a      	ldr	r2, [r7, #0]
 80030c4:	fab2 f282 	clz	r2, r2
 80030c8:	b2d2      	uxtb	r2, r2
 80030ca:	40d3      	lsrs	r3, r2
 80030cc:	4a04      	ldr	r2, [pc, #16]	@ (80030e0 <HAL_RCC_GetPCLK2Freq+0x40>)
 80030ce:	5cd3      	ldrb	r3, [r2, r3]
 80030d0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80030d4:	4618      	mov	r0, r3
 80030d6:	3708      	adds	r7, #8
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	40021000 	.word	0x40021000
 80030e0:	080040b0 	.word	0x080040b0

080030e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d101      	bne.n	80030f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e040      	b.n	8003178 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d106      	bne.n	800310c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2200      	movs	r2, #0
 8003102:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f7fd facc 	bl	80006a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2224      	movs	r2, #36	@ 0x24
 8003110:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f022 0201 	bic.w	r2, r2, #1
 8003120:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003126:	2b00      	cmp	r3, #0
 8003128:	d002      	beq.n	8003130 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f000 f95e 	bl	80033ec <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	f000 f825 	bl	8003180 <UART_SetConfig>
 8003136:	4603      	mov	r3, r0
 8003138:	2b01      	cmp	r3, #1
 800313a:	d101      	bne.n	8003140 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e01b      	b.n	8003178 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	685a      	ldr	r2, [r3, #4]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800314e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	689a      	ldr	r2, [r3, #8]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800315e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f042 0201 	orr.w	r2, r2, #1
 800316e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f000 f9dd 	bl	8003530 <UART_CheckIdleState>
 8003176:	4603      	mov	r3, r0
}
 8003178:	4618      	mov	r0, r3
 800317a:	3708      	adds	r7, #8
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}

08003180 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b088      	sub	sp, #32
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003188:	2300      	movs	r3, #0
 800318a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	689a      	ldr	r2, [r3, #8]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	691b      	ldr	r3, [r3, #16]
 8003194:	431a      	orrs	r2, r3
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	695b      	ldr	r3, [r3, #20]
 800319a:	431a      	orrs	r2, r3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	69db      	ldr	r3, [r3, #28]
 80031a0:	4313      	orrs	r3, r2
 80031a2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	4b8a      	ldr	r3, [pc, #552]	@ (80033d4 <UART_SetConfig+0x254>)
 80031ac:	4013      	ands	r3, r2
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	6812      	ldr	r2, [r2, #0]
 80031b2:	6979      	ldr	r1, [r7, #20]
 80031b4:	430b      	orrs	r3, r1
 80031b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	68da      	ldr	r2, [r3, #12]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	430a      	orrs	r2, r1
 80031cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	699b      	ldr	r3, [r3, #24]
 80031d2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6a1b      	ldr	r3, [r3, #32]
 80031d8:	697a      	ldr	r2, [r7, #20]
 80031da:	4313      	orrs	r3, r2
 80031dc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	697a      	ldr	r2, [r7, #20]
 80031ee:	430a      	orrs	r2, r1
 80031f0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a78      	ldr	r2, [pc, #480]	@ (80033d8 <UART_SetConfig+0x258>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d120      	bne.n	800323e <UART_SetConfig+0xbe>
 80031fc:	4b77      	ldr	r3, [pc, #476]	@ (80033dc <UART_SetConfig+0x25c>)
 80031fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003200:	f003 0303 	and.w	r3, r3, #3
 8003204:	2b03      	cmp	r3, #3
 8003206:	d817      	bhi.n	8003238 <UART_SetConfig+0xb8>
 8003208:	a201      	add	r2, pc, #4	@ (adr r2, 8003210 <UART_SetConfig+0x90>)
 800320a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800320e:	bf00      	nop
 8003210:	08003221 	.word	0x08003221
 8003214:	0800322d 	.word	0x0800322d
 8003218:	08003233 	.word	0x08003233
 800321c:	08003227 	.word	0x08003227
 8003220:	2300      	movs	r3, #0
 8003222:	77fb      	strb	r3, [r7, #31]
 8003224:	e01d      	b.n	8003262 <UART_SetConfig+0xe2>
 8003226:	2302      	movs	r3, #2
 8003228:	77fb      	strb	r3, [r7, #31]
 800322a:	e01a      	b.n	8003262 <UART_SetConfig+0xe2>
 800322c:	2304      	movs	r3, #4
 800322e:	77fb      	strb	r3, [r7, #31]
 8003230:	e017      	b.n	8003262 <UART_SetConfig+0xe2>
 8003232:	2308      	movs	r3, #8
 8003234:	77fb      	strb	r3, [r7, #31]
 8003236:	e014      	b.n	8003262 <UART_SetConfig+0xe2>
 8003238:	2310      	movs	r3, #16
 800323a:	77fb      	strb	r3, [r7, #31]
 800323c:	e011      	b.n	8003262 <UART_SetConfig+0xe2>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a67      	ldr	r2, [pc, #412]	@ (80033e0 <UART_SetConfig+0x260>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d102      	bne.n	800324e <UART_SetConfig+0xce>
 8003248:	2300      	movs	r3, #0
 800324a:	77fb      	strb	r3, [r7, #31]
 800324c:	e009      	b.n	8003262 <UART_SetConfig+0xe2>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a64      	ldr	r2, [pc, #400]	@ (80033e4 <UART_SetConfig+0x264>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d102      	bne.n	800325e <UART_SetConfig+0xde>
 8003258:	2300      	movs	r3, #0
 800325a:	77fb      	strb	r3, [r7, #31]
 800325c:	e001      	b.n	8003262 <UART_SetConfig+0xe2>
 800325e:	2310      	movs	r3, #16
 8003260:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	69db      	ldr	r3, [r3, #28]
 8003266:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800326a:	d15a      	bne.n	8003322 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 800326c:	7ffb      	ldrb	r3, [r7, #31]
 800326e:	2b08      	cmp	r3, #8
 8003270:	d827      	bhi.n	80032c2 <UART_SetConfig+0x142>
 8003272:	a201      	add	r2, pc, #4	@ (adr r2, 8003278 <UART_SetConfig+0xf8>)
 8003274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003278:	0800329d 	.word	0x0800329d
 800327c:	080032a5 	.word	0x080032a5
 8003280:	080032ad 	.word	0x080032ad
 8003284:	080032c3 	.word	0x080032c3
 8003288:	080032b3 	.word	0x080032b3
 800328c:	080032c3 	.word	0x080032c3
 8003290:	080032c3 	.word	0x080032c3
 8003294:	080032c3 	.word	0x080032c3
 8003298:	080032bb 	.word	0x080032bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800329c:	f7ff fede 	bl	800305c <HAL_RCC_GetPCLK1Freq>
 80032a0:	61b8      	str	r0, [r7, #24]
        break;
 80032a2:	e013      	b.n	80032cc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80032a4:	f7ff fefc 	bl	80030a0 <HAL_RCC_GetPCLK2Freq>
 80032a8:	61b8      	str	r0, [r7, #24]
        break;
 80032aa:	e00f      	b.n	80032cc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032ac:	4b4e      	ldr	r3, [pc, #312]	@ (80033e8 <UART_SetConfig+0x268>)
 80032ae:	61bb      	str	r3, [r7, #24]
        break;
 80032b0:	e00c      	b.n	80032cc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032b2:	f7ff fe73 	bl	8002f9c <HAL_RCC_GetSysClockFreq>
 80032b6:	61b8      	str	r0, [r7, #24]
        break;
 80032b8:	e008      	b.n	80032cc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80032be:	61bb      	str	r3, [r7, #24]
        break;
 80032c0:	e004      	b.n	80032cc <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80032c2:	2300      	movs	r3, #0
 80032c4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	77bb      	strb	r3, [r7, #30]
        break;
 80032ca:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80032cc:	69bb      	ldr	r3, [r7, #24]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d074      	beq.n	80033bc <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80032d2:	69bb      	ldr	r3, [r7, #24]
 80032d4:	005a      	lsls	r2, r3, #1
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	085b      	lsrs	r3, r3, #1
 80032dc:	441a      	add	r2, r3
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80032e6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	2b0f      	cmp	r3, #15
 80032ec:	d916      	bls.n	800331c <UART_SetConfig+0x19c>
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032f4:	d212      	bcs.n	800331c <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	b29b      	uxth	r3, r3
 80032fa:	f023 030f 	bic.w	r3, r3, #15
 80032fe:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	085b      	lsrs	r3, r3, #1
 8003304:	b29b      	uxth	r3, r3
 8003306:	f003 0307 	and.w	r3, r3, #7
 800330a:	b29a      	uxth	r2, r3
 800330c:	89fb      	ldrh	r3, [r7, #14]
 800330e:	4313      	orrs	r3, r2
 8003310:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	89fa      	ldrh	r2, [r7, #14]
 8003318:	60da      	str	r2, [r3, #12]
 800331a:	e04f      	b.n	80033bc <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	77bb      	strb	r3, [r7, #30]
 8003320:	e04c      	b.n	80033bc <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003322:	7ffb      	ldrb	r3, [r7, #31]
 8003324:	2b08      	cmp	r3, #8
 8003326:	d828      	bhi.n	800337a <UART_SetConfig+0x1fa>
 8003328:	a201      	add	r2, pc, #4	@ (adr r2, 8003330 <UART_SetConfig+0x1b0>)
 800332a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800332e:	bf00      	nop
 8003330:	08003355 	.word	0x08003355
 8003334:	0800335d 	.word	0x0800335d
 8003338:	08003365 	.word	0x08003365
 800333c:	0800337b 	.word	0x0800337b
 8003340:	0800336b 	.word	0x0800336b
 8003344:	0800337b 	.word	0x0800337b
 8003348:	0800337b 	.word	0x0800337b
 800334c:	0800337b 	.word	0x0800337b
 8003350:	08003373 	.word	0x08003373
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003354:	f7ff fe82 	bl	800305c <HAL_RCC_GetPCLK1Freq>
 8003358:	61b8      	str	r0, [r7, #24]
        break;
 800335a:	e013      	b.n	8003384 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800335c:	f7ff fea0 	bl	80030a0 <HAL_RCC_GetPCLK2Freq>
 8003360:	61b8      	str	r0, [r7, #24]
        break;
 8003362:	e00f      	b.n	8003384 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003364:	4b20      	ldr	r3, [pc, #128]	@ (80033e8 <UART_SetConfig+0x268>)
 8003366:	61bb      	str	r3, [r7, #24]
        break;
 8003368:	e00c      	b.n	8003384 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800336a:	f7ff fe17 	bl	8002f9c <HAL_RCC_GetSysClockFreq>
 800336e:	61b8      	str	r0, [r7, #24]
        break;
 8003370:	e008      	b.n	8003384 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003372:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003376:	61bb      	str	r3, [r7, #24]
        break;
 8003378:	e004      	b.n	8003384 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800337a:	2300      	movs	r3, #0
 800337c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	77bb      	strb	r3, [r7, #30]
        break;
 8003382:	bf00      	nop
    }

    if (pclk != 0U)
 8003384:	69bb      	ldr	r3, [r7, #24]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d018      	beq.n	80033bc <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	085a      	lsrs	r2, r3, #1
 8003390:	69bb      	ldr	r3, [r7, #24]
 8003392:	441a      	add	r2, r3
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	fbb2 f3f3 	udiv	r3, r2, r3
 800339c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	2b0f      	cmp	r3, #15
 80033a2:	d909      	bls.n	80033b8 <UART_SetConfig+0x238>
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033aa:	d205      	bcs.n	80033b8 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	b29a      	uxth	r2, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	60da      	str	r2, [r3, #12]
 80033b6:	e001      	b.n	80033bc <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2200      	movs	r2, #0
 80033c6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80033c8:	7fbb      	ldrb	r3, [r7, #30]
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3720      	adds	r7, #32
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	bf00      	nop
 80033d4:	efff69f3 	.word	0xefff69f3
 80033d8:	40013800 	.word	0x40013800
 80033dc:	40021000 	.word	0x40021000
 80033e0:	40004400 	.word	0x40004400
 80033e4:	40004800 	.word	0x40004800
 80033e8:	007a1200 	.word	0x007a1200

080033ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b083      	sub	sp, #12
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033f8:	f003 0308 	and.w	r3, r3, #8
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d00a      	beq.n	8003416 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	430a      	orrs	r2, r1
 8003414:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800341a:	f003 0301 	and.w	r3, r3, #1
 800341e:	2b00      	cmp	r3, #0
 8003420:	d00a      	beq.n	8003438 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	430a      	orrs	r2, r1
 8003436:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800343c:	f003 0302 	and.w	r3, r3, #2
 8003440:	2b00      	cmp	r3, #0
 8003442:	d00a      	beq.n	800345a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	430a      	orrs	r2, r1
 8003458:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800345e:	f003 0304 	and.w	r3, r3, #4
 8003462:	2b00      	cmp	r3, #0
 8003464:	d00a      	beq.n	800347c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	430a      	orrs	r2, r1
 800347a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003480:	f003 0310 	and.w	r3, r3, #16
 8003484:	2b00      	cmp	r3, #0
 8003486:	d00a      	beq.n	800349e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	430a      	orrs	r2, r1
 800349c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034a2:	f003 0320 	and.w	r3, r3, #32
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d00a      	beq.n	80034c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	430a      	orrs	r2, r1
 80034be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d01a      	beq.n	8003502 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	430a      	orrs	r2, r1
 80034e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80034ea:	d10a      	bne.n	8003502 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	430a      	orrs	r2, r1
 8003500:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003506:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800350a:	2b00      	cmp	r3, #0
 800350c:	d00a      	beq.n	8003524 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	430a      	orrs	r2, r1
 8003522:	605a      	str	r2, [r3, #4]
  }
}
 8003524:	bf00      	nop
 8003526:	370c      	adds	r7, #12
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr

08003530 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b098      	sub	sp, #96	@ 0x60
 8003534:	af02      	add	r7, sp, #8
 8003536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2200      	movs	r2, #0
 800353c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003540:	f7fd fa5c 	bl	80009fc <HAL_GetTick>
 8003544:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 0308 	and.w	r3, r3, #8
 8003550:	2b08      	cmp	r3, #8
 8003552:	d12e      	bne.n	80035b2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003554:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003558:	9300      	str	r3, [sp, #0]
 800355a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800355c:	2200      	movs	r2, #0
 800355e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f000 f88c 	bl	8003680 <UART_WaitOnFlagUntilTimeout>
 8003568:	4603      	mov	r3, r0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d021      	beq.n	80035b2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003574:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003576:	e853 3f00 	ldrex	r3, [r3]
 800357a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800357c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800357e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003582:	653b      	str	r3, [r7, #80]	@ 0x50
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	461a      	mov	r2, r3
 800358a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800358c:	647b      	str	r3, [r7, #68]	@ 0x44
 800358e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003590:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003592:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003594:	e841 2300 	strex	r3, r2, [r1]
 8003598:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800359a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800359c:	2b00      	cmp	r3, #0
 800359e:	d1e6      	bne.n	800356e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2220      	movs	r2, #32
 80035a4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2200      	movs	r2, #0
 80035aa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035ae:	2303      	movs	r3, #3
 80035b0:	e062      	b.n	8003678 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0304 	and.w	r3, r3, #4
 80035bc:	2b04      	cmp	r3, #4
 80035be:	d149      	bne.n	8003654 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035c0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80035c4:	9300      	str	r3, [sp, #0]
 80035c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035c8:	2200      	movs	r2, #0
 80035ca:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f000 f856 	bl	8003680 <UART_WaitOnFlagUntilTimeout>
 80035d4:	4603      	mov	r3, r0
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d03c      	beq.n	8003654 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035e2:	e853 3f00 	ldrex	r3, [r3]
 80035e6:	623b      	str	r3, [r7, #32]
   return(result);
 80035e8:	6a3b      	ldr	r3, [r7, #32]
 80035ea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80035ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	461a      	mov	r2, r3
 80035f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80035f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80035fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035fc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80035fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003600:	e841 2300 	strex	r3, r2, [r1]
 8003604:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003608:	2b00      	cmp	r3, #0
 800360a:	d1e6      	bne.n	80035da <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	3308      	adds	r3, #8
 8003612:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	e853 3f00 	ldrex	r3, [r3]
 800361a:	60fb      	str	r3, [r7, #12]
   return(result);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	f023 0301 	bic.w	r3, r3, #1
 8003622:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	3308      	adds	r3, #8
 800362a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800362c:	61fa      	str	r2, [r7, #28]
 800362e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003630:	69b9      	ldr	r1, [r7, #24]
 8003632:	69fa      	ldr	r2, [r7, #28]
 8003634:	e841 2300 	strex	r3, r2, [r1]
 8003638:	617b      	str	r3, [r7, #20]
   return(result);
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d1e5      	bne.n	800360c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2220      	movs	r2, #32
 8003644:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003650:	2303      	movs	r3, #3
 8003652:	e011      	b.n	8003678 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2220      	movs	r2, #32
 8003658:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2220      	movs	r2, #32
 800365e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2200      	movs	r2, #0
 8003666:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003676:	2300      	movs	r3, #0
}
 8003678:	4618      	mov	r0, r3
 800367a:	3758      	adds	r7, #88	@ 0x58
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}

08003680 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b084      	sub	sp, #16
 8003684:	af00      	add	r7, sp, #0
 8003686:	60f8      	str	r0, [r7, #12]
 8003688:	60b9      	str	r1, [r7, #8]
 800368a:	603b      	str	r3, [r7, #0]
 800368c:	4613      	mov	r3, r2
 800368e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003690:	e04f      	b.n	8003732 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003692:	69bb      	ldr	r3, [r7, #24]
 8003694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003698:	d04b      	beq.n	8003732 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800369a:	f7fd f9af 	bl	80009fc <HAL_GetTick>
 800369e:	4602      	mov	r2, r0
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	1ad3      	subs	r3, r2, r3
 80036a4:	69ba      	ldr	r2, [r7, #24]
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d302      	bcc.n	80036b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80036aa:	69bb      	ldr	r3, [r7, #24]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d101      	bne.n	80036b4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80036b0:	2303      	movs	r3, #3
 80036b2:	e04e      	b.n	8003752 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0304 	and.w	r3, r3, #4
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d037      	beq.n	8003732 <UART_WaitOnFlagUntilTimeout+0xb2>
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	2b80      	cmp	r3, #128	@ 0x80
 80036c6:	d034      	beq.n	8003732 <UART_WaitOnFlagUntilTimeout+0xb2>
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	2b40      	cmp	r3, #64	@ 0x40
 80036cc:	d031      	beq.n	8003732 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	69db      	ldr	r3, [r3, #28]
 80036d4:	f003 0308 	and.w	r3, r3, #8
 80036d8:	2b08      	cmp	r3, #8
 80036da:	d110      	bne.n	80036fe <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	2208      	movs	r2, #8
 80036e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80036e4:	68f8      	ldr	r0, [r7, #12]
 80036e6:	f000 f838 	bl	800375a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2208      	movs	r2, #8
 80036ee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2200      	movs	r2, #0
 80036f6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e029      	b.n	8003752 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	69db      	ldr	r3, [r3, #28]
 8003704:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003708:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800370c:	d111      	bne.n	8003732 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003716:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003718:	68f8      	ldr	r0, [r7, #12]
 800371a:	f000 f81e 	bl	800375a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2220      	movs	r2, #32
 8003722:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2200      	movs	r2, #0
 800372a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	e00f      	b.n	8003752 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	69da      	ldr	r2, [r3, #28]
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	4013      	ands	r3, r2
 800373c:	68ba      	ldr	r2, [r7, #8]
 800373e:	429a      	cmp	r2, r3
 8003740:	bf0c      	ite	eq
 8003742:	2301      	moveq	r3, #1
 8003744:	2300      	movne	r3, #0
 8003746:	b2db      	uxtb	r3, r3
 8003748:	461a      	mov	r2, r3
 800374a:	79fb      	ldrb	r3, [r7, #7]
 800374c:	429a      	cmp	r2, r3
 800374e:	d0a0      	beq.n	8003692 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003750:	2300      	movs	r3, #0
}
 8003752:	4618      	mov	r0, r3
 8003754:	3710      	adds	r7, #16
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}

0800375a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800375a:	b480      	push	{r7}
 800375c:	b095      	sub	sp, #84	@ 0x54
 800375e:	af00      	add	r7, sp, #0
 8003760:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003768:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800376a:	e853 3f00 	ldrex	r3, [r3]
 800376e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003770:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003772:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003776:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	461a      	mov	r2, r3
 800377e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003780:	643b      	str	r3, [r7, #64]	@ 0x40
 8003782:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003784:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003786:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003788:	e841 2300 	strex	r3, r2, [r1]
 800378c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800378e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003790:	2b00      	cmp	r3, #0
 8003792:	d1e6      	bne.n	8003762 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	3308      	adds	r3, #8
 800379a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800379c:	6a3b      	ldr	r3, [r7, #32]
 800379e:	e853 3f00 	ldrex	r3, [r3]
 80037a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	f023 0301 	bic.w	r3, r3, #1
 80037aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	3308      	adds	r3, #8
 80037b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80037b4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80037b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80037ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80037bc:	e841 2300 	strex	r3, r2, [r1]
 80037c0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80037c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d1e5      	bne.n	8003794 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d118      	bne.n	8003802 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	e853 3f00 	ldrex	r3, [r3]
 80037dc:	60bb      	str	r3, [r7, #8]
   return(result);
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	f023 0310 	bic.w	r3, r3, #16
 80037e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	461a      	mov	r2, r3
 80037ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80037ee:	61bb      	str	r3, [r7, #24]
 80037f0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037f2:	6979      	ldr	r1, [r7, #20]
 80037f4:	69ba      	ldr	r2, [r7, #24]
 80037f6:	e841 2300 	strex	r3, r2, [r1]
 80037fa:	613b      	str	r3, [r7, #16]
   return(result);
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d1e6      	bne.n	80037d0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2220      	movs	r2, #32
 8003806:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2200      	movs	r2, #0
 8003814:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003816:	bf00      	nop
 8003818:	3754      	adds	r7, #84	@ 0x54
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr
	...

08003824 <std>:
 8003824:	2300      	movs	r3, #0
 8003826:	b510      	push	{r4, lr}
 8003828:	4604      	mov	r4, r0
 800382a:	e9c0 3300 	strd	r3, r3, [r0]
 800382e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003832:	6083      	str	r3, [r0, #8]
 8003834:	8181      	strh	r1, [r0, #12]
 8003836:	6643      	str	r3, [r0, #100]	@ 0x64
 8003838:	81c2      	strh	r2, [r0, #14]
 800383a:	6183      	str	r3, [r0, #24]
 800383c:	4619      	mov	r1, r3
 800383e:	2208      	movs	r2, #8
 8003840:	305c      	adds	r0, #92	@ 0x5c
 8003842:	f000 f9b0 	bl	8003ba6 <memset>
 8003846:	4b0d      	ldr	r3, [pc, #52]	@ (800387c <std+0x58>)
 8003848:	6263      	str	r3, [r4, #36]	@ 0x24
 800384a:	4b0d      	ldr	r3, [pc, #52]	@ (8003880 <std+0x5c>)
 800384c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800384e:	4b0d      	ldr	r3, [pc, #52]	@ (8003884 <std+0x60>)
 8003850:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003852:	4b0d      	ldr	r3, [pc, #52]	@ (8003888 <std+0x64>)
 8003854:	6323      	str	r3, [r4, #48]	@ 0x30
 8003856:	4b0d      	ldr	r3, [pc, #52]	@ (800388c <std+0x68>)
 8003858:	6224      	str	r4, [r4, #32]
 800385a:	429c      	cmp	r4, r3
 800385c:	d006      	beq.n	800386c <std+0x48>
 800385e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003862:	4294      	cmp	r4, r2
 8003864:	d002      	beq.n	800386c <std+0x48>
 8003866:	33d0      	adds	r3, #208	@ 0xd0
 8003868:	429c      	cmp	r4, r3
 800386a:	d105      	bne.n	8003878 <std+0x54>
 800386c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003870:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003874:	f000 ba10 	b.w	8003c98 <__retarget_lock_init_recursive>
 8003878:	bd10      	pop	{r4, pc}
 800387a:	bf00      	nop
 800387c:	08003b21 	.word	0x08003b21
 8003880:	08003b43 	.word	0x08003b43
 8003884:	08003b7b 	.word	0x08003b7b
 8003888:	08003b9f 	.word	0x08003b9f
 800388c:	20000198 	.word	0x20000198

08003890 <stdio_exit_handler>:
 8003890:	4a02      	ldr	r2, [pc, #8]	@ (800389c <stdio_exit_handler+0xc>)
 8003892:	4903      	ldr	r1, [pc, #12]	@ (80038a0 <stdio_exit_handler+0x10>)
 8003894:	4803      	ldr	r0, [pc, #12]	@ (80038a4 <stdio_exit_handler+0x14>)
 8003896:	f000 b869 	b.w	800396c <_fwalk_sglue>
 800389a:	bf00      	nop
 800389c:	2000000c 	.word	0x2000000c
 80038a0:	08003fa9 	.word	0x08003fa9
 80038a4:	2000001c 	.word	0x2000001c

080038a8 <cleanup_stdio>:
 80038a8:	6841      	ldr	r1, [r0, #4]
 80038aa:	4b0c      	ldr	r3, [pc, #48]	@ (80038dc <cleanup_stdio+0x34>)
 80038ac:	4299      	cmp	r1, r3
 80038ae:	b510      	push	{r4, lr}
 80038b0:	4604      	mov	r4, r0
 80038b2:	d001      	beq.n	80038b8 <cleanup_stdio+0x10>
 80038b4:	f000 fb78 	bl	8003fa8 <_fflush_r>
 80038b8:	68a1      	ldr	r1, [r4, #8]
 80038ba:	4b09      	ldr	r3, [pc, #36]	@ (80038e0 <cleanup_stdio+0x38>)
 80038bc:	4299      	cmp	r1, r3
 80038be:	d002      	beq.n	80038c6 <cleanup_stdio+0x1e>
 80038c0:	4620      	mov	r0, r4
 80038c2:	f000 fb71 	bl	8003fa8 <_fflush_r>
 80038c6:	68e1      	ldr	r1, [r4, #12]
 80038c8:	4b06      	ldr	r3, [pc, #24]	@ (80038e4 <cleanup_stdio+0x3c>)
 80038ca:	4299      	cmp	r1, r3
 80038cc:	d004      	beq.n	80038d8 <cleanup_stdio+0x30>
 80038ce:	4620      	mov	r0, r4
 80038d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80038d4:	f000 bb68 	b.w	8003fa8 <_fflush_r>
 80038d8:	bd10      	pop	{r4, pc}
 80038da:	bf00      	nop
 80038dc:	20000198 	.word	0x20000198
 80038e0:	20000200 	.word	0x20000200
 80038e4:	20000268 	.word	0x20000268

080038e8 <global_stdio_init.part.0>:
 80038e8:	b510      	push	{r4, lr}
 80038ea:	4b0b      	ldr	r3, [pc, #44]	@ (8003918 <global_stdio_init.part.0+0x30>)
 80038ec:	4c0b      	ldr	r4, [pc, #44]	@ (800391c <global_stdio_init.part.0+0x34>)
 80038ee:	4a0c      	ldr	r2, [pc, #48]	@ (8003920 <global_stdio_init.part.0+0x38>)
 80038f0:	601a      	str	r2, [r3, #0]
 80038f2:	4620      	mov	r0, r4
 80038f4:	2200      	movs	r2, #0
 80038f6:	2104      	movs	r1, #4
 80038f8:	f7ff ff94 	bl	8003824 <std>
 80038fc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003900:	2201      	movs	r2, #1
 8003902:	2109      	movs	r1, #9
 8003904:	f7ff ff8e 	bl	8003824 <std>
 8003908:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800390c:	2202      	movs	r2, #2
 800390e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003912:	2112      	movs	r1, #18
 8003914:	f7ff bf86 	b.w	8003824 <std>
 8003918:	200002d0 	.word	0x200002d0
 800391c:	20000198 	.word	0x20000198
 8003920:	08003891 	.word	0x08003891

08003924 <__sfp_lock_acquire>:
 8003924:	4801      	ldr	r0, [pc, #4]	@ (800392c <__sfp_lock_acquire+0x8>)
 8003926:	f000 b9b8 	b.w	8003c9a <__retarget_lock_acquire_recursive>
 800392a:	bf00      	nop
 800392c:	200002d9 	.word	0x200002d9

08003930 <__sfp_lock_release>:
 8003930:	4801      	ldr	r0, [pc, #4]	@ (8003938 <__sfp_lock_release+0x8>)
 8003932:	f000 b9b3 	b.w	8003c9c <__retarget_lock_release_recursive>
 8003936:	bf00      	nop
 8003938:	200002d9 	.word	0x200002d9

0800393c <__sinit>:
 800393c:	b510      	push	{r4, lr}
 800393e:	4604      	mov	r4, r0
 8003940:	f7ff fff0 	bl	8003924 <__sfp_lock_acquire>
 8003944:	6a23      	ldr	r3, [r4, #32]
 8003946:	b11b      	cbz	r3, 8003950 <__sinit+0x14>
 8003948:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800394c:	f7ff bff0 	b.w	8003930 <__sfp_lock_release>
 8003950:	4b04      	ldr	r3, [pc, #16]	@ (8003964 <__sinit+0x28>)
 8003952:	6223      	str	r3, [r4, #32]
 8003954:	4b04      	ldr	r3, [pc, #16]	@ (8003968 <__sinit+0x2c>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d1f5      	bne.n	8003948 <__sinit+0xc>
 800395c:	f7ff ffc4 	bl	80038e8 <global_stdio_init.part.0>
 8003960:	e7f2      	b.n	8003948 <__sinit+0xc>
 8003962:	bf00      	nop
 8003964:	080038a9 	.word	0x080038a9
 8003968:	200002d0 	.word	0x200002d0

0800396c <_fwalk_sglue>:
 800396c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003970:	4607      	mov	r7, r0
 8003972:	4688      	mov	r8, r1
 8003974:	4614      	mov	r4, r2
 8003976:	2600      	movs	r6, #0
 8003978:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800397c:	f1b9 0901 	subs.w	r9, r9, #1
 8003980:	d505      	bpl.n	800398e <_fwalk_sglue+0x22>
 8003982:	6824      	ldr	r4, [r4, #0]
 8003984:	2c00      	cmp	r4, #0
 8003986:	d1f7      	bne.n	8003978 <_fwalk_sglue+0xc>
 8003988:	4630      	mov	r0, r6
 800398a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800398e:	89ab      	ldrh	r3, [r5, #12]
 8003990:	2b01      	cmp	r3, #1
 8003992:	d907      	bls.n	80039a4 <_fwalk_sglue+0x38>
 8003994:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003998:	3301      	adds	r3, #1
 800399a:	d003      	beq.n	80039a4 <_fwalk_sglue+0x38>
 800399c:	4629      	mov	r1, r5
 800399e:	4638      	mov	r0, r7
 80039a0:	47c0      	blx	r8
 80039a2:	4306      	orrs	r6, r0
 80039a4:	3568      	adds	r5, #104	@ 0x68
 80039a6:	e7e9      	b.n	800397c <_fwalk_sglue+0x10>

080039a8 <setbuf>:
 80039a8:	fab1 f281 	clz	r2, r1
 80039ac:	0952      	lsrs	r2, r2, #5
 80039ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80039b2:	0052      	lsls	r2, r2, #1
 80039b4:	f000 b800 	b.w	80039b8 <setvbuf>

080039b8 <setvbuf>:
 80039b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80039bc:	461d      	mov	r5, r3
 80039be:	4b57      	ldr	r3, [pc, #348]	@ (8003b1c <setvbuf+0x164>)
 80039c0:	681f      	ldr	r7, [r3, #0]
 80039c2:	4604      	mov	r4, r0
 80039c4:	460e      	mov	r6, r1
 80039c6:	4690      	mov	r8, r2
 80039c8:	b127      	cbz	r7, 80039d4 <setvbuf+0x1c>
 80039ca:	6a3b      	ldr	r3, [r7, #32]
 80039cc:	b913      	cbnz	r3, 80039d4 <setvbuf+0x1c>
 80039ce:	4638      	mov	r0, r7
 80039d0:	f7ff ffb4 	bl	800393c <__sinit>
 80039d4:	f1b8 0f02 	cmp.w	r8, #2
 80039d8:	d006      	beq.n	80039e8 <setvbuf+0x30>
 80039da:	f1b8 0f01 	cmp.w	r8, #1
 80039de:	f200 809a 	bhi.w	8003b16 <setvbuf+0x15e>
 80039e2:	2d00      	cmp	r5, #0
 80039e4:	f2c0 8097 	blt.w	8003b16 <setvbuf+0x15e>
 80039e8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80039ea:	07d9      	lsls	r1, r3, #31
 80039ec:	d405      	bmi.n	80039fa <setvbuf+0x42>
 80039ee:	89a3      	ldrh	r3, [r4, #12]
 80039f0:	059a      	lsls	r2, r3, #22
 80039f2:	d402      	bmi.n	80039fa <setvbuf+0x42>
 80039f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80039f6:	f000 f950 	bl	8003c9a <__retarget_lock_acquire_recursive>
 80039fa:	4621      	mov	r1, r4
 80039fc:	4638      	mov	r0, r7
 80039fe:	f000 fad3 	bl	8003fa8 <_fflush_r>
 8003a02:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003a04:	b141      	cbz	r1, 8003a18 <setvbuf+0x60>
 8003a06:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003a0a:	4299      	cmp	r1, r3
 8003a0c:	d002      	beq.n	8003a14 <setvbuf+0x5c>
 8003a0e:	4638      	mov	r0, r7
 8003a10:	f000 f946 	bl	8003ca0 <_free_r>
 8003a14:	2300      	movs	r3, #0
 8003a16:	6363      	str	r3, [r4, #52]	@ 0x34
 8003a18:	2300      	movs	r3, #0
 8003a1a:	61a3      	str	r3, [r4, #24]
 8003a1c:	6063      	str	r3, [r4, #4]
 8003a1e:	89a3      	ldrh	r3, [r4, #12]
 8003a20:	061b      	lsls	r3, r3, #24
 8003a22:	d503      	bpl.n	8003a2c <setvbuf+0x74>
 8003a24:	6921      	ldr	r1, [r4, #16]
 8003a26:	4638      	mov	r0, r7
 8003a28:	f000 f93a 	bl	8003ca0 <_free_r>
 8003a2c:	89a3      	ldrh	r3, [r4, #12]
 8003a2e:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 8003a32:	f023 0303 	bic.w	r3, r3, #3
 8003a36:	f1b8 0f02 	cmp.w	r8, #2
 8003a3a:	81a3      	strh	r3, [r4, #12]
 8003a3c:	d061      	beq.n	8003b02 <setvbuf+0x14a>
 8003a3e:	ab01      	add	r3, sp, #4
 8003a40:	466a      	mov	r2, sp
 8003a42:	4621      	mov	r1, r4
 8003a44:	4638      	mov	r0, r7
 8003a46:	f000 fad7 	bl	8003ff8 <__swhatbuf_r>
 8003a4a:	89a3      	ldrh	r3, [r4, #12]
 8003a4c:	4318      	orrs	r0, r3
 8003a4e:	81a0      	strh	r0, [r4, #12]
 8003a50:	bb2d      	cbnz	r5, 8003a9e <setvbuf+0xe6>
 8003a52:	9d00      	ldr	r5, [sp, #0]
 8003a54:	4628      	mov	r0, r5
 8003a56:	f000 f96d 	bl	8003d34 <malloc>
 8003a5a:	4606      	mov	r6, r0
 8003a5c:	2800      	cmp	r0, #0
 8003a5e:	d152      	bne.n	8003b06 <setvbuf+0x14e>
 8003a60:	f8dd 9000 	ldr.w	r9, [sp]
 8003a64:	45a9      	cmp	r9, r5
 8003a66:	d140      	bne.n	8003aea <setvbuf+0x132>
 8003a68:	f04f 35ff 	mov.w	r5, #4294967295
 8003a6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a70:	f043 0202 	orr.w	r2, r3, #2
 8003a74:	81a2      	strh	r2, [r4, #12]
 8003a76:	2200      	movs	r2, #0
 8003a78:	60a2      	str	r2, [r4, #8]
 8003a7a:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 8003a7e:	6022      	str	r2, [r4, #0]
 8003a80:	6122      	str	r2, [r4, #16]
 8003a82:	2201      	movs	r2, #1
 8003a84:	6162      	str	r2, [r4, #20]
 8003a86:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003a88:	07d6      	lsls	r6, r2, #31
 8003a8a:	d404      	bmi.n	8003a96 <setvbuf+0xde>
 8003a8c:	0598      	lsls	r0, r3, #22
 8003a8e:	d402      	bmi.n	8003a96 <setvbuf+0xde>
 8003a90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003a92:	f000 f903 	bl	8003c9c <__retarget_lock_release_recursive>
 8003a96:	4628      	mov	r0, r5
 8003a98:	b003      	add	sp, #12
 8003a9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003a9e:	2e00      	cmp	r6, #0
 8003aa0:	d0d8      	beq.n	8003a54 <setvbuf+0x9c>
 8003aa2:	6a3b      	ldr	r3, [r7, #32]
 8003aa4:	b913      	cbnz	r3, 8003aac <setvbuf+0xf4>
 8003aa6:	4638      	mov	r0, r7
 8003aa8:	f7ff ff48 	bl	800393c <__sinit>
 8003aac:	f1b8 0f01 	cmp.w	r8, #1
 8003ab0:	bf08      	it	eq
 8003ab2:	89a3      	ldrheq	r3, [r4, #12]
 8003ab4:	6026      	str	r6, [r4, #0]
 8003ab6:	bf04      	itt	eq
 8003ab8:	f043 0301 	orreq.w	r3, r3, #1
 8003abc:	81a3      	strheq	r3, [r4, #12]
 8003abe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ac2:	f013 0208 	ands.w	r2, r3, #8
 8003ac6:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8003aca:	d01e      	beq.n	8003b0a <setvbuf+0x152>
 8003acc:	07d9      	lsls	r1, r3, #31
 8003ace:	bf41      	itttt	mi
 8003ad0:	2200      	movmi	r2, #0
 8003ad2:	426d      	negmi	r5, r5
 8003ad4:	60a2      	strmi	r2, [r4, #8]
 8003ad6:	61a5      	strmi	r5, [r4, #24]
 8003ad8:	bf58      	it	pl
 8003ada:	60a5      	strpl	r5, [r4, #8]
 8003adc:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003ade:	07d2      	lsls	r2, r2, #31
 8003ae0:	d401      	bmi.n	8003ae6 <setvbuf+0x12e>
 8003ae2:	059b      	lsls	r3, r3, #22
 8003ae4:	d513      	bpl.n	8003b0e <setvbuf+0x156>
 8003ae6:	2500      	movs	r5, #0
 8003ae8:	e7d5      	b.n	8003a96 <setvbuf+0xde>
 8003aea:	4648      	mov	r0, r9
 8003aec:	f000 f922 	bl	8003d34 <malloc>
 8003af0:	4606      	mov	r6, r0
 8003af2:	2800      	cmp	r0, #0
 8003af4:	d0b8      	beq.n	8003a68 <setvbuf+0xb0>
 8003af6:	89a3      	ldrh	r3, [r4, #12]
 8003af8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003afc:	81a3      	strh	r3, [r4, #12]
 8003afe:	464d      	mov	r5, r9
 8003b00:	e7cf      	b.n	8003aa2 <setvbuf+0xea>
 8003b02:	2500      	movs	r5, #0
 8003b04:	e7b2      	b.n	8003a6c <setvbuf+0xb4>
 8003b06:	46a9      	mov	r9, r5
 8003b08:	e7f5      	b.n	8003af6 <setvbuf+0x13e>
 8003b0a:	60a2      	str	r2, [r4, #8]
 8003b0c:	e7e6      	b.n	8003adc <setvbuf+0x124>
 8003b0e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003b10:	f000 f8c4 	bl	8003c9c <__retarget_lock_release_recursive>
 8003b14:	e7e7      	b.n	8003ae6 <setvbuf+0x12e>
 8003b16:	f04f 35ff 	mov.w	r5, #4294967295
 8003b1a:	e7bc      	b.n	8003a96 <setvbuf+0xde>
 8003b1c:	20000018 	.word	0x20000018

08003b20 <__sread>:
 8003b20:	b510      	push	{r4, lr}
 8003b22:	460c      	mov	r4, r1
 8003b24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b28:	f000 f868 	bl	8003bfc <_read_r>
 8003b2c:	2800      	cmp	r0, #0
 8003b2e:	bfab      	itete	ge
 8003b30:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003b32:	89a3      	ldrhlt	r3, [r4, #12]
 8003b34:	181b      	addge	r3, r3, r0
 8003b36:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003b3a:	bfac      	ite	ge
 8003b3c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003b3e:	81a3      	strhlt	r3, [r4, #12]
 8003b40:	bd10      	pop	{r4, pc}

08003b42 <__swrite>:
 8003b42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b46:	461f      	mov	r7, r3
 8003b48:	898b      	ldrh	r3, [r1, #12]
 8003b4a:	05db      	lsls	r3, r3, #23
 8003b4c:	4605      	mov	r5, r0
 8003b4e:	460c      	mov	r4, r1
 8003b50:	4616      	mov	r6, r2
 8003b52:	d505      	bpl.n	8003b60 <__swrite+0x1e>
 8003b54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b58:	2302      	movs	r3, #2
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f000 f83c 	bl	8003bd8 <_lseek_r>
 8003b60:	89a3      	ldrh	r3, [r4, #12]
 8003b62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003b66:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003b6a:	81a3      	strh	r3, [r4, #12]
 8003b6c:	4632      	mov	r2, r6
 8003b6e:	463b      	mov	r3, r7
 8003b70:	4628      	mov	r0, r5
 8003b72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003b76:	f000 b853 	b.w	8003c20 <_write_r>

08003b7a <__sseek>:
 8003b7a:	b510      	push	{r4, lr}
 8003b7c:	460c      	mov	r4, r1
 8003b7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b82:	f000 f829 	bl	8003bd8 <_lseek_r>
 8003b86:	1c43      	adds	r3, r0, #1
 8003b88:	89a3      	ldrh	r3, [r4, #12]
 8003b8a:	bf15      	itete	ne
 8003b8c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003b8e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003b92:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003b96:	81a3      	strheq	r3, [r4, #12]
 8003b98:	bf18      	it	ne
 8003b9a:	81a3      	strhne	r3, [r4, #12]
 8003b9c:	bd10      	pop	{r4, pc}

08003b9e <__sclose>:
 8003b9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ba2:	f000 b809 	b.w	8003bb8 <_close_r>

08003ba6 <memset>:
 8003ba6:	4402      	add	r2, r0
 8003ba8:	4603      	mov	r3, r0
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d100      	bne.n	8003bb0 <memset+0xa>
 8003bae:	4770      	bx	lr
 8003bb0:	f803 1b01 	strb.w	r1, [r3], #1
 8003bb4:	e7f9      	b.n	8003baa <memset+0x4>
	...

08003bb8 <_close_r>:
 8003bb8:	b538      	push	{r3, r4, r5, lr}
 8003bba:	4d06      	ldr	r5, [pc, #24]	@ (8003bd4 <_close_r+0x1c>)
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	4604      	mov	r4, r0
 8003bc0:	4608      	mov	r0, r1
 8003bc2:	602b      	str	r3, [r5, #0]
 8003bc4:	f7fc fe25 	bl	8000812 <_close>
 8003bc8:	1c43      	adds	r3, r0, #1
 8003bca:	d102      	bne.n	8003bd2 <_close_r+0x1a>
 8003bcc:	682b      	ldr	r3, [r5, #0]
 8003bce:	b103      	cbz	r3, 8003bd2 <_close_r+0x1a>
 8003bd0:	6023      	str	r3, [r4, #0]
 8003bd2:	bd38      	pop	{r3, r4, r5, pc}
 8003bd4:	200002d4 	.word	0x200002d4

08003bd8 <_lseek_r>:
 8003bd8:	b538      	push	{r3, r4, r5, lr}
 8003bda:	4d07      	ldr	r5, [pc, #28]	@ (8003bf8 <_lseek_r+0x20>)
 8003bdc:	4604      	mov	r4, r0
 8003bde:	4608      	mov	r0, r1
 8003be0:	4611      	mov	r1, r2
 8003be2:	2200      	movs	r2, #0
 8003be4:	602a      	str	r2, [r5, #0]
 8003be6:	461a      	mov	r2, r3
 8003be8:	f7fc fe2f 	bl	800084a <_lseek>
 8003bec:	1c43      	adds	r3, r0, #1
 8003bee:	d102      	bne.n	8003bf6 <_lseek_r+0x1e>
 8003bf0:	682b      	ldr	r3, [r5, #0]
 8003bf2:	b103      	cbz	r3, 8003bf6 <_lseek_r+0x1e>
 8003bf4:	6023      	str	r3, [r4, #0]
 8003bf6:	bd38      	pop	{r3, r4, r5, pc}
 8003bf8:	200002d4 	.word	0x200002d4

08003bfc <_read_r>:
 8003bfc:	b538      	push	{r3, r4, r5, lr}
 8003bfe:	4d07      	ldr	r5, [pc, #28]	@ (8003c1c <_read_r+0x20>)
 8003c00:	4604      	mov	r4, r0
 8003c02:	4608      	mov	r0, r1
 8003c04:	4611      	mov	r1, r2
 8003c06:	2200      	movs	r2, #0
 8003c08:	602a      	str	r2, [r5, #0]
 8003c0a:	461a      	mov	r2, r3
 8003c0c:	f7fc fdc8 	bl	80007a0 <_read>
 8003c10:	1c43      	adds	r3, r0, #1
 8003c12:	d102      	bne.n	8003c1a <_read_r+0x1e>
 8003c14:	682b      	ldr	r3, [r5, #0]
 8003c16:	b103      	cbz	r3, 8003c1a <_read_r+0x1e>
 8003c18:	6023      	str	r3, [r4, #0]
 8003c1a:	bd38      	pop	{r3, r4, r5, pc}
 8003c1c:	200002d4 	.word	0x200002d4

08003c20 <_write_r>:
 8003c20:	b538      	push	{r3, r4, r5, lr}
 8003c22:	4d07      	ldr	r5, [pc, #28]	@ (8003c40 <_write_r+0x20>)
 8003c24:	4604      	mov	r4, r0
 8003c26:	4608      	mov	r0, r1
 8003c28:	4611      	mov	r1, r2
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	602a      	str	r2, [r5, #0]
 8003c2e:	461a      	mov	r2, r3
 8003c30:	f7fc fdd3 	bl	80007da <_write>
 8003c34:	1c43      	adds	r3, r0, #1
 8003c36:	d102      	bne.n	8003c3e <_write_r+0x1e>
 8003c38:	682b      	ldr	r3, [r5, #0]
 8003c3a:	b103      	cbz	r3, 8003c3e <_write_r+0x1e>
 8003c3c:	6023      	str	r3, [r4, #0]
 8003c3e:	bd38      	pop	{r3, r4, r5, pc}
 8003c40:	200002d4 	.word	0x200002d4

08003c44 <__errno>:
 8003c44:	4b01      	ldr	r3, [pc, #4]	@ (8003c4c <__errno+0x8>)
 8003c46:	6818      	ldr	r0, [r3, #0]
 8003c48:	4770      	bx	lr
 8003c4a:	bf00      	nop
 8003c4c:	20000018 	.word	0x20000018

08003c50 <__libc_init_array>:
 8003c50:	b570      	push	{r4, r5, r6, lr}
 8003c52:	4d0d      	ldr	r5, [pc, #52]	@ (8003c88 <__libc_init_array+0x38>)
 8003c54:	4c0d      	ldr	r4, [pc, #52]	@ (8003c8c <__libc_init_array+0x3c>)
 8003c56:	1b64      	subs	r4, r4, r5
 8003c58:	10a4      	asrs	r4, r4, #2
 8003c5a:	2600      	movs	r6, #0
 8003c5c:	42a6      	cmp	r6, r4
 8003c5e:	d109      	bne.n	8003c74 <__libc_init_array+0x24>
 8003c60:	4d0b      	ldr	r5, [pc, #44]	@ (8003c90 <__libc_init_array+0x40>)
 8003c62:	4c0c      	ldr	r4, [pc, #48]	@ (8003c94 <__libc_init_array+0x44>)
 8003c64:	f000 fa10 	bl	8004088 <_init>
 8003c68:	1b64      	subs	r4, r4, r5
 8003c6a:	10a4      	asrs	r4, r4, #2
 8003c6c:	2600      	movs	r6, #0
 8003c6e:	42a6      	cmp	r6, r4
 8003c70:	d105      	bne.n	8003c7e <__libc_init_array+0x2e>
 8003c72:	bd70      	pop	{r4, r5, r6, pc}
 8003c74:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c78:	4798      	blx	r3
 8003c7a:	3601      	adds	r6, #1
 8003c7c:	e7ee      	b.n	8003c5c <__libc_init_array+0xc>
 8003c7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c82:	4798      	blx	r3
 8003c84:	3601      	adds	r6, #1
 8003c86:	e7f2      	b.n	8003c6e <__libc_init_array+0x1e>
 8003c88:	080040d8 	.word	0x080040d8
 8003c8c:	080040d8 	.word	0x080040d8
 8003c90:	080040d8 	.word	0x080040d8
 8003c94:	080040dc 	.word	0x080040dc

08003c98 <__retarget_lock_init_recursive>:
 8003c98:	4770      	bx	lr

08003c9a <__retarget_lock_acquire_recursive>:
 8003c9a:	4770      	bx	lr

08003c9c <__retarget_lock_release_recursive>:
 8003c9c:	4770      	bx	lr
	...

08003ca0 <_free_r>:
 8003ca0:	b538      	push	{r3, r4, r5, lr}
 8003ca2:	4605      	mov	r5, r0
 8003ca4:	2900      	cmp	r1, #0
 8003ca6:	d041      	beq.n	8003d2c <_free_r+0x8c>
 8003ca8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003cac:	1f0c      	subs	r4, r1, #4
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	bfb8      	it	lt
 8003cb2:	18e4      	addlt	r4, r4, r3
 8003cb4:	f000 f8e8 	bl	8003e88 <__malloc_lock>
 8003cb8:	4a1d      	ldr	r2, [pc, #116]	@ (8003d30 <_free_r+0x90>)
 8003cba:	6813      	ldr	r3, [r2, #0]
 8003cbc:	b933      	cbnz	r3, 8003ccc <_free_r+0x2c>
 8003cbe:	6063      	str	r3, [r4, #4]
 8003cc0:	6014      	str	r4, [r2, #0]
 8003cc2:	4628      	mov	r0, r5
 8003cc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003cc8:	f000 b8e4 	b.w	8003e94 <__malloc_unlock>
 8003ccc:	42a3      	cmp	r3, r4
 8003cce:	d908      	bls.n	8003ce2 <_free_r+0x42>
 8003cd0:	6820      	ldr	r0, [r4, #0]
 8003cd2:	1821      	adds	r1, r4, r0
 8003cd4:	428b      	cmp	r3, r1
 8003cd6:	bf01      	itttt	eq
 8003cd8:	6819      	ldreq	r1, [r3, #0]
 8003cda:	685b      	ldreq	r3, [r3, #4]
 8003cdc:	1809      	addeq	r1, r1, r0
 8003cde:	6021      	streq	r1, [r4, #0]
 8003ce0:	e7ed      	b.n	8003cbe <_free_r+0x1e>
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	b10b      	cbz	r3, 8003cec <_free_r+0x4c>
 8003ce8:	42a3      	cmp	r3, r4
 8003cea:	d9fa      	bls.n	8003ce2 <_free_r+0x42>
 8003cec:	6811      	ldr	r1, [r2, #0]
 8003cee:	1850      	adds	r0, r2, r1
 8003cf0:	42a0      	cmp	r0, r4
 8003cf2:	d10b      	bne.n	8003d0c <_free_r+0x6c>
 8003cf4:	6820      	ldr	r0, [r4, #0]
 8003cf6:	4401      	add	r1, r0
 8003cf8:	1850      	adds	r0, r2, r1
 8003cfa:	4283      	cmp	r3, r0
 8003cfc:	6011      	str	r1, [r2, #0]
 8003cfe:	d1e0      	bne.n	8003cc2 <_free_r+0x22>
 8003d00:	6818      	ldr	r0, [r3, #0]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	6053      	str	r3, [r2, #4]
 8003d06:	4408      	add	r0, r1
 8003d08:	6010      	str	r0, [r2, #0]
 8003d0a:	e7da      	b.n	8003cc2 <_free_r+0x22>
 8003d0c:	d902      	bls.n	8003d14 <_free_r+0x74>
 8003d0e:	230c      	movs	r3, #12
 8003d10:	602b      	str	r3, [r5, #0]
 8003d12:	e7d6      	b.n	8003cc2 <_free_r+0x22>
 8003d14:	6820      	ldr	r0, [r4, #0]
 8003d16:	1821      	adds	r1, r4, r0
 8003d18:	428b      	cmp	r3, r1
 8003d1a:	bf04      	itt	eq
 8003d1c:	6819      	ldreq	r1, [r3, #0]
 8003d1e:	685b      	ldreq	r3, [r3, #4]
 8003d20:	6063      	str	r3, [r4, #4]
 8003d22:	bf04      	itt	eq
 8003d24:	1809      	addeq	r1, r1, r0
 8003d26:	6021      	streq	r1, [r4, #0]
 8003d28:	6054      	str	r4, [r2, #4]
 8003d2a:	e7ca      	b.n	8003cc2 <_free_r+0x22>
 8003d2c:	bd38      	pop	{r3, r4, r5, pc}
 8003d2e:	bf00      	nop
 8003d30:	200002e0 	.word	0x200002e0

08003d34 <malloc>:
 8003d34:	4b02      	ldr	r3, [pc, #8]	@ (8003d40 <malloc+0xc>)
 8003d36:	4601      	mov	r1, r0
 8003d38:	6818      	ldr	r0, [r3, #0]
 8003d3a:	f000 b825 	b.w	8003d88 <_malloc_r>
 8003d3e:	bf00      	nop
 8003d40:	20000018 	.word	0x20000018

08003d44 <sbrk_aligned>:
 8003d44:	b570      	push	{r4, r5, r6, lr}
 8003d46:	4e0f      	ldr	r6, [pc, #60]	@ (8003d84 <sbrk_aligned+0x40>)
 8003d48:	460c      	mov	r4, r1
 8003d4a:	6831      	ldr	r1, [r6, #0]
 8003d4c:	4605      	mov	r5, r0
 8003d4e:	b911      	cbnz	r1, 8003d56 <sbrk_aligned+0x12>
 8003d50:	f000 f98a 	bl	8004068 <_sbrk_r>
 8003d54:	6030      	str	r0, [r6, #0]
 8003d56:	4621      	mov	r1, r4
 8003d58:	4628      	mov	r0, r5
 8003d5a:	f000 f985 	bl	8004068 <_sbrk_r>
 8003d5e:	1c43      	adds	r3, r0, #1
 8003d60:	d103      	bne.n	8003d6a <sbrk_aligned+0x26>
 8003d62:	f04f 34ff 	mov.w	r4, #4294967295
 8003d66:	4620      	mov	r0, r4
 8003d68:	bd70      	pop	{r4, r5, r6, pc}
 8003d6a:	1cc4      	adds	r4, r0, #3
 8003d6c:	f024 0403 	bic.w	r4, r4, #3
 8003d70:	42a0      	cmp	r0, r4
 8003d72:	d0f8      	beq.n	8003d66 <sbrk_aligned+0x22>
 8003d74:	1a21      	subs	r1, r4, r0
 8003d76:	4628      	mov	r0, r5
 8003d78:	f000 f976 	bl	8004068 <_sbrk_r>
 8003d7c:	3001      	adds	r0, #1
 8003d7e:	d1f2      	bne.n	8003d66 <sbrk_aligned+0x22>
 8003d80:	e7ef      	b.n	8003d62 <sbrk_aligned+0x1e>
 8003d82:	bf00      	nop
 8003d84:	200002dc 	.word	0x200002dc

08003d88 <_malloc_r>:
 8003d88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d8c:	1ccd      	adds	r5, r1, #3
 8003d8e:	f025 0503 	bic.w	r5, r5, #3
 8003d92:	3508      	adds	r5, #8
 8003d94:	2d0c      	cmp	r5, #12
 8003d96:	bf38      	it	cc
 8003d98:	250c      	movcc	r5, #12
 8003d9a:	2d00      	cmp	r5, #0
 8003d9c:	4606      	mov	r6, r0
 8003d9e:	db01      	blt.n	8003da4 <_malloc_r+0x1c>
 8003da0:	42a9      	cmp	r1, r5
 8003da2:	d904      	bls.n	8003dae <_malloc_r+0x26>
 8003da4:	230c      	movs	r3, #12
 8003da6:	6033      	str	r3, [r6, #0]
 8003da8:	2000      	movs	r0, #0
 8003daa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003dae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003e84 <_malloc_r+0xfc>
 8003db2:	f000 f869 	bl	8003e88 <__malloc_lock>
 8003db6:	f8d8 3000 	ldr.w	r3, [r8]
 8003dba:	461c      	mov	r4, r3
 8003dbc:	bb44      	cbnz	r4, 8003e10 <_malloc_r+0x88>
 8003dbe:	4629      	mov	r1, r5
 8003dc0:	4630      	mov	r0, r6
 8003dc2:	f7ff ffbf 	bl	8003d44 <sbrk_aligned>
 8003dc6:	1c43      	adds	r3, r0, #1
 8003dc8:	4604      	mov	r4, r0
 8003dca:	d158      	bne.n	8003e7e <_malloc_r+0xf6>
 8003dcc:	f8d8 4000 	ldr.w	r4, [r8]
 8003dd0:	4627      	mov	r7, r4
 8003dd2:	2f00      	cmp	r7, #0
 8003dd4:	d143      	bne.n	8003e5e <_malloc_r+0xd6>
 8003dd6:	2c00      	cmp	r4, #0
 8003dd8:	d04b      	beq.n	8003e72 <_malloc_r+0xea>
 8003dda:	6823      	ldr	r3, [r4, #0]
 8003ddc:	4639      	mov	r1, r7
 8003dde:	4630      	mov	r0, r6
 8003de0:	eb04 0903 	add.w	r9, r4, r3
 8003de4:	f000 f940 	bl	8004068 <_sbrk_r>
 8003de8:	4581      	cmp	r9, r0
 8003dea:	d142      	bne.n	8003e72 <_malloc_r+0xea>
 8003dec:	6821      	ldr	r1, [r4, #0]
 8003dee:	1a6d      	subs	r5, r5, r1
 8003df0:	4629      	mov	r1, r5
 8003df2:	4630      	mov	r0, r6
 8003df4:	f7ff ffa6 	bl	8003d44 <sbrk_aligned>
 8003df8:	3001      	adds	r0, #1
 8003dfa:	d03a      	beq.n	8003e72 <_malloc_r+0xea>
 8003dfc:	6823      	ldr	r3, [r4, #0]
 8003dfe:	442b      	add	r3, r5
 8003e00:	6023      	str	r3, [r4, #0]
 8003e02:	f8d8 3000 	ldr.w	r3, [r8]
 8003e06:	685a      	ldr	r2, [r3, #4]
 8003e08:	bb62      	cbnz	r2, 8003e64 <_malloc_r+0xdc>
 8003e0a:	f8c8 7000 	str.w	r7, [r8]
 8003e0e:	e00f      	b.n	8003e30 <_malloc_r+0xa8>
 8003e10:	6822      	ldr	r2, [r4, #0]
 8003e12:	1b52      	subs	r2, r2, r5
 8003e14:	d420      	bmi.n	8003e58 <_malloc_r+0xd0>
 8003e16:	2a0b      	cmp	r2, #11
 8003e18:	d917      	bls.n	8003e4a <_malloc_r+0xc2>
 8003e1a:	1961      	adds	r1, r4, r5
 8003e1c:	42a3      	cmp	r3, r4
 8003e1e:	6025      	str	r5, [r4, #0]
 8003e20:	bf18      	it	ne
 8003e22:	6059      	strne	r1, [r3, #4]
 8003e24:	6863      	ldr	r3, [r4, #4]
 8003e26:	bf08      	it	eq
 8003e28:	f8c8 1000 	streq.w	r1, [r8]
 8003e2c:	5162      	str	r2, [r4, r5]
 8003e2e:	604b      	str	r3, [r1, #4]
 8003e30:	4630      	mov	r0, r6
 8003e32:	f000 f82f 	bl	8003e94 <__malloc_unlock>
 8003e36:	f104 000b 	add.w	r0, r4, #11
 8003e3a:	1d23      	adds	r3, r4, #4
 8003e3c:	f020 0007 	bic.w	r0, r0, #7
 8003e40:	1ac2      	subs	r2, r0, r3
 8003e42:	bf1c      	itt	ne
 8003e44:	1a1b      	subne	r3, r3, r0
 8003e46:	50a3      	strne	r3, [r4, r2]
 8003e48:	e7af      	b.n	8003daa <_malloc_r+0x22>
 8003e4a:	6862      	ldr	r2, [r4, #4]
 8003e4c:	42a3      	cmp	r3, r4
 8003e4e:	bf0c      	ite	eq
 8003e50:	f8c8 2000 	streq.w	r2, [r8]
 8003e54:	605a      	strne	r2, [r3, #4]
 8003e56:	e7eb      	b.n	8003e30 <_malloc_r+0xa8>
 8003e58:	4623      	mov	r3, r4
 8003e5a:	6864      	ldr	r4, [r4, #4]
 8003e5c:	e7ae      	b.n	8003dbc <_malloc_r+0x34>
 8003e5e:	463c      	mov	r4, r7
 8003e60:	687f      	ldr	r7, [r7, #4]
 8003e62:	e7b6      	b.n	8003dd2 <_malloc_r+0x4a>
 8003e64:	461a      	mov	r2, r3
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	42a3      	cmp	r3, r4
 8003e6a:	d1fb      	bne.n	8003e64 <_malloc_r+0xdc>
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	6053      	str	r3, [r2, #4]
 8003e70:	e7de      	b.n	8003e30 <_malloc_r+0xa8>
 8003e72:	230c      	movs	r3, #12
 8003e74:	6033      	str	r3, [r6, #0]
 8003e76:	4630      	mov	r0, r6
 8003e78:	f000 f80c 	bl	8003e94 <__malloc_unlock>
 8003e7c:	e794      	b.n	8003da8 <_malloc_r+0x20>
 8003e7e:	6005      	str	r5, [r0, #0]
 8003e80:	e7d6      	b.n	8003e30 <_malloc_r+0xa8>
 8003e82:	bf00      	nop
 8003e84:	200002e0 	.word	0x200002e0

08003e88 <__malloc_lock>:
 8003e88:	4801      	ldr	r0, [pc, #4]	@ (8003e90 <__malloc_lock+0x8>)
 8003e8a:	f7ff bf06 	b.w	8003c9a <__retarget_lock_acquire_recursive>
 8003e8e:	bf00      	nop
 8003e90:	200002d8 	.word	0x200002d8

08003e94 <__malloc_unlock>:
 8003e94:	4801      	ldr	r0, [pc, #4]	@ (8003e9c <__malloc_unlock+0x8>)
 8003e96:	f7ff bf01 	b.w	8003c9c <__retarget_lock_release_recursive>
 8003e9a:	bf00      	nop
 8003e9c:	200002d8 	.word	0x200002d8

08003ea0 <__sflush_r>:
 8003ea0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003ea4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ea8:	0716      	lsls	r6, r2, #28
 8003eaa:	4605      	mov	r5, r0
 8003eac:	460c      	mov	r4, r1
 8003eae:	d454      	bmi.n	8003f5a <__sflush_r+0xba>
 8003eb0:	684b      	ldr	r3, [r1, #4]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	dc02      	bgt.n	8003ebc <__sflush_r+0x1c>
 8003eb6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	dd48      	ble.n	8003f4e <__sflush_r+0xae>
 8003ebc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003ebe:	2e00      	cmp	r6, #0
 8003ec0:	d045      	beq.n	8003f4e <__sflush_r+0xae>
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003ec8:	682f      	ldr	r7, [r5, #0]
 8003eca:	6a21      	ldr	r1, [r4, #32]
 8003ecc:	602b      	str	r3, [r5, #0]
 8003ece:	d030      	beq.n	8003f32 <__sflush_r+0x92>
 8003ed0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003ed2:	89a3      	ldrh	r3, [r4, #12]
 8003ed4:	0759      	lsls	r1, r3, #29
 8003ed6:	d505      	bpl.n	8003ee4 <__sflush_r+0x44>
 8003ed8:	6863      	ldr	r3, [r4, #4]
 8003eda:	1ad2      	subs	r2, r2, r3
 8003edc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003ede:	b10b      	cbz	r3, 8003ee4 <__sflush_r+0x44>
 8003ee0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003ee2:	1ad2      	subs	r2, r2, r3
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003ee8:	6a21      	ldr	r1, [r4, #32]
 8003eea:	4628      	mov	r0, r5
 8003eec:	47b0      	blx	r6
 8003eee:	1c43      	adds	r3, r0, #1
 8003ef0:	89a3      	ldrh	r3, [r4, #12]
 8003ef2:	d106      	bne.n	8003f02 <__sflush_r+0x62>
 8003ef4:	6829      	ldr	r1, [r5, #0]
 8003ef6:	291d      	cmp	r1, #29
 8003ef8:	d82b      	bhi.n	8003f52 <__sflush_r+0xb2>
 8003efa:	4a2a      	ldr	r2, [pc, #168]	@ (8003fa4 <__sflush_r+0x104>)
 8003efc:	410a      	asrs	r2, r1
 8003efe:	07d6      	lsls	r6, r2, #31
 8003f00:	d427      	bmi.n	8003f52 <__sflush_r+0xb2>
 8003f02:	2200      	movs	r2, #0
 8003f04:	6062      	str	r2, [r4, #4]
 8003f06:	04d9      	lsls	r1, r3, #19
 8003f08:	6922      	ldr	r2, [r4, #16]
 8003f0a:	6022      	str	r2, [r4, #0]
 8003f0c:	d504      	bpl.n	8003f18 <__sflush_r+0x78>
 8003f0e:	1c42      	adds	r2, r0, #1
 8003f10:	d101      	bne.n	8003f16 <__sflush_r+0x76>
 8003f12:	682b      	ldr	r3, [r5, #0]
 8003f14:	b903      	cbnz	r3, 8003f18 <__sflush_r+0x78>
 8003f16:	6560      	str	r0, [r4, #84]	@ 0x54
 8003f18:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003f1a:	602f      	str	r7, [r5, #0]
 8003f1c:	b1b9      	cbz	r1, 8003f4e <__sflush_r+0xae>
 8003f1e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003f22:	4299      	cmp	r1, r3
 8003f24:	d002      	beq.n	8003f2c <__sflush_r+0x8c>
 8003f26:	4628      	mov	r0, r5
 8003f28:	f7ff feba 	bl	8003ca0 <_free_r>
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	6363      	str	r3, [r4, #52]	@ 0x34
 8003f30:	e00d      	b.n	8003f4e <__sflush_r+0xae>
 8003f32:	2301      	movs	r3, #1
 8003f34:	4628      	mov	r0, r5
 8003f36:	47b0      	blx	r6
 8003f38:	4602      	mov	r2, r0
 8003f3a:	1c50      	adds	r0, r2, #1
 8003f3c:	d1c9      	bne.n	8003ed2 <__sflush_r+0x32>
 8003f3e:	682b      	ldr	r3, [r5, #0]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d0c6      	beq.n	8003ed2 <__sflush_r+0x32>
 8003f44:	2b1d      	cmp	r3, #29
 8003f46:	d001      	beq.n	8003f4c <__sflush_r+0xac>
 8003f48:	2b16      	cmp	r3, #22
 8003f4a:	d11e      	bne.n	8003f8a <__sflush_r+0xea>
 8003f4c:	602f      	str	r7, [r5, #0]
 8003f4e:	2000      	movs	r0, #0
 8003f50:	e022      	b.n	8003f98 <__sflush_r+0xf8>
 8003f52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003f56:	b21b      	sxth	r3, r3
 8003f58:	e01b      	b.n	8003f92 <__sflush_r+0xf2>
 8003f5a:	690f      	ldr	r7, [r1, #16]
 8003f5c:	2f00      	cmp	r7, #0
 8003f5e:	d0f6      	beq.n	8003f4e <__sflush_r+0xae>
 8003f60:	0793      	lsls	r3, r2, #30
 8003f62:	680e      	ldr	r6, [r1, #0]
 8003f64:	bf08      	it	eq
 8003f66:	694b      	ldreq	r3, [r1, #20]
 8003f68:	600f      	str	r7, [r1, #0]
 8003f6a:	bf18      	it	ne
 8003f6c:	2300      	movne	r3, #0
 8003f6e:	eba6 0807 	sub.w	r8, r6, r7
 8003f72:	608b      	str	r3, [r1, #8]
 8003f74:	f1b8 0f00 	cmp.w	r8, #0
 8003f78:	dde9      	ble.n	8003f4e <__sflush_r+0xae>
 8003f7a:	6a21      	ldr	r1, [r4, #32]
 8003f7c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003f7e:	4643      	mov	r3, r8
 8003f80:	463a      	mov	r2, r7
 8003f82:	4628      	mov	r0, r5
 8003f84:	47b0      	blx	r6
 8003f86:	2800      	cmp	r0, #0
 8003f88:	dc08      	bgt.n	8003f9c <__sflush_r+0xfc>
 8003f8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003f92:	81a3      	strh	r3, [r4, #12]
 8003f94:	f04f 30ff 	mov.w	r0, #4294967295
 8003f98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f9c:	4407      	add	r7, r0
 8003f9e:	eba8 0800 	sub.w	r8, r8, r0
 8003fa2:	e7e7      	b.n	8003f74 <__sflush_r+0xd4>
 8003fa4:	dfbffffe 	.word	0xdfbffffe

08003fa8 <_fflush_r>:
 8003fa8:	b538      	push	{r3, r4, r5, lr}
 8003faa:	690b      	ldr	r3, [r1, #16]
 8003fac:	4605      	mov	r5, r0
 8003fae:	460c      	mov	r4, r1
 8003fb0:	b913      	cbnz	r3, 8003fb8 <_fflush_r+0x10>
 8003fb2:	2500      	movs	r5, #0
 8003fb4:	4628      	mov	r0, r5
 8003fb6:	bd38      	pop	{r3, r4, r5, pc}
 8003fb8:	b118      	cbz	r0, 8003fc2 <_fflush_r+0x1a>
 8003fba:	6a03      	ldr	r3, [r0, #32]
 8003fbc:	b90b      	cbnz	r3, 8003fc2 <_fflush_r+0x1a>
 8003fbe:	f7ff fcbd 	bl	800393c <__sinit>
 8003fc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d0f3      	beq.n	8003fb2 <_fflush_r+0xa>
 8003fca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003fcc:	07d0      	lsls	r0, r2, #31
 8003fce:	d404      	bmi.n	8003fda <_fflush_r+0x32>
 8003fd0:	0599      	lsls	r1, r3, #22
 8003fd2:	d402      	bmi.n	8003fda <_fflush_r+0x32>
 8003fd4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003fd6:	f7ff fe60 	bl	8003c9a <__retarget_lock_acquire_recursive>
 8003fda:	4628      	mov	r0, r5
 8003fdc:	4621      	mov	r1, r4
 8003fde:	f7ff ff5f 	bl	8003ea0 <__sflush_r>
 8003fe2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003fe4:	07da      	lsls	r2, r3, #31
 8003fe6:	4605      	mov	r5, r0
 8003fe8:	d4e4      	bmi.n	8003fb4 <_fflush_r+0xc>
 8003fea:	89a3      	ldrh	r3, [r4, #12]
 8003fec:	059b      	lsls	r3, r3, #22
 8003fee:	d4e1      	bmi.n	8003fb4 <_fflush_r+0xc>
 8003ff0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003ff2:	f7ff fe53 	bl	8003c9c <__retarget_lock_release_recursive>
 8003ff6:	e7dd      	b.n	8003fb4 <_fflush_r+0xc>

08003ff8 <__swhatbuf_r>:
 8003ff8:	b570      	push	{r4, r5, r6, lr}
 8003ffa:	460c      	mov	r4, r1
 8003ffc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004000:	2900      	cmp	r1, #0
 8004002:	b096      	sub	sp, #88	@ 0x58
 8004004:	4615      	mov	r5, r2
 8004006:	461e      	mov	r6, r3
 8004008:	da0d      	bge.n	8004026 <__swhatbuf_r+0x2e>
 800400a:	89a3      	ldrh	r3, [r4, #12]
 800400c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004010:	f04f 0100 	mov.w	r1, #0
 8004014:	bf14      	ite	ne
 8004016:	2340      	movne	r3, #64	@ 0x40
 8004018:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800401c:	2000      	movs	r0, #0
 800401e:	6031      	str	r1, [r6, #0]
 8004020:	602b      	str	r3, [r5, #0]
 8004022:	b016      	add	sp, #88	@ 0x58
 8004024:	bd70      	pop	{r4, r5, r6, pc}
 8004026:	466a      	mov	r2, sp
 8004028:	f000 f80c 	bl	8004044 <_fstat_r>
 800402c:	2800      	cmp	r0, #0
 800402e:	dbec      	blt.n	800400a <__swhatbuf_r+0x12>
 8004030:	9901      	ldr	r1, [sp, #4]
 8004032:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004036:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800403a:	4259      	negs	r1, r3
 800403c:	4159      	adcs	r1, r3
 800403e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004042:	e7eb      	b.n	800401c <__swhatbuf_r+0x24>

08004044 <_fstat_r>:
 8004044:	b538      	push	{r3, r4, r5, lr}
 8004046:	4d07      	ldr	r5, [pc, #28]	@ (8004064 <_fstat_r+0x20>)
 8004048:	2300      	movs	r3, #0
 800404a:	4604      	mov	r4, r0
 800404c:	4608      	mov	r0, r1
 800404e:	4611      	mov	r1, r2
 8004050:	602b      	str	r3, [r5, #0]
 8004052:	f7fc fbea 	bl	800082a <_fstat>
 8004056:	1c43      	adds	r3, r0, #1
 8004058:	d102      	bne.n	8004060 <_fstat_r+0x1c>
 800405a:	682b      	ldr	r3, [r5, #0]
 800405c:	b103      	cbz	r3, 8004060 <_fstat_r+0x1c>
 800405e:	6023      	str	r3, [r4, #0]
 8004060:	bd38      	pop	{r3, r4, r5, pc}
 8004062:	bf00      	nop
 8004064:	200002d4 	.word	0x200002d4

08004068 <_sbrk_r>:
 8004068:	b538      	push	{r3, r4, r5, lr}
 800406a:	4d06      	ldr	r5, [pc, #24]	@ (8004084 <_sbrk_r+0x1c>)
 800406c:	2300      	movs	r3, #0
 800406e:	4604      	mov	r4, r0
 8004070:	4608      	mov	r0, r1
 8004072:	602b      	str	r3, [r5, #0]
 8004074:	f7fc fbf6 	bl	8000864 <_sbrk>
 8004078:	1c43      	adds	r3, r0, #1
 800407a:	d102      	bne.n	8004082 <_sbrk_r+0x1a>
 800407c:	682b      	ldr	r3, [r5, #0]
 800407e:	b103      	cbz	r3, 8004082 <_sbrk_r+0x1a>
 8004080:	6023      	str	r3, [r4, #0]
 8004082:	bd38      	pop	{r3, r4, r5, pc}
 8004084:	200002d4 	.word	0x200002d4

08004088 <_init>:
 8004088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800408a:	bf00      	nop
 800408c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800408e:	bc08      	pop	{r3}
 8004090:	469e      	mov	lr, r3
 8004092:	4770      	bx	lr

08004094 <_fini>:
 8004094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004096:	bf00      	nop
 8004098:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800409a:	bc08      	pop	{r3}
 800409c:	469e      	mov	lr, r3
 800409e:	4770      	bx	lr
