
F3_CAN_test_ver.3.0.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034d8  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003660  08003660  00004660  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003698  08003698  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  08003698  08003698  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003698  08003698  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003698  08003698  00004698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800369c  0800369c  0000469c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080036a0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000500c  2**0
                  CONTENTS
 10 .bss          0000012c  2000000c  2000000c  0000500c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000138  20000138  0000500c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009e37  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000015ca  00000000  00000000  0000ee73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000768  00000000  00000000  00010440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005ac  00000000  00000000  00010ba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019d3e  00000000  00000000  00011154  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009905  00000000  00000000  0002ae92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009956e  00000000  00000000  00034797  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000cdd05  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001dbc  00000000  00000000  000cdd48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000069  00000000  00000000  000cfb04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003648 	.word	0x08003648

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003648 	.word	0x08003648

080001c8 <HAL_CAN_RxFifo0MsgPendingCallback>:
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_CAN_Init(void);
/* USER CODE BEGIN PFP */

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b08c      	sub	sp, #48	@ 0x30
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t RxData[8];
	if(HAL_CAN_GetRxMessage(hcan,CAN_RX_FIFO0,&RxHeader,RxData)==HAL_OK){
 80001d0:	f107 0308 	add.w	r3, r7, #8
 80001d4:	f107 0210 	add.w	r2, r7, #16
 80001d8:	2100      	movs	r1, #0
 80001da:	6878      	ldr	r0, [r7, #4]
 80001dc:	f000 fe0e 	bl	8000dfc <HAL_CAN_GetRxMessage>
 80001e0:	4603      	mov	r3, r0
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	d121      	bne.n	800022a <HAL_CAN_RxFifo0MsgPendingCallback+0x62>
		id  = (RxHeader.IDE == CAN_ID_STD)? RxHeader.StdId : RxHeader.ExtId;
 80001e6:	69bb      	ldr	r3, [r7, #24]
 80001e8:	2b00      	cmp	r3, #0
 80001ea:	d101      	bne.n	80001f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>
 80001ec:	693b      	ldr	r3, [r7, #16]
 80001ee:	e000      	b.n	80001f2 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a>
 80001f0:	697b      	ldr	r3, [r7, #20]
 80001f2:	4a10      	ldr	r2, [pc, #64]	@ (8000234 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 80001f4:	6013      	str	r3, [r2, #0]
		dlc = RxHeader.DLC;
 80001f6:	6a3b      	ldr	r3, [r7, #32]
 80001f8:	4a0f      	ldr	r2, [pc, #60]	@ (8000238 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 80001fa:	6013      	str	r3, [r2, #0]
		for(uint8_t i = 0 ; i < 8 ; i ++ ){
 80001fc:	2300      	movs	r3, #0
 80001fe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000202:	e00e      	b.n	8000222 <HAL_CAN_RxFifo0MsgPendingCallback+0x5a>
			data[i] = RxData[i];
 8000204:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8000208:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800020c:	3230      	adds	r2, #48	@ 0x30
 800020e:	443a      	add	r2, r7
 8000210:	f812 1c28 	ldrb.w	r1, [r2, #-40]
 8000214:	4a09      	ldr	r2, [pc, #36]	@ (800023c <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8000216:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i = 0 ; i < 8 ; i ++ ){
 8000218:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800021c:	3301      	adds	r3, #1
 800021e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000222:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000226:	2b07      	cmp	r3, #7
 8000228:	d9ec      	bls.n	8000204 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>
		}
	}
}
 800022a:	bf00      	nop
 800022c:	3730      	adds	r7, #48	@ 0x30
 800022e:	46bd      	mov	sp, r7
 8000230:	bd80      	pop	{r7, pc}
 8000232:	bf00      	nop
 8000234:	20000124 	.word	0x20000124
 8000238:	20000128 	.word	0x20000128
 800023c:	2000012c 	.word	0x2000012c

08000240 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000244:	f000 fa66 	bl	8000714 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000248:	f000 f86e 	bl	8000328 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800024c:	f000 f90e 	bl	800046c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000250:	f000 f8dc 	bl	800040c <MX_USART2_UART_Init>
  MX_CAN_Init();
 8000254:	f000 f8a4 	bl	80003a0 <MX_CAN_Init>
  /* USER CODE BEGIN 2 */
  filter.FilterIdHigh = 0;
 8000258:	4b2e      	ldr	r3, [pc, #184]	@ (8000314 <main+0xd4>)
 800025a:	2200      	movs	r2, #0
 800025c:	601a      	str	r2, [r3, #0]
  filter.FilterIdLow = 0;
 800025e:	4b2d      	ldr	r3, [pc, #180]	@ (8000314 <main+0xd4>)
 8000260:	2200      	movs	r2, #0
 8000262:	605a      	str	r2, [r3, #4]
  filter.FilterMaskIdHigh = 0;
 8000264:	4b2b      	ldr	r3, [pc, #172]	@ (8000314 <main+0xd4>)
 8000266:	2200      	movs	r2, #0
 8000268:	609a      	str	r2, [r3, #8]
  filter.FilterMaskIdLow = 0;
 800026a:	4b2a      	ldr	r3, [pc, #168]	@ (8000314 <main+0xd4>)
 800026c:	2200      	movs	r2, #0
 800026e:	60da      	str	r2, [r3, #12]
  filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8000270:	4b28      	ldr	r3, [pc, #160]	@ (8000314 <main+0xd4>)
 8000272:	2201      	movs	r2, #1
 8000274:	61da      	str	r2, [r3, #28]
  filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000276:	4b27      	ldr	r3, [pc, #156]	@ (8000314 <main+0xd4>)
 8000278:	2200      	movs	r2, #0
 800027a:	611a      	str	r2, [r3, #16]
  filter.FilterBank = 0;
 800027c:	4b25      	ldr	r3, [pc, #148]	@ (8000314 <main+0xd4>)
 800027e:	2200      	movs	r2, #0
 8000280:	615a      	str	r2, [r3, #20]
  filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8000282:	4b24      	ldr	r3, [pc, #144]	@ (8000314 <main+0xd4>)
 8000284:	2200      	movs	r2, #0
 8000286:	619a      	str	r2, [r3, #24]
  filter.SlaveStartFilterBank = 14;
 8000288:	4b22      	ldr	r3, [pc, #136]	@ (8000314 <main+0xd4>)
 800028a:	220e      	movs	r2, #14
 800028c:	625a      	str	r2, [r3, #36]	@ 0x24
  filter.FilterActivation = ENABLE;
 800028e:	4b21      	ldr	r3, [pc, #132]	@ (8000314 <main+0xd4>)
 8000290:	2201      	movs	r2, #1
 8000292:	621a      	str	r2, [r3, #32]
  HAL_CAN_ConfigFilter(&hcan,&filter);
 8000294:	491f      	ldr	r1, [pc, #124]	@ (8000314 <main+0xd4>)
 8000296:	4820      	ldr	r0, [pc, #128]	@ (8000318 <main+0xd8>)
 8000298:	f000 fb9d 	bl	80009d6 <HAL_CAN_ConfigFilter>

  HAL_CAN_Start(&hcan);
 800029c:	481e      	ldr	r0, [pc, #120]	@ (8000318 <main+0xd8>)
 800029e:	f000 fc64 	bl	8000b6a <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 80002a2:	2102      	movs	r1, #2
 80002a4:	481c      	ldr	r0, [pc, #112]	@ (8000318 <main+0xd8>)
 80002a6:	f000 fecb 	bl	8001040 <HAL_CAN_ActivateNotification>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(0<HAL_CAN_GetTxMailboxesFreeLevel(&hcan)){
 80002aa:	481b      	ldr	r0, [pc, #108]	@ (8000318 <main+0xd8>)
 80002ac:	f000 fd71 	bl	8000d92 <HAL_CAN_GetTxMailboxesFreeLevel>
 80002b0:	4603      	mov	r3, r0
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d0f9      	beq.n	80002aa <main+0x6a>
		  TxHeader.StdId = 0x201;
 80002b6:	4b19      	ldr	r3, [pc, #100]	@ (800031c <main+0xdc>)
 80002b8:	f240 2201 	movw	r2, #513	@ 0x201
 80002bc:	601a      	str	r2, [r3, #0]
		  TxHeader.RTR = CAN_RTR_DATA;
 80002be:	4b17      	ldr	r3, [pc, #92]	@ (800031c <main+0xdc>)
 80002c0:	2200      	movs	r2, #0
 80002c2:	60da      	str	r2, [r3, #12]
		  TxHeader.IDE = CAN_ID_STD;
 80002c4:	4b15      	ldr	r3, [pc, #84]	@ (800031c <main+0xdc>)
 80002c6:	2200      	movs	r2, #0
 80002c8:	609a      	str	r2, [r3, #8]
		  TxHeader.DLC = 8;
 80002ca:	4b14      	ldr	r3, [pc, #80]	@ (800031c <main+0xdc>)
 80002cc:	2208      	movs	r2, #8
 80002ce:	611a      	str	r2, [r3, #16]
		  TxHeader.TransmitGlobalTime = DISABLE;
 80002d0:	4b12      	ldr	r3, [pc, #72]	@ (800031c <main+0xdc>)
 80002d2:	2200      	movs	r2, #0
 80002d4:	751a      	strb	r2, [r3, #20]
		  TxData[0] = 0x001;
 80002d6:	4b12      	ldr	r3, [pc, #72]	@ (8000320 <main+0xe0>)
 80002d8:	2201      	movs	r2, #1
 80002da:	701a      	strb	r2, [r3, #0]
		  TxData[1] = 0x001;
 80002dc:	4b10      	ldr	r3, [pc, #64]	@ (8000320 <main+0xe0>)
 80002de:	2201      	movs	r2, #1
 80002e0:	705a      	strb	r2, [r3, #1]
		  TxData[2] = 0x001;
 80002e2:	4b0f      	ldr	r3, [pc, #60]	@ (8000320 <main+0xe0>)
 80002e4:	2201      	movs	r2, #1
 80002e6:	709a      	strb	r2, [r3, #2]
		  TxData[3] = 0x01;
 80002e8:	4b0d      	ldr	r3, [pc, #52]	@ (8000320 <main+0xe0>)
 80002ea:	2201      	movs	r2, #1
 80002ec:	70da      	strb	r2, [r3, #3]
		  TxData[4] = 0x01;
 80002ee:	4b0c      	ldr	r3, [pc, #48]	@ (8000320 <main+0xe0>)
 80002f0:	2201      	movs	r2, #1
 80002f2:	711a      	strb	r2, [r3, #4]
		  TxData[5] = 0x01;
 80002f4:	4b0a      	ldr	r3, [pc, #40]	@ (8000320 <main+0xe0>)
 80002f6:	2201      	movs	r2, #1
 80002f8:	715a      	strb	r2, [r3, #5]
		  TxData[6] = 0x1;
 80002fa:	4b09      	ldr	r3, [pc, #36]	@ (8000320 <main+0xe0>)
 80002fc:	2201      	movs	r2, #1
 80002fe:	719a      	strb	r2, [r3, #6]
		  TxData[7] = 0x1;
 8000300:	4b07      	ldr	r3, [pc, #28]	@ (8000320 <main+0xe0>)
 8000302:	2201      	movs	r2, #1
 8000304:	71da      	strb	r2, [r3, #7]

		  HAL_CAN_AddTxMessage(&hcan,&TxHeader,TxData,&TxMailbox);
 8000306:	4b07      	ldr	r3, [pc, #28]	@ (8000324 <main+0xe4>)
 8000308:	4a05      	ldr	r2, [pc, #20]	@ (8000320 <main+0xe0>)
 800030a:	4904      	ldr	r1, [pc, #16]	@ (800031c <main+0xdc>)
 800030c:	4802      	ldr	r0, [pc, #8]	@ (8000318 <main+0xd8>)
 800030e:	f000 fc70 	bl	8000bf2 <HAL_CAN_AddTxMessage>
	  if(0<HAL_CAN_GetTxMailboxesFreeLevel(&hcan)){
 8000312:	e7ca      	b.n	80002aa <main+0x6a>
 8000314:	20000040 	.word	0x20000040
 8000318:	20000068 	.word	0x20000068
 800031c:	20000028 	.word	0x20000028
 8000320:	2000011c 	.word	0x2000011c
 8000324:	20000118 	.word	0x20000118

08000328 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b090      	sub	sp, #64	@ 0x40
 800032c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800032e:	f107 0318 	add.w	r3, r7, #24
 8000332:	2228      	movs	r2, #40	@ 0x28
 8000334:	2100      	movs	r1, #0
 8000336:	4618      	mov	r0, r3
 8000338:	f003 f959 	bl	80035ee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800033c:	1d3b      	adds	r3, r7, #4
 800033e:	2200      	movs	r2, #0
 8000340:	601a      	str	r2, [r3, #0]
 8000342:	605a      	str	r2, [r3, #4]
 8000344:	609a      	str	r2, [r3, #8]
 8000346:	60da      	str	r2, [r3, #12]
 8000348:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800034a:	2302      	movs	r3, #2
 800034c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800034e:	2301      	movs	r3, #1
 8000350:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000352:	2310      	movs	r3, #16
 8000354:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000356:	2300      	movs	r3, #0
 8000358:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800035a:	f107 0318 	add.w	r3, r7, #24
 800035e:	4618      	mov	r0, r3
 8000360:	f001 fb48 	bl	80019f4 <HAL_RCC_OscConfig>
 8000364:	4603      	mov	r3, r0
 8000366:	2b00      	cmp	r3, #0
 8000368:	d001      	beq.n	800036e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800036a:	f000 f8a3 	bl	80004b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800036e:	230f      	movs	r3, #15
 8000370:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000372:	2300      	movs	r3, #0
 8000374:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000376:	2300      	movs	r3, #0
 8000378:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800037a:	2300      	movs	r3, #0
 800037c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800037e:	2300      	movs	r3, #0
 8000380:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000382:	1d3b      	adds	r3, r7, #4
 8000384:	2100      	movs	r1, #0
 8000386:	4618      	mov	r0, r3
 8000388:	f002 fb72 	bl	8002a70 <HAL_RCC_ClockConfig>
 800038c:	4603      	mov	r3, r0
 800038e:	2b00      	cmp	r3, #0
 8000390:	d001      	beq.n	8000396 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000392:	f000 f88f 	bl	80004b4 <Error_Handler>
  }
}
 8000396:	bf00      	nop
 8000398:	3740      	adds	r7, #64	@ 0x40
 800039a:	46bd      	mov	sp, r7
 800039c:	bd80      	pop	{r7, pc}
	...

080003a0 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80003a4:	4b17      	ldr	r3, [pc, #92]	@ (8000404 <MX_CAN_Init+0x64>)
 80003a6:	4a18      	ldr	r2, [pc, #96]	@ (8000408 <MX_CAN_Init+0x68>)
 80003a8:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 1;
 80003aa:	4b16      	ldr	r3, [pc, #88]	@ (8000404 <MX_CAN_Init+0x64>)
 80003ac:	2201      	movs	r2, #1
 80003ae:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80003b0:	4b14      	ldr	r3, [pc, #80]	@ (8000404 <MX_CAN_Init+0x64>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80003b6:	4b13      	ldr	r3, [pc, #76]	@ (8000404 <MX_CAN_Init+0x64>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_12TQ;
 80003bc:	4b11      	ldr	r3, [pc, #68]	@ (8000404 <MX_CAN_Init+0x64>)
 80003be:	f44f 2230 	mov.w	r2, #720896	@ 0xb0000
 80003c2:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 80003c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000404 <MX_CAN_Init+0x64>)
 80003c6:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80003ca:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80003cc:	4b0d      	ldr	r3, [pc, #52]	@ (8000404 <MX_CAN_Init+0x64>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80003d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000404 <MX_CAN_Init+0x64>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80003d8:	4b0a      	ldr	r3, [pc, #40]	@ (8000404 <MX_CAN_Init+0x64>)
 80003da:	2200      	movs	r2, #0
 80003dc:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80003de:	4b09      	ldr	r3, [pc, #36]	@ (8000404 <MX_CAN_Init+0x64>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80003e4:	4b07      	ldr	r3, [pc, #28]	@ (8000404 <MX_CAN_Init+0x64>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80003ea:	4b06      	ldr	r3, [pc, #24]	@ (8000404 <MX_CAN_Init+0x64>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80003f0:	4804      	ldr	r0, [pc, #16]	@ (8000404 <MX_CAN_Init+0x64>)
 80003f2:	f000 f9f5 	bl	80007e0 <HAL_CAN_Init>
 80003f6:	4603      	mov	r3, r0
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d001      	beq.n	8000400 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80003fc:	f000 f85a 	bl	80004b4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000400:	bf00      	nop
 8000402:	bd80      	pop	{r7, pc}
 8000404:	20000068 	.word	0x20000068
 8000408:	40006400 	.word	0x40006400

0800040c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000410:	4b14      	ldr	r3, [pc, #80]	@ (8000464 <MX_USART2_UART_Init+0x58>)
 8000412:	4a15      	ldr	r2, [pc, #84]	@ (8000468 <MX_USART2_UART_Init+0x5c>)
 8000414:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000416:	4b13      	ldr	r3, [pc, #76]	@ (8000464 <MX_USART2_UART_Init+0x58>)
 8000418:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 800041c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800041e:	4b11      	ldr	r3, [pc, #68]	@ (8000464 <MX_USART2_UART_Init+0x58>)
 8000420:	2200      	movs	r2, #0
 8000422:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000424:	4b0f      	ldr	r3, [pc, #60]	@ (8000464 <MX_USART2_UART_Init+0x58>)
 8000426:	2200      	movs	r2, #0
 8000428:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800042a:	4b0e      	ldr	r3, [pc, #56]	@ (8000464 <MX_USART2_UART_Init+0x58>)
 800042c:	2200      	movs	r2, #0
 800042e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000430:	4b0c      	ldr	r3, [pc, #48]	@ (8000464 <MX_USART2_UART_Init+0x58>)
 8000432:	220c      	movs	r2, #12
 8000434:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000436:	4b0b      	ldr	r3, [pc, #44]	@ (8000464 <MX_USART2_UART_Init+0x58>)
 8000438:	2200      	movs	r2, #0
 800043a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800043c:	4b09      	ldr	r3, [pc, #36]	@ (8000464 <MX_USART2_UART_Init+0x58>)
 800043e:	2200      	movs	r2, #0
 8000440:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000442:	4b08      	ldr	r3, [pc, #32]	@ (8000464 <MX_USART2_UART_Init+0x58>)
 8000444:	2200      	movs	r2, #0
 8000446:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000448:	4b06      	ldr	r3, [pc, #24]	@ (8000464 <MX_USART2_UART_Init+0x58>)
 800044a:	2200      	movs	r2, #0
 800044c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800044e:	4805      	ldr	r0, [pc, #20]	@ (8000464 <MX_USART2_UART_Init+0x58>)
 8000450:	f002 fd2e 	bl	8002eb0 <HAL_UART_Init>
 8000454:	4603      	mov	r3, r0
 8000456:	2b00      	cmp	r3, #0
 8000458:	d001      	beq.n	800045e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800045a:	f000 f82b 	bl	80004b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800045e:	bf00      	nop
 8000460:	bd80      	pop	{r7, pc}
 8000462:	bf00      	nop
 8000464:	20000090 	.word	0x20000090
 8000468:	40004400 	.word	0x40004400

0800046c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800046c:	b480      	push	{r7}
 800046e:	b083      	sub	sp, #12
 8000470:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000472:	4b0f      	ldr	r3, [pc, #60]	@ (80004b0 <MX_GPIO_Init+0x44>)
 8000474:	695b      	ldr	r3, [r3, #20]
 8000476:	4a0e      	ldr	r2, [pc, #56]	@ (80004b0 <MX_GPIO_Init+0x44>)
 8000478:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800047c:	6153      	str	r3, [r2, #20]
 800047e:	4b0c      	ldr	r3, [pc, #48]	@ (80004b0 <MX_GPIO_Init+0x44>)
 8000480:	695b      	ldr	r3, [r3, #20]
 8000482:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000486:	607b      	str	r3, [r7, #4]
 8000488:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800048a:	4b09      	ldr	r3, [pc, #36]	@ (80004b0 <MX_GPIO_Init+0x44>)
 800048c:	695b      	ldr	r3, [r3, #20]
 800048e:	4a08      	ldr	r2, [pc, #32]	@ (80004b0 <MX_GPIO_Init+0x44>)
 8000490:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000494:	6153      	str	r3, [r2, #20]
 8000496:	4b06      	ldr	r3, [pc, #24]	@ (80004b0 <MX_GPIO_Init+0x44>)
 8000498:	695b      	ldr	r3, [r3, #20]
 800049a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800049e:	603b      	str	r3, [r7, #0]
 80004a0:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004a2:	bf00      	nop
 80004a4:	370c      	adds	r7, #12
 80004a6:	46bd      	mov	sp, r7
 80004a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ac:	4770      	bx	lr
 80004ae:	bf00      	nop
 80004b0:	40021000 	.word	0x40021000

080004b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004b4:	b480      	push	{r7}
 80004b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004b8:	b672      	cpsid	i
}
 80004ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004bc:	bf00      	nop
 80004be:	e7fd      	b.n	80004bc <Error_Handler+0x8>

080004c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004c0:	b480      	push	{r7}
 80004c2:	b083      	sub	sp, #12
 80004c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004c6:	4b0f      	ldr	r3, [pc, #60]	@ (8000504 <HAL_MspInit+0x44>)
 80004c8:	699b      	ldr	r3, [r3, #24]
 80004ca:	4a0e      	ldr	r2, [pc, #56]	@ (8000504 <HAL_MspInit+0x44>)
 80004cc:	f043 0301 	orr.w	r3, r3, #1
 80004d0:	6193      	str	r3, [r2, #24]
 80004d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000504 <HAL_MspInit+0x44>)
 80004d4:	699b      	ldr	r3, [r3, #24]
 80004d6:	f003 0301 	and.w	r3, r3, #1
 80004da:	607b      	str	r3, [r7, #4]
 80004dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004de:	4b09      	ldr	r3, [pc, #36]	@ (8000504 <HAL_MspInit+0x44>)
 80004e0:	69db      	ldr	r3, [r3, #28]
 80004e2:	4a08      	ldr	r2, [pc, #32]	@ (8000504 <HAL_MspInit+0x44>)
 80004e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80004e8:	61d3      	str	r3, [r2, #28]
 80004ea:	4b06      	ldr	r3, [pc, #24]	@ (8000504 <HAL_MspInit+0x44>)
 80004ec:	69db      	ldr	r3, [r3, #28]
 80004ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80004f2:	603b      	str	r3, [r7, #0]
 80004f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004f6:	bf00      	nop
 80004f8:	370c      	adds	r7, #12
 80004fa:	46bd      	mov	sp, r7
 80004fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop
 8000504:	40021000 	.word	0x40021000

08000508 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b08a      	sub	sp, #40	@ 0x28
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000510:	f107 0314 	add.w	r3, r7, #20
 8000514:	2200      	movs	r2, #0
 8000516:	601a      	str	r2, [r3, #0]
 8000518:	605a      	str	r2, [r3, #4]
 800051a:	609a      	str	r2, [r3, #8]
 800051c:	60da      	str	r2, [r3, #12]
 800051e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a1c      	ldr	r2, [pc, #112]	@ (8000598 <HAL_CAN_MspInit+0x90>)
 8000526:	4293      	cmp	r3, r2
 8000528:	d131      	bne.n	800058e <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800052a:	4b1c      	ldr	r3, [pc, #112]	@ (800059c <HAL_CAN_MspInit+0x94>)
 800052c:	69db      	ldr	r3, [r3, #28]
 800052e:	4a1b      	ldr	r2, [pc, #108]	@ (800059c <HAL_CAN_MspInit+0x94>)
 8000530:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000534:	61d3      	str	r3, [r2, #28]
 8000536:	4b19      	ldr	r3, [pc, #100]	@ (800059c <HAL_CAN_MspInit+0x94>)
 8000538:	69db      	ldr	r3, [r3, #28]
 800053a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800053e:	613b      	str	r3, [r7, #16]
 8000540:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000542:	4b16      	ldr	r3, [pc, #88]	@ (800059c <HAL_CAN_MspInit+0x94>)
 8000544:	695b      	ldr	r3, [r3, #20]
 8000546:	4a15      	ldr	r2, [pc, #84]	@ (800059c <HAL_CAN_MspInit+0x94>)
 8000548:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800054c:	6153      	str	r3, [r2, #20]
 800054e:	4b13      	ldr	r3, [pc, #76]	@ (800059c <HAL_CAN_MspInit+0x94>)
 8000550:	695b      	ldr	r3, [r3, #20]
 8000552:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000556:	60fb      	str	r3, [r7, #12]
 8000558:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800055a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800055e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000560:	2302      	movs	r3, #2
 8000562:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000564:	2300      	movs	r3, #0
 8000566:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000568:	2303      	movs	r3, #3
 800056a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 800056c:	2309      	movs	r3, #9
 800056e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000570:	f107 0314 	add.w	r3, r7, #20
 8000574:	4619      	mov	r1, r3
 8000576:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800057a:	f001 f8c9 	bl	8001710 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CAN_RX0_IRQn, 0, 0);
 800057e:	2200      	movs	r2, #0
 8000580:	2100      	movs	r1, #0
 8000582:	2014      	movs	r0, #20
 8000584:	f001 f88d 	bl	80016a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX0_IRQn);
 8000588:	2014      	movs	r0, #20
 800058a:	f001 f8a6 	bl	80016da <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN_MspInit 1 */

  }

}
 800058e:	bf00      	nop
 8000590:	3728      	adds	r7, #40	@ 0x28
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	40006400 	.word	0x40006400
 800059c:	40021000 	.word	0x40021000

080005a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b08a      	sub	sp, #40	@ 0x28
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a8:	f107 0314 	add.w	r3, r7, #20
 80005ac:	2200      	movs	r2, #0
 80005ae:	601a      	str	r2, [r3, #0]
 80005b0:	605a      	str	r2, [r3, #4]
 80005b2:	609a      	str	r2, [r3, #8]
 80005b4:	60da      	str	r2, [r3, #12]
 80005b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a18      	ldr	r2, [pc, #96]	@ (8000620 <HAL_UART_MspInit+0x80>)
 80005be:	4293      	cmp	r3, r2
 80005c0:	d129      	bne.n	8000616 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80005c2:	4b18      	ldr	r3, [pc, #96]	@ (8000624 <HAL_UART_MspInit+0x84>)
 80005c4:	69db      	ldr	r3, [r3, #28]
 80005c6:	4a17      	ldr	r2, [pc, #92]	@ (8000624 <HAL_UART_MspInit+0x84>)
 80005c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80005cc:	61d3      	str	r3, [r2, #28]
 80005ce:	4b15      	ldr	r3, [pc, #84]	@ (8000624 <HAL_UART_MspInit+0x84>)
 80005d0:	69db      	ldr	r3, [r3, #28]
 80005d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80005d6:	613b      	str	r3, [r7, #16]
 80005d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005da:	4b12      	ldr	r3, [pc, #72]	@ (8000624 <HAL_UART_MspInit+0x84>)
 80005dc:	695b      	ldr	r3, [r3, #20]
 80005de:	4a11      	ldr	r2, [pc, #68]	@ (8000624 <HAL_UART_MspInit+0x84>)
 80005e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80005e4:	6153      	str	r3, [r2, #20]
 80005e6:	4b0f      	ldr	r3, [pc, #60]	@ (8000624 <HAL_UART_MspInit+0x84>)
 80005e8:	695b      	ldr	r3, [r3, #20]
 80005ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80005ee:	60fb      	str	r3, [r7, #12]
 80005f0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 80005f2:	f248 0304 	movw	r3, #32772	@ 0x8004
 80005f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005f8:	2302      	movs	r3, #2
 80005fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fc:	2300      	movs	r3, #0
 80005fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000600:	2303      	movs	r3, #3
 8000602:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000604:	2307      	movs	r3, #7
 8000606:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000608:	f107 0314 	add.w	r3, r7, #20
 800060c:	4619      	mov	r1, r3
 800060e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000612:	f001 f87d 	bl	8001710 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000616:	bf00      	nop
 8000618:	3728      	adds	r7, #40	@ 0x28
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	40004400 	.word	0x40004400
 8000624:	40021000 	.word	0x40021000

08000628 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800062c:	bf00      	nop
 800062e:	e7fd      	b.n	800062c <NMI_Handler+0x4>

08000630 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000634:	bf00      	nop
 8000636:	e7fd      	b.n	8000634 <HardFault_Handler+0x4>

08000638 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800063c:	bf00      	nop
 800063e:	e7fd      	b.n	800063c <MemManage_Handler+0x4>

08000640 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000644:	bf00      	nop
 8000646:	e7fd      	b.n	8000644 <BusFault_Handler+0x4>

08000648 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800064c:	bf00      	nop
 800064e:	e7fd      	b.n	800064c <UsageFault_Handler+0x4>

08000650 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000654:	bf00      	nop
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr

0800065e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800065e:	b480      	push	{r7}
 8000660:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000662:	bf00      	nop
 8000664:	46bd      	mov	sp, r7
 8000666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066a:	4770      	bx	lr

0800066c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000670:	bf00      	nop
 8000672:	46bd      	mov	sp, r7
 8000674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000678:	4770      	bx	lr

0800067a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800067a:	b580      	push	{r7, lr}
 800067c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800067e:	f000 f88f 	bl	80007a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000682:	bf00      	nop
 8000684:	bd80      	pop	{r7, pc}
	...

08000688 <CAN_RX0_IRQHandler>:

/**
  * @brief This function handles CAN RX0 interrupt.
  */
void CAN_RX0_IRQHandler(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX0_IRQn 0 */

  /* USER CODE END CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800068c:	4802      	ldr	r0, [pc, #8]	@ (8000698 <CAN_RX0_IRQHandler+0x10>)
 800068e:	f000 fcfd 	bl	800108c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX0_IRQn 1 */

  /* USER CODE END CAN_RX0_IRQn 1 */
}
 8000692:	bf00      	nop
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	20000068 	.word	0x20000068

0800069c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006a0:	4b06      	ldr	r3, [pc, #24]	@ (80006bc <SystemInit+0x20>)
 80006a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80006a6:	4a05      	ldr	r2, [pc, #20]	@ (80006bc <SystemInit+0x20>)
 80006a8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80006ac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006b0:	bf00      	nop
 80006b2:	46bd      	mov	sp, r7
 80006b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop
 80006bc:	e000ed00 	.word	0xe000ed00

080006c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80006c0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80006f8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80006c4:	f7ff ffea 	bl	800069c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006c8:	480c      	ldr	r0, [pc, #48]	@ (80006fc <LoopForever+0x6>)
  ldr r1, =_edata
 80006ca:	490d      	ldr	r1, [pc, #52]	@ (8000700 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006cc:	4a0d      	ldr	r2, [pc, #52]	@ (8000704 <LoopForever+0xe>)
  movs r3, #0
 80006ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006d0:	e002      	b.n	80006d8 <LoopCopyDataInit>

080006d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006d6:	3304      	adds	r3, #4

080006d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006dc:	d3f9      	bcc.n	80006d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006de:	4a0a      	ldr	r2, [pc, #40]	@ (8000708 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006e0:	4c0a      	ldr	r4, [pc, #40]	@ (800070c <LoopForever+0x16>)
  movs r3, #0
 80006e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006e4:	e001      	b.n	80006ea <LoopFillZerobss>

080006e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006e8:	3204      	adds	r2, #4

080006ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006ec:	d3fb      	bcc.n	80006e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006ee:	f002 ff87 	bl	8003600 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80006f2:	f7ff fda5 	bl	8000240 <main>

080006f6 <LoopForever>:

LoopForever:
    b LoopForever
 80006f6:	e7fe      	b.n	80006f6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80006f8:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80006fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000700:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000704:	080036a0 	.word	0x080036a0
  ldr r2, =_sbss
 8000708:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800070c:	20000138 	.word	0x20000138

08000710 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000710:	e7fe      	b.n	8000710 <ADC1_2_IRQHandler>
	...

08000714 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000718:	4b08      	ldr	r3, [pc, #32]	@ (800073c <HAL_Init+0x28>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4a07      	ldr	r2, [pc, #28]	@ (800073c <HAL_Init+0x28>)
 800071e:	f043 0310 	orr.w	r3, r3, #16
 8000722:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000724:	2003      	movs	r0, #3
 8000726:	f000 ffb1 	bl	800168c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800072a:	2000      	movs	r0, #0
 800072c:	f000 f808 	bl	8000740 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000730:	f7ff fec6 	bl	80004c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000734:	2300      	movs	r3, #0
}
 8000736:	4618      	mov	r0, r3
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	40022000 	.word	0x40022000

08000740 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000748:	4b12      	ldr	r3, [pc, #72]	@ (8000794 <HAL_InitTick+0x54>)
 800074a:	681a      	ldr	r2, [r3, #0]
 800074c:	4b12      	ldr	r3, [pc, #72]	@ (8000798 <HAL_InitTick+0x58>)
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	4619      	mov	r1, r3
 8000752:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000756:	fbb3 f3f1 	udiv	r3, r3, r1
 800075a:	fbb2 f3f3 	udiv	r3, r2, r3
 800075e:	4618      	mov	r0, r3
 8000760:	f000 ffc9 	bl	80016f6 <HAL_SYSTICK_Config>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800076a:	2301      	movs	r3, #1
 800076c:	e00e      	b.n	800078c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	2b0f      	cmp	r3, #15
 8000772:	d80a      	bhi.n	800078a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000774:	2200      	movs	r2, #0
 8000776:	6879      	ldr	r1, [r7, #4]
 8000778:	f04f 30ff 	mov.w	r0, #4294967295
 800077c:	f000 ff91 	bl	80016a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000780:	4a06      	ldr	r2, [pc, #24]	@ (800079c <HAL_InitTick+0x5c>)
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000786:	2300      	movs	r3, #0
 8000788:	e000      	b.n	800078c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800078a:	2301      	movs	r3, #1
}
 800078c:	4618      	mov	r0, r3
 800078e:	3708      	adds	r7, #8
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	20000000 	.word	0x20000000
 8000798:	20000008 	.word	0x20000008
 800079c:	20000004 	.word	0x20000004

080007a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007a4:	4b06      	ldr	r3, [pc, #24]	@ (80007c0 <HAL_IncTick+0x20>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	461a      	mov	r2, r3
 80007aa:	4b06      	ldr	r3, [pc, #24]	@ (80007c4 <HAL_IncTick+0x24>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	4413      	add	r3, r2
 80007b0:	4a04      	ldr	r2, [pc, #16]	@ (80007c4 <HAL_IncTick+0x24>)
 80007b2:	6013      	str	r3, [r2, #0]
}
 80007b4:	bf00      	nop
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	20000008 	.word	0x20000008
 80007c4:	20000134 	.word	0x20000134

080007c8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  return uwTick;  
 80007cc:	4b03      	ldr	r3, [pc, #12]	@ (80007dc <HAL_GetTick+0x14>)
 80007ce:	681b      	ldr	r3, [r3, #0]
}
 80007d0:	4618      	mov	r0, r3
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	20000134 	.word	0x20000134

080007e0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b084      	sub	sp, #16
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d101      	bne.n	80007f2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80007ee:	2301      	movs	r3, #1
 80007f0:	e0ed      	b.n	80009ce <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d102      	bne.n	8000804 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80007fe:	6878      	ldr	r0, [r7, #4]
 8000800:	f7ff fe82 	bl	8000508 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	681a      	ldr	r2, [r3, #0]
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	f042 0201 	orr.w	r2, r2, #1
 8000812:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000814:	f7ff ffd8 	bl	80007c8 <HAL_GetTick>
 8000818:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800081a:	e012      	b.n	8000842 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800081c:	f7ff ffd4 	bl	80007c8 <HAL_GetTick>
 8000820:	4602      	mov	r2, r0
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	1ad3      	subs	r3, r2, r3
 8000826:	2b0a      	cmp	r3, #10
 8000828:	d90b      	bls.n	8000842 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800082e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	2205      	movs	r2, #5
 800083a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800083e:	2301      	movs	r3, #1
 8000840:	e0c5      	b.n	80009ce <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	685b      	ldr	r3, [r3, #4]
 8000848:	f003 0301 	and.w	r3, r3, #1
 800084c:	2b00      	cmp	r3, #0
 800084e:	d0e5      	beq.n	800081c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	681a      	ldr	r2, [r3, #0]
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	f022 0202 	bic.w	r2, r2, #2
 800085e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000860:	f7ff ffb2 	bl	80007c8 <HAL_GetTick>
 8000864:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000866:	e012      	b.n	800088e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000868:	f7ff ffae 	bl	80007c8 <HAL_GetTick>
 800086c:	4602      	mov	r2, r0
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	1ad3      	subs	r3, r2, r3
 8000872:	2b0a      	cmp	r3, #10
 8000874:	d90b      	bls.n	800088e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800087a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	2205      	movs	r2, #5
 8000886:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800088a:	2301      	movs	r3, #1
 800088c:	e09f      	b.n	80009ce <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	685b      	ldr	r3, [r3, #4]
 8000894:	f003 0302 	and.w	r3, r3, #2
 8000898:	2b00      	cmp	r3, #0
 800089a:	d1e5      	bne.n	8000868 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	7e1b      	ldrb	r3, [r3, #24]
 80008a0:	2b01      	cmp	r3, #1
 80008a2:	d108      	bne.n	80008b6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	681a      	ldr	r2, [r3, #0]
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80008b2:	601a      	str	r2, [r3, #0]
 80008b4:	e007      	b.n	80008c6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	681a      	ldr	r2, [r3, #0]
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80008c4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	7e5b      	ldrb	r3, [r3, #25]
 80008ca:	2b01      	cmp	r3, #1
 80008cc:	d108      	bne.n	80008e0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	681a      	ldr	r2, [r3, #0]
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80008dc:	601a      	str	r2, [r3, #0]
 80008de:	e007      	b.n	80008f0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	681a      	ldr	r2, [r3, #0]
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80008ee:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	7e9b      	ldrb	r3, [r3, #26]
 80008f4:	2b01      	cmp	r3, #1
 80008f6:	d108      	bne.n	800090a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	681a      	ldr	r2, [r3, #0]
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	f042 0220 	orr.w	r2, r2, #32
 8000906:	601a      	str	r2, [r3, #0]
 8000908:	e007      	b.n	800091a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	681a      	ldr	r2, [r3, #0]
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	f022 0220 	bic.w	r2, r2, #32
 8000918:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	7edb      	ldrb	r3, [r3, #27]
 800091e:	2b01      	cmp	r3, #1
 8000920:	d108      	bne.n	8000934 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	681a      	ldr	r2, [r3, #0]
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	f022 0210 	bic.w	r2, r2, #16
 8000930:	601a      	str	r2, [r3, #0]
 8000932:	e007      	b.n	8000944 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	681a      	ldr	r2, [r3, #0]
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	f042 0210 	orr.w	r2, r2, #16
 8000942:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	7f1b      	ldrb	r3, [r3, #28]
 8000948:	2b01      	cmp	r3, #1
 800094a:	d108      	bne.n	800095e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	681a      	ldr	r2, [r3, #0]
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	f042 0208 	orr.w	r2, r2, #8
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	e007      	b.n	800096e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	681a      	ldr	r2, [r3, #0]
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	f022 0208 	bic.w	r2, r2, #8
 800096c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	7f5b      	ldrb	r3, [r3, #29]
 8000972:	2b01      	cmp	r3, #1
 8000974:	d108      	bne.n	8000988 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	681a      	ldr	r2, [r3, #0]
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	f042 0204 	orr.w	r2, r2, #4
 8000984:	601a      	str	r2, [r3, #0]
 8000986:	e007      	b.n	8000998 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	681a      	ldr	r2, [r3, #0]
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	f022 0204 	bic.w	r2, r2, #4
 8000996:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	689a      	ldr	r2, [r3, #8]
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	68db      	ldr	r3, [r3, #12]
 80009a0:	431a      	orrs	r2, r3
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	691b      	ldr	r3, [r3, #16]
 80009a6:	431a      	orrs	r2, r3
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	695b      	ldr	r3, [r3, #20]
 80009ac:	ea42 0103 	orr.w	r1, r2, r3
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	685b      	ldr	r3, [r3, #4]
 80009b4:	1e5a      	subs	r2, r3, #1
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	430a      	orrs	r2, r1
 80009bc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	2200      	movs	r2, #0
 80009c2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	2201      	movs	r2, #1
 80009c8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80009cc:	2300      	movs	r3, #0
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	3710      	adds	r7, #16
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}

080009d6 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80009d6:	b480      	push	{r7}
 80009d8:	b087      	sub	sp, #28
 80009da:	af00      	add	r7, sp, #0
 80009dc:	6078      	str	r0, [r7, #4]
 80009de:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80009ec:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80009ee:	7cfb      	ldrb	r3, [r7, #19]
 80009f0:	2b01      	cmp	r3, #1
 80009f2:	d003      	beq.n	80009fc <HAL_CAN_ConfigFilter+0x26>
 80009f4:	7cfb      	ldrb	r3, [r7, #19]
 80009f6:	2b02      	cmp	r3, #2
 80009f8:	f040 80aa 	bne.w	8000b50 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80009fc:	697b      	ldr	r3, [r7, #20]
 80009fe:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000a02:	f043 0201 	orr.w	r2, r3, #1
 8000a06:	697b      	ldr	r3, [r7, #20]
 8000a08:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	695b      	ldr	r3, [r3, #20]
 8000a10:	f003 031f 	and.w	r3, r3, #31
 8000a14:	2201      	movs	r2, #1
 8000a16:	fa02 f303 	lsl.w	r3, r2, r3
 8000a1a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000a1c:	697b      	ldr	r3, [r7, #20]
 8000a1e:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	43db      	mvns	r3, r3
 8000a26:	401a      	ands	r2, r3
 8000a28:	697b      	ldr	r3, [r7, #20]
 8000a2a:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	69db      	ldr	r3, [r3, #28]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d123      	bne.n	8000a7e <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000a36:	697b      	ldr	r3, [r7, #20]
 8000a38:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	43db      	mvns	r3, r3
 8000a40:	401a      	ands	r2, r3
 8000a42:	697b      	ldr	r3, [r7, #20]
 8000a44:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	68db      	ldr	r3, [r3, #12]
 8000a4c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	685b      	ldr	r3, [r3, #4]
 8000a52:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000a54:	683a      	ldr	r2, [r7, #0]
 8000a56:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000a58:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000a5a:	697b      	ldr	r3, [r7, #20]
 8000a5c:	3248      	adds	r2, #72	@ 0x48
 8000a5e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	689b      	ldr	r3, [r3, #8]
 8000a66:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000a72:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000a74:	6979      	ldr	r1, [r7, #20]
 8000a76:	3348      	adds	r3, #72	@ 0x48
 8000a78:	00db      	lsls	r3, r3, #3
 8000a7a:	440b      	add	r3, r1
 8000a7c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	69db      	ldr	r3, [r3, #28]
 8000a82:	2b01      	cmp	r3, #1
 8000a84:	d122      	bne.n	8000acc <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000a86:	697b      	ldr	r3, [r7, #20]
 8000a88:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	431a      	orrs	r2, r3
 8000a90:	697b      	ldr	r3, [r7, #20]
 8000a92:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000aa2:	683a      	ldr	r2, [r7, #0]
 8000aa4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000aa6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	3248      	adds	r2, #72	@ 0x48
 8000aac:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	689b      	ldr	r3, [r3, #8]
 8000ab4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	68db      	ldr	r3, [r3, #12]
 8000aba:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000ac0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000ac2:	6979      	ldr	r1, [r7, #20]
 8000ac4:	3348      	adds	r3, #72	@ 0x48
 8000ac6:	00db      	lsls	r3, r3, #3
 8000ac8:	440b      	add	r3, r1
 8000aca:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	699b      	ldr	r3, [r3, #24]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d109      	bne.n	8000ae8 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000ad4:	697b      	ldr	r3, [r7, #20]
 8000ad6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	43db      	mvns	r3, r3
 8000ade:	401a      	ands	r2, r3
 8000ae0:	697b      	ldr	r3, [r7, #20]
 8000ae2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8000ae6:	e007      	b.n	8000af8 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	431a      	orrs	r2, r3
 8000af2:	697b      	ldr	r3, [r7, #20]
 8000af4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	691b      	ldr	r3, [r3, #16]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d109      	bne.n	8000b14 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	43db      	mvns	r3, r3
 8000b0a:	401a      	ands	r2, r3
 8000b0c:	697b      	ldr	r3, [r7, #20]
 8000b0e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8000b12:	e007      	b.n	8000b24 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	431a      	orrs	r2, r3
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	6a1b      	ldr	r3, [r3, #32]
 8000b28:	2b01      	cmp	r3, #1
 8000b2a:	d107      	bne.n	8000b3c <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	431a      	orrs	r2, r3
 8000b36:	697b      	ldr	r3, [r7, #20]
 8000b38:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000b42:	f023 0201 	bic.w	r2, r3, #1
 8000b46:	697b      	ldr	r3, [r7, #20]
 8000b48:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	e006      	b.n	8000b5e <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b54:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000b5c:	2301      	movs	r3, #1
  }
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	371c      	adds	r7, #28
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr

08000b6a <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000b6a:	b580      	push	{r7, lr}
 8000b6c:	b084      	sub	sp, #16
 8000b6e:	af00      	add	r7, sp, #0
 8000b70:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b78:	b2db      	uxtb	r3, r3
 8000b7a:	2b01      	cmp	r3, #1
 8000b7c:	d12e      	bne.n	8000bdc <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	2202      	movs	r2, #2
 8000b82:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	681a      	ldr	r2, [r3, #0]
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	f022 0201 	bic.w	r2, r2, #1
 8000b94:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000b96:	f7ff fe17 	bl	80007c8 <HAL_GetTick>
 8000b9a:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000b9c:	e012      	b.n	8000bc4 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000b9e:	f7ff fe13 	bl	80007c8 <HAL_GetTick>
 8000ba2:	4602      	mov	r2, r0
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	1ad3      	subs	r3, r2, r3
 8000ba8:	2b0a      	cmp	r3, #10
 8000baa:	d90b      	bls.n	8000bc4 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bb0:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	2205      	movs	r2, #5
 8000bbc:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	e012      	b.n	8000bea <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	f003 0301 	and.w	r3, r3, #1
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d1e5      	bne.n	8000b9e <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	e006      	b.n	8000bea <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000be0:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000be8:	2301      	movs	r3, #1
  }
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	3710      	adds	r7, #16
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}

08000bf2 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8000bf2:	b480      	push	{r7}
 8000bf4:	b089      	sub	sp, #36	@ 0x24
 8000bf6:	af00      	add	r7, sp, #0
 8000bf8:	60f8      	str	r0, [r7, #12]
 8000bfa:	60b9      	str	r1, [r7, #8]
 8000bfc:	607a      	str	r2, [r7, #4]
 8000bfe:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c06:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	689b      	ldr	r3, [r3, #8]
 8000c0e:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000c10:	7ffb      	ldrb	r3, [r7, #31]
 8000c12:	2b01      	cmp	r3, #1
 8000c14:	d003      	beq.n	8000c1e <HAL_CAN_AddTxMessage+0x2c>
 8000c16:	7ffb      	ldrb	r3, [r7, #31]
 8000c18:	2b02      	cmp	r3, #2
 8000c1a:	f040 80ad 	bne.w	8000d78 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000c1e:	69bb      	ldr	r3, [r7, #24]
 8000c20:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d10a      	bne.n	8000c3e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000c28:	69bb      	ldr	r3, [r7, #24]
 8000c2a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d105      	bne.n	8000c3e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000c32:	69bb      	ldr	r3, [r7, #24]
 8000c34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	f000 8095 	beq.w	8000d68 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000c3e:	69bb      	ldr	r3, [r7, #24]
 8000c40:	0e1b      	lsrs	r3, r3, #24
 8000c42:	f003 0303 	and.w	r3, r3, #3
 8000c46:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000c48:	2201      	movs	r2, #1
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	409a      	lsls	r2, r3
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000c52:	68bb      	ldr	r3, [r7, #8]
 8000c54:	689b      	ldr	r3, [r3, #8]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d10d      	bne.n	8000c76 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000c5a:	68bb      	ldr	r3, [r7, #8]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000c60:	68bb      	ldr	r3, [r7, #8]
 8000c62:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000c64:	68f9      	ldr	r1, [r7, #12]
 8000c66:	6809      	ldr	r1, [r1, #0]
 8000c68:	431a      	orrs	r2, r3
 8000c6a:	697b      	ldr	r3, [r7, #20]
 8000c6c:	3318      	adds	r3, #24
 8000c6e:	011b      	lsls	r3, r3, #4
 8000c70:	440b      	add	r3, r1
 8000c72:	601a      	str	r2, [r3, #0]
 8000c74:	e00f      	b.n	8000c96 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000c76:	68bb      	ldr	r3, [r7, #8]
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000c80:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000c82:	68bb      	ldr	r3, [r7, #8]
 8000c84:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000c86:	68f9      	ldr	r1, [r7, #12]
 8000c88:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000c8a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	3318      	adds	r3, #24
 8000c90:	011b      	lsls	r3, r3, #4
 8000c92:	440b      	add	r3, r1
 8000c94:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	6819      	ldr	r1, [r3, #0]
 8000c9a:	68bb      	ldr	r3, [r7, #8]
 8000c9c:	691a      	ldr	r2, [r3, #16]
 8000c9e:	697b      	ldr	r3, [r7, #20]
 8000ca0:	3318      	adds	r3, #24
 8000ca2:	011b      	lsls	r3, r3, #4
 8000ca4:	440b      	add	r3, r1
 8000ca6:	3304      	adds	r3, #4
 8000ca8:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000caa:	68bb      	ldr	r3, [r7, #8]
 8000cac:	7d1b      	ldrb	r3, [r3, #20]
 8000cae:	2b01      	cmp	r3, #1
 8000cb0:	d111      	bne.n	8000cd6 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	681a      	ldr	r2, [r3, #0]
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	3318      	adds	r3, #24
 8000cba:	011b      	lsls	r3, r3, #4
 8000cbc:	4413      	add	r3, r2
 8000cbe:	3304      	adds	r3, #4
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	68fa      	ldr	r2, [r7, #12]
 8000cc4:	6811      	ldr	r1, [r2, #0]
 8000cc6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000cca:	697b      	ldr	r3, [r7, #20]
 8000ccc:	3318      	adds	r3, #24
 8000cce:	011b      	lsls	r3, r3, #4
 8000cd0:	440b      	add	r3, r1
 8000cd2:	3304      	adds	r3, #4
 8000cd4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	3307      	adds	r3, #7
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	061a      	lsls	r2, r3, #24
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	3306      	adds	r3, #6
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	041b      	lsls	r3, r3, #16
 8000ce6:	431a      	orrs	r2, r3
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	3305      	adds	r3, #5
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	021b      	lsls	r3, r3, #8
 8000cf0:	4313      	orrs	r3, r2
 8000cf2:	687a      	ldr	r2, [r7, #4]
 8000cf4:	3204      	adds	r2, #4
 8000cf6:	7812      	ldrb	r2, [r2, #0]
 8000cf8:	4610      	mov	r0, r2
 8000cfa:	68fa      	ldr	r2, [r7, #12]
 8000cfc:	6811      	ldr	r1, [r2, #0]
 8000cfe:	ea43 0200 	orr.w	r2, r3, r0
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	011b      	lsls	r3, r3, #4
 8000d06:	440b      	add	r3, r1
 8000d08:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8000d0c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	3303      	adds	r3, #3
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	061a      	lsls	r2, r3, #24
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	3302      	adds	r3, #2
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	041b      	lsls	r3, r3, #16
 8000d1e:	431a      	orrs	r2, r3
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	3301      	adds	r3, #1
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	021b      	lsls	r3, r3, #8
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	687a      	ldr	r2, [r7, #4]
 8000d2c:	7812      	ldrb	r2, [r2, #0]
 8000d2e:	4610      	mov	r0, r2
 8000d30:	68fa      	ldr	r2, [r7, #12]
 8000d32:	6811      	ldr	r1, [r2, #0]
 8000d34:	ea43 0200 	orr.w	r2, r3, r0
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	011b      	lsls	r3, r3, #4
 8000d3c:	440b      	add	r3, r1
 8000d3e:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8000d42:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	3318      	adds	r3, #24
 8000d4c:	011b      	lsls	r3, r3, #4
 8000d4e:	4413      	add	r3, r2
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	68fa      	ldr	r2, [r7, #12]
 8000d54:	6811      	ldr	r1, [r2, #0]
 8000d56:	f043 0201 	orr.w	r2, r3, #1
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	3318      	adds	r3, #24
 8000d5e:	011b      	lsls	r3, r3, #4
 8000d60:	440b      	add	r3, r1
 8000d62:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000d64:	2300      	movs	r3, #0
 8000d66:	e00e      	b.n	8000d86 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d6c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8000d74:	2301      	movs	r3, #1
 8000d76:	e006      	b.n	8000d86 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d7c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000d84:	2301      	movs	r3, #1
  }
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3724      	adds	r7, #36	@ 0x24
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr

08000d92 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8000d92:	b480      	push	{r7}
 8000d94:	b085      	sub	sp, #20
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000da4:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8000da6:	7afb      	ldrb	r3, [r7, #11]
 8000da8:	2b01      	cmp	r3, #1
 8000daa:	d002      	beq.n	8000db2 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8000dac:	7afb      	ldrb	r3, [r7, #11]
 8000dae:	2b02      	cmp	r3, #2
 8000db0:	d11d      	bne.n	8000dee <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	689b      	ldr	r3, [r3, #8]
 8000db8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d002      	beq.n	8000dc6 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	689b      	ldr	r3, [r3, #8]
 8000dcc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d002      	beq.n	8000dda <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	3301      	adds	r3, #1
 8000dd8:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	689b      	ldr	r3, [r3, #8]
 8000de0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d002      	beq.n	8000dee <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	3301      	adds	r3, #1
 8000dec:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8000dee:	68fb      	ldr	r3, [r7, #12]
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	3714      	adds	r7, #20
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr

08000dfc <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b087      	sub	sp, #28
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	60f8      	str	r0, [r7, #12]
 8000e04:	60b9      	str	r1, [r7, #8]
 8000e06:	607a      	str	r2, [r7, #4]
 8000e08:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e10:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000e12:	7dfb      	ldrb	r3, [r7, #23]
 8000e14:	2b01      	cmp	r3, #1
 8000e16:	d003      	beq.n	8000e20 <HAL_CAN_GetRxMessage+0x24>
 8000e18:	7dfb      	ldrb	r3, [r7, #23]
 8000e1a:	2b02      	cmp	r3, #2
 8000e1c:	f040 8103 	bne.w	8001026 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d10e      	bne.n	8000e44 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	68db      	ldr	r3, [r3, #12]
 8000e2c:	f003 0303 	and.w	r3, r3, #3
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d116      	bne.n	8000e62 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e38:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8000e40:	2301      	movs	r3, #1
 8000e42:	e0f7      	b.n	8001034 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	691b      	ldr	r3, [r3, #16]
 8000e4a:	f003 0303 	and.w	r3, r3, #3
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d107      	bne.n	8000e62 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e56:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	e0e8      	b.n	8001034 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	68bb      	ldr	r3, [r7, #8]
 8000e68:	331b      	adds	r3, #27
 8000e6a:	011b      	lsls	r3, r3, #4
 8000e6c:	4413      	add	r3, r2
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f003 0204 	and.w	r2, r3, #4
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	689b      	ldr	r3, [r3, #8]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d10c      	bne.n	8000e9a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	331b      	adds	r3, #27
 8000e88:	011b      	lsls	r3, r3, #4
 8000e8a:	4413      	add	r3, r2
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	0d5b      	lsrs	r3, r3, #21
 8000e90:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	e00b      	b.n	8000eb2 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	681a      	ldr	r2, [r3, #0]
 8000e9e:	68bb      	ldr	r3, [r7, #8]
 8000ea0:	331b      	adds	r3, #27
 8000ea2:	011b      	lsls	r3, r3, #4
 8000ea4:	4413      	add	r3, r2
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	08db      	lsrs	r3, r3, #3
 8000eaa:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	68bb      	ldr	r3, [r7, #8]
 8000eb8:	331b      	adds	r3, #27
 8000eba:	011b      	lsls	r3, r3, #4
 8000ebc:	4413      	add	r3, r2
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f003 0202 	and.w	r2, r3, #2
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	331b      	adds	r3, #27
 8000ed0:	011b      	lsls	r3, r3, #4
 8000ed2:	4413      	add	r3, r2
 8000ed4:	3304      	adds	r3, #4
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f003 0308 	and.w	r3, r3, #8
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d003      	beq.n	8000ee8 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2208      	movs	r2, #8
 8000ee4:	611a      	str	r2, [r3, #16]
 8000ee6:	e00b      	b.n	8000f00 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	681a      	ldr	r2, [r3, #0]
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	331b      	adds	r3, #27
 8000ef0:	011b      	lsls	r3, r3, #4
 8000ef2:	4413      	add	r3, r2
 8000ef4:	3304      	adds	r3, #4
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f003 020f 	and.w	r2, r3, #15
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	331b      	adds	r3, #27
 8000f08:	011b      	lsls	r3, r3, #4
 8000f0a:	4413      	add	r3, r2
 8000f0c:	3304      	adds	r3, #4
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	0a1b      	lsrs	r3, r3, #8
 8000f12:	b2da      	uxtb	r2, r3
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	331b      	adds	r3, #27
 8000f20:	011b      	lsls	r3, r3, #4
 8000f22:	4413      	add	r3, r2
 8000f24:	3304      	adds	r3, #4
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	0c1b      	lsrs	r3, r3, #16
 8000f2a:	b29a      	uxth	r2, r3
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	011b      	lsls	r3, r3, #4
 8000f38:	4413      	add	r3, r2
 8000f3a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	b2da      	uxtb	r2, r3
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	68bb      	ldr	r3, [r7, #8]
 8000f4c:	011b      	lsls	r3, r3, #4
 8000f4e:	4413      	add	r3, r2
 8000f50:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	0a1a      	lsrs	r2, r3, #8
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	3301      	adds	r3, #1
 8000f5c:	b2d2      	uxtb	r2, r2
 8000f5e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	4413      	add	r3, r2
 8000f6a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	0c1a      	lsrs	r2, r3, #16
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	3302      	adds	r3, #2
 8000f76:	b2d2      	uxtb	r2, r2
 8000f78:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	68bb      	ldr	r3, [r7, #8]
 8000f80:	011b      	lsls	r3, r3, #4
 8000f82:	4413      	add	r3, r2
 8000f84:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	0e1a      	lsrs	r2, r3, #24
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	3303      	adds	r3, #3
 8000f90:	b2d2      	uxtb	r2, r2
 8000f92:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	681a      	ldr	r2, [r3, #0]
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	011b      	lsls	r3, r3, #4
 8000f9c:	4413      	add	r3, r2
 8000f9e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	3304      	adds	r3, #4
 8000fa8:	b2d2      	uxtb	r2, r2
 8000faa:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	011b      	lsls	r3, r3, #4
 8000fb4:	4413      	add	r3, r2
 8000fb6:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	0a1a      	lsrs	r2, r3, #8
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	3305      	adds	r3, #5
 8000fc2:	b2d2      	uxtb	r2, r2
 8000fc4:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	681a      	ldr	r2, [r3, #0]
 8000fca:	68bb      	ldr	r3, [r7, #8]
 8000fcc:	011b      	lsls	r3, r3, #4
 8000fce:	4413      	add	r3, r2
 8000fd0:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	0c1a      	lsrs	r2, r3, #16
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	3306      	adds	r3, #6
 8000fdc:	b2d2      	uxtb	r2, r2
 8000fde:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	011b      	lsls	r3, r3, #4
 8000fe8:	4413      	add	r3, r2
 8000fea:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	0e1a      	lsrs	r2, r3, #24
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	3307      	adds	r3, #7
 8000ff6:	b2d2      	uxtb	r2, r2
 8000ff8:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000ffa:	68bb      	ldr	r3, [r7, #8]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d108      	bne.n	8001012 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	68da      	ldr	r2, [r3, #12]
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f042 0220 	orr.w	r2, r2, #32
 800100e:	60da      	str	r2, [r3, #12]
 8001010:	e007      	b.n	8001022 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	691a      	ldr	r2, [r3, #16]
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f042 0220 	orr.w	r2, r2, #32
 8001020:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001022:	2300      	movs	r3, #0
 8001024:	e006      	b.n	8001034 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800102a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001032:	2301      	movs	r3, #1
  }
}
 8001034:	4618      	mov	r0, r3
 8001036:	371c      	adds	r7, #28
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr

08001040 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001040:	b480      	push	{r7}
 8001042:	b085      	sub	sp, #20
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001050:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001052:	7bfb      	ldrb	r3, [r7, #15]
 8001054:	2b01      	cmp	r3, #1
 8001056:	d002      	beq.n	800105e <HAL_CAN_ActivateNotification+0x1e>
 8001058:	7bfb      	ldrb	r3, [r7, #15]
 800105a:	2b02      	cmp	r3, #2
 800105c:	d109      	bne.n	8001072 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	6959      	ldr	r1, [r3, #20]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	683a      	ldr	r2, [r7, #0]
 800106a:	430a      	orrs	r2, r1
 800106c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800106e:	2300      	movs	r3, #0
 8001070:	e006      	b.n	8001080 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001076:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800107e:	2301      	movs	r3, #1
  }
}
 8001080:	4618      	mov	r0, r3
 8001082:	3714      	adds	r7, #20
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr

0800108c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b08a      	sub	sp, #40	@ 0x28
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001094:	2300      	movs	r3, #0
 8001096:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	695b      	ldr	r3, [r3, #20]
 800109e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	689b      	ldr	r3, [r3, #8]
 80010ae:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	68db      	ldr	r3, [r3, #12]
 80010b6:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	691b      	ldr	r3, [r3, #16]
 80010be:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	699b      	ldr	r3, [r3, #24]
 80010c6:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80010c8:	6a3b      	ldr	r3, [r7, #32]
 80010ca:	f003 0301 	and.w	r3, r3, #1
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d07c      	beq.n	80011cc <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80010d2:	69bb      	ldr	r3, [r7, #24]
 80010d4:	f003 0301 	and.w	r3, r3, #1
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d023      	beq.n	8001124 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	2201      	movs	r2, #1
 80010e2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80010e4:	69bb      	ldr	r3, [r7, #24]
 80010e6:	f003 0302 	and.w	r3, r3, #2
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d003      	beq.n	80010f6 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80010ee:	6878      	ldr	r0, [r7, #4]
 80010f0:	f000 f983 	bl	80013fa <HAL_CAN_TxMailbox0CompleteCallback>
 80010f4:	e016      	b.n	8001124 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80010f6:	69bb      	ldr	r3, [r7, #24]
 80010f8:	f003 0304 	and.w	r3, r3, #4
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d004      	beq.n	800110a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001102:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001106:	627b      	str	r3, [r7, #36]	@ 0x24
 8001108:	e00c      	b.n	8001124 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800110a:	69bb      	ldr	r3, [r7, #24]
 800110c:	f003 0308 	and.w	r3, r3, #8
 8001110:	2b00      	cmp	r3, #0
 8001112:	d004      	beq.n	800111e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001116:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800111a:	627b      	str	r3, [r7, #36]	@ 0x24
 800111c:	e002      	b.n	8001124 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	f000 f989 	bl	8001436 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001124:	69bb      	ldr	r3, [r7, #24]
 8001126:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800112a:	2b00      	cmp	r3, #0
 800112c:	d024      	beq.n	8001178 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001136:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001138:	69bb      	ldr	r3, [r7, #24]
 800113a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800113e:	2b00      	cmp	r3, #0
 8001140:	d003      	beq.n	800114a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001142:	6878      	ldr	r0, [r7, #4]
 8001144:	f000 f963 	bl	800140e <HAL_CAN_TxMailbox1CompleteCallback>
 8001148:	e016      	b.n	8001178 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800114a:	69bb      	ldr	r3, [r7, #24]
 800114c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001150:	2b00      	cmp	r3, #0
 8001152:	d004      	beq.n	800115e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001156:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800115a:	627b      	str	r3, [r7, #36]	@ 0x24
 800115c:	e00c      	b.n	8001178 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800115e:	69bb      	ldr	r3, [r7, #24]
 8001160:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001164:	2b00      	cmp	r3, #0
 8001166:	d004      	beq.n	8001172 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800116a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800116e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001170:	e002      	b.n	8001178 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f000 f969 	bl	800144a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001178:	69bb      	ldr	r3, [r7, #24]
 800117a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800117e:	2b00      	cmp	r3, #0
 8001180:	d024      	beq.n	80011cc <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800118a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800118c:	69bb      	ldr	r3, [r7, #24]
 800118e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001192:	2b00      	cmp	r3, #0
 8001194:	d003      	beq.n	800119e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001196:	6878      	ldr	r0, [r7, #4]
 8001198:	f000 f943 	bl	8001422 <HAL_CAN_TxMailbox2CompleteCallback>
 800119c:	e016      	b.n	80011cc <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800119e:	69bb      	ldr	r3, [r7, #24]
 80011a0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d004      	beq.n	80011b2 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80011a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80011ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80011b0:	e00c      	b.n	80011cc <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80011b2:	69bb      	ldr	r3, [r7, #24]
 80011b4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d004      	beq.n	80011c6 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80011bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80011c4:	e002      	b.n	80011cc <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f000 f949 	bl	800145e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80011cc:	6a3b      	ldr	r3, [r7, #32]
 80011ce:	f003 0308 	and.w	r3, r3, #8
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d00c      	beq.n	80011f0 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	f003 0310 	and.w	r3, r3, #16
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d007      	beq.n	80011f0 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80011e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011e2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011e6:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	2210      	movs	r2, #16
 80011ee:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80011f0:	6a3b      	ldr	r3, [r7, #32]
 80011f2:	f003 0304 	and.w	r3, r3, #4
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d00b      	beq.n	8001212 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	f003 0308 	and.w	r3, r3, #8
 8001200:	2b00      	cmp	r3, #0
 8001202:	d006      	beq.n	8001212 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	2208      	movs	r2, #8
 800120a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800120c:	6878      	ldr	r0, [r7, #4]
 800120e:	f000 f930 	bl	8001472 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001212:	6a3b      	ldr	r3, [r7, #32]
 8001214:	f003 0302 	and.w	r3, r3, #2
 8001218:	2b00      	cmp	r3, #0
 800121a:	d009      	beq.n	8001230 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	68db      	ldr	r3, [r3, #12]
 8001222:	f003 0303 	and.w	r3, r3, #3
 8001226:	2b00      	cmp	r3, #0
 8001228:	d002      	beq.n	8001230 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f7fe ffcc 	bl	80001c8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001230:	6a3b      	ldr	r3, [r7, #32]
 8001232:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001236:	2b00      	cmp	r3, #0
 8001238:	d00c      	beq.n	8001254 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	f003 0310 	and.w	r3, r3, #16
 8001240:	2b00      	cmp	r3, #0
 8001242:	d007      	beq.n	8001254 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001246:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800124a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	2210      	movs	r2, #16
 8001252:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001254:	6a3b      	ldr	r3, [r7, #32]
 8001256:	f003 0320 	and.w	r3, r3, #32
 800125a:	2b00      	cmp	r3, #0
 800125c:	d00b      	beq.n	8001276 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	f003 0308 	and.w	r3, r3, #8
 8001264:	2b00      	cmp	r3, #0
 8001266:	d006      	beq.n	8001276 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	2208      	movs	r2, #8
 800126e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	f000 f912 	bl	800149a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001276:	6a3b      	ldr	r3, [r7, #32]
 8001278:	f003 0310 	and.w	r3, r3, #16
 800127c:	2b00      	cmp	r3, #0
 800127e:	d009      	beq.n	8001294 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	691b      	ldr	r3, [r3, #16]
 8001286:	f003 0303 	and.w	r3, r3, #3
 800128a:	2b00      	cmp	r3, #0
 800128c:	d002      	beq.n	8001294 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f000 f8f9 	bl	8001486 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001294:	6a3b      	ldr	r3, [r7, #32]
 8001296:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800129a:	2b00      	cmp	r3, #0
 800129c:	d00b      	beq.n	80012b6 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	f003 0310 	and.w	r3, r3, #16
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d006      	beq.n	80012b6 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	2210      	movs	r2, #16
 80012ae:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80012b0:	6878      	ldr	r0, [r7, #4]
 80012b2:	f000 f8fc 	bl	80014ae <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80012b6:	6a3b      	ldr	r3, [r7, #32]
 80012b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d00b      	beq.n	80012d8 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	f003 0308 	and.w	r3, r3, #8
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d006      	beq.n	80012d8 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	2208      	movs	r2, #8
 80012d0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f000 f8f5 	bl	80014c2 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80012d8:	6a3b      	ldr	r3, [r7, #32]
 80012da:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d07b      	beq.n	80013da <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	f003 0304 	and.w	r3, r3, #4
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d072      	beq.n	80013d2 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80012ec:	6a3b      	ldr	r3, [r7, #32]
 80012ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d008      	beq.n	8001308 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d003      	beq.n	8001308 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001302:	f043 0301 	orr.w	r3, r3, #1
 8001306:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001308:	6a3b      	ldr	r3, [r7, #32]
 800130a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800130e:	2b00      	cmp	r3, #0
 8001310:	d008      	beq.n	8001324 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001318:	2b00      	cmp	r3, #0
 800131a:	d003      	beq.n	8001324 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800131c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800131e:	f043 0302 	orr.w	r3, r3, #2
 8001322:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001324:	6a3b      	ldr	r3, [r7, #32]
 8001326:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800132a:	2b00      	cmp	r3, #0
 800132c:	d008      	beq.n	8001340 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001334:	2b00      	cmp	r3, #0
 8001336:	d003      	beq.n	8001340 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800133a:	f043 0304 	orr.w	r3, r3, #4
 800133e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001340:	6a3b      	ldr	r3, [r7, #32]
 8001342:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001346:	2b00      	cmp	r3, #0
 8001348:	d043      	beq.n	80013d2 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001350:	2b00      	cmp	r3, #0
 8001352:	d03e      	beq.n	80013d2 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800135a:	2b60      	cmp	r3, #96	@ 0x60
 800135c:	d02b      	beq.n	80013b6 <HAL_CAN_IRQHandler+0x32a>
 800135e:	2b60      	cmp	r3, #96	@ 0x60
 8001360:	d82e      	bhi.n	80013c0 <HAL_CAN_IRQHandler+0x334>
 8001362:	2b50      	cmp	r3, #80	@ 0x50
 8001364:	d022      	beq.n	80013ac <HAL_CAN_IRQHandler+0x320>
 8001366:	2b50      	cmp	r3, #80	@ 0x50
 8001368:	d82a      	bhi.n	80013c0 <HAL_CAN_IRQHandler+0x334>
 800136a:	2b40      	cmp	r3, #64	@ 0x40
 800136c:	d019      	beq.n	80013a2 <HAL_CAN_IRQHandler+0x316>
 800136e:	2b40      	cmp	r3, #64	@ 0x40
 8001370:	d826      	bhi.n	80013c0 <HAL_CAN_IRQHandler+0x334>
 8001372:	2b30      	cmp	r3, #48	@ 0x30
 8001374:	d010      	beq.n	8001398 <HAL_CAN_IRQHandler+0x30c>
 8001376:	2b30      	cmp	r3, #48	@ 0x30
 8001378:	d822      	bhi.n	80013c0 <HAL_CAN_IRQHandler+0x334>
 800137a:	2b10      	cmp	r3, #16
 800137c:	d002      	beq.n	8001384 <HAL_CAN_IRQHandler+0x2f8>
 800137e:	2b20      	cmp	r3, #32
 8001380:	d005      	beq.n	800138e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001382:	e01d      	b.n	80013c0 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001386:	f043 0308 	orr.w	r3, r3, #8
 800138a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800138c:	e019      	b.n	80013c2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800138e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001390:	f043 0310 	orr.w	r3, r3, #16
 8001394:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001396:	e014      	b.n	80013c2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800139a:	f043 0320 	orr.w	r3, r3, #32
 800139e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80013a0:	e00f      	b.n	80013c2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80013a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80013a8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80013aa:	e00a      	b.n	80013c2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80013ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013b2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80013b4:	e005      	b.n	80013c2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80013b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013bc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80013be:	e000      	b.n	80013c2 <HAL_CAN_IRQHandler+0x336>
            break;
 80013c0:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	699a      	ldr	r2, [r3, #24]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80013d0:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	2204      	movs	r2, #4
 80013d8:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80013da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d008      	beq.n	80013f2 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80013e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013e6:	431a      	orrs	r2, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	f000 f872 	bl	80014d6 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80013f2:	bf00      	nop
 80013f4:	3728      	adds	r7, #40	@ 0x28
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}

080013fa <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80013fa:	b480      	push	{r7}
 80013fc:	b083      	sub	sp, #12
 80013fe:	af00      	add	r7, sp, #0
 8001400:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001402:	bf00      	nop
 8001404:	370c      	adds	r7, #12
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr

0800140e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800140e:	b480      	push	{r7}
 8001410:	b083      	sub	sp, #12
 8001412:	af00      	add	r7, sp, #0
 8001414:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001416:	bf00      	nop
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr

08001422 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001422:	b480      	push	{r7}
 8001424:	b083      	sub	sp, #12
 8001426:	af00      	add	r7, sp, #0
 8001428:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800142a:	bf00      	nop
 800142c:	370c      	adds	r7, #12
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr

08001436 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001436:	b480      	push	{r7}
 8001438:	b083      	sub	sp, #12
 800143a:	af00      	add	r7, sp, #0
 800143c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800143e:	bf00      	nop
 8001440:	370c      	adds	r7, #12
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr

0800144a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800144a:	b480      	push	{r7}
 800144c:	b083      	sub	sp, #12
 800144e:	af00      	add	r7, sp, #0
 8001450:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001452:	bf00      	nop
 8001454:	370c      	adds	r7, #12
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr

0800145e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800145e:	b480      	push	{r7}
 8001460:	b083      	sub	sp, #12
 8001462:	af00      	add	r7, sp, #0
 8001464:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001466:	bf00      	nop
 8001468:	370c      	adds	r7, #12
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr

08001472 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001472:	b480      	push	{r7}
 8001474:	b083      	sub	sp, #12
 8001476:	af00      	add	r7, sp, #0
 8001478:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800147a:	bf00      	nop
 800147c:	370c      	adds	r7, #12
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr

08001486 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001486:	b480      	push	{r7}
 8001488:	b083      	sub	sp, #12
 800148a:	af00      	add	r7, sp, #0
 800148c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800148e:	bf00      	nop
 8001490:	370c      	adds	r7, #12
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr

0800149a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800149a:	b480      	push	{r7}
 800149c:	b083      	sub	sp, #12
 800149e:	af00      	add	r7, sp, #0
 80014a0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80014a2:	bf00      	nop
 80014a4:	370c      	adds	r7, #12
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr

080014ae <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80014ae:	b480      	push	{r7}
 80014b0:	b083      	sub	sp, #12
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80014b6:	bf00      	nop
 80014b8:	370c      	adds	r7, #12
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr

080014c2 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80014c2:	b480      	push	{r7}
 80014c4:	b083      	sub	sp, #12
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80014ca:	bf00      	nop
 80014cc:	370c      	adds	r7, #12
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr

080014d6 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80014d6:	b480      	push	{r7}
 80014d8:	b083      	sub	sp, #12
 80014da:	af00      	add	r7, sp, #0
 80014dc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80014de:	bf00      	nop
 80014e0:	370c      	adds	r7, #12
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
	...

080014ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b085      	sub	sp, #20
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	f003 0307 	and.w	r3, r3, #7
 80014fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001530 <__NVIC_SetPriorityGrouping+0x44>)
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001502:	68ba      	ldr	r2, [r7, #8]
 8001504:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001508:	4013      	ands	r3, r2
 800150a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001514:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001518:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800151c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800151e:	4a04      	ldr	r2, [pc, #16]	@ (8001530 <__NVIC_SetPriorityGrouping+0x44>)
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	60d3      	str	r3, [r2, #12]
}
 8001524:	bf00      	nop
 8001526:	3714      	adds	r7, #20
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr
 8001530:	e000ed00 	.word	0xe000ed00

08001534 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001538:	4b04      	ldr	r3, [pc, #16]	@ (800154c <__NVIC_GetPriorityGrouping+0x18>)
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	0a1b      	lsrs	r3, r3, #8
 800153e:	f003 0307 	and.w	r3, r3, #7
}
 8001542:	4618      	mov	r0, r3
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr
 800154c:	e000ed00 	.word	0xe000ed00

08001550 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	4603      	mov	r3, r0
 8001558:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800155a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155e:	2b00      	cmp	r3, #0
 8001560:	db0b      	blt.n	800157a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001562:	79fb      	ldrb	r3, [r7, #7]
 8001564:	f003 021f 	and.w	r2, r3, #31
 8001568:	4907      	ldr	r1, [pc, #28]	@ (8001588 <__NVIC_EnableIRQ+0x38>)
 800156a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800156e:	095b      	lsrs	r3, r3, #5
 8001570:	2001      	movs	r0, #1
 8001572:	fa00 f202 	lsl.w	r2, r0, r2
 8001576:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800157a:	bf00      	nop
 800157c:	370c      	adds	r7, #12
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	e000e100 	.word	0xe000e100

0800158c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	4603      	mov	r3, r0
 8001594:	6039      	str	r1, [r7, #0]
 8001596:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001598:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159c:	2b00      	cmp	r3, #0
 800159e:	db0a      	blt.n	80015b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	b2da      	uxtb	r2, r3
 80015a4:	490c      	ldr	r1, [pc, #48]	@ (80015d8 <__NVIC_SetPriority+0x4c>)
 80015a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015aa:	0112      	lsls	r2, r2, #4
 80015ac:	b2d2      	uxtb	r2, r2
 80015ae:	440b      	add	r3, r1
 80015b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015b4:	e00a      	b.n	80015cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	b2da      	uxtb	r2, r3
 80015ba:	4908      	ldr	r1, [pc, #32]	@ (80015dc <__NVIC_SetPriority+0x50>)
 80015bc:	79fb      	ldrb	r3, [r7, #7]
 80015be:	f003 030f 	and.w	r3, r3, #15
 80015c2:	3b04      	subs	r3, #4
 80015c4:	0112      	lsls	r2, r2, #4
 80015c6:	b2d2      	uxtb	r2, r2
 80015c8:	440b      	add	r3, r1
 80015ca:	761a      	strb	r2, [r3, #24]
}
 80015cc:	bf00      	nop
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr
 80015d8:	e000e100 	.word	0xe000e100
 80015dc:	e000ed00 	.word	0xe000ed00

080015e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b089      	sub	sp, #36	@ 0x24
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	60f8      	str	r0, [r7, #12]
 80015e8:	60b9      	str	r1, [r7, #8]
 80015ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	f003 0307 	and.w	r3, r3, #7
 80015f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015f4:	69fb      	ldr	r3, [r7, #28]
 80015f6:	f1c3 0307 	rsb	r3, r3, #7
 80015fa:	2b04      	cmp	r3, #4
 80015fc:	bf28      	it	cs
 80015fe:	2304      	movcs	r3, #4
 8001600:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	3304      	adds	r3, #4
 8001606:	2b06      	cmp	r3, #6
 8001608:	d902      	bls.n	8001610 <NVIC_EncodePriority+0x30>
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	3b03      	subs	r3, #3
 800160e:	e000      	b.n	8001612 <NVIC_EncodePriority+0x32>
 8001610:	2300      	movs	r3, #0
 8001612:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001614:	f04f 32ff 	mov.w	r2, #4294967295
 8001618:	69bb      	ldr	r3, [r7, #24]
 800161a:	fa02 f303 	lsl.w	r3, r2, r3
 800161e:	43da      	mvns	r2, r3
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	401a      	ands	r2, r3
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001628:	f04f 31ff 	mov.w	r1, #4294967295
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	fa01 f303 	lsl.w	r3, r1, r3
 8001632:	43d9      	mvns	r1, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001638:	4313      	orrs	r3, r2
         );
}
 800163a:	4618      	mov	r0, r3
 800163c:	3724      	adds	r7, #36	@ 0x24
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
	...

08001648 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	3b01      	subs	r3, #1
 8001654:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001658:	d301      	bcc.n	800165e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800165a:	2301      	movs	r3, #1
 800165c:	e00f      	b.n	800167e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800165e:	4a0a      	ldr	r2, [pc, #40]	@ (8001688 <SysTick_Config+0x40>)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	3b01      	subs	r3, #1
 8001664:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001666:	210f      	movs	r1, #15
 8001668:	f04f 30ff 	mov.w	r0, #4294967295
 800166c:	f7ff ff8e 	bl	800158c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001670:	4b05      	ldr	r3, [pc, #20]	@ (8001688 <SysTick_Config+0x40>)
 8001672:	2200      	movs	r2, #0
 8001674:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001676:	4b04      	ldr	r3, [pc, #16]	@ (8001688 <SysTick_Config+0x40>)
 8001678:	2207      	movs	r2, #7
 800167a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800167c:	2300      	movs	r3, #0
}
 800167e:	4618      	mov	r0, r3
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	e000e010 	.word	0xe000e010

0800168c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	f7ff ff29 	bl	80014ec <__NVIC_SetPriorityGrouping>
}
 800169a:	bf00      	nop
 800169c:	3708      	adds	r7, #8
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}

080016a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016a2:	b580      	push	{r7, lr}
 80016a4:	b086      	sub	sp, #24
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	4603      	mov	r3, r0
 80016aa:	60b9      	str	r1, [r7, #8]
 80016ac:	607a      	str	r2, [r7, #4]
 80016ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016b0:	2300      	movs	r3, #0
 80016b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016b4:	f7ff ff3e 	bl	8001534 <__NVIC_GetPriorityGrouping>
 80016b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016ba:	687a      	ldr	r2, [r7, #4]
 80016bc:	68b9      	ldr	r1, [r7, #8]
 80016be:	6978      	ldr	r0, [r7, #20]
 80016c0:	f7ff ff8e 	bl	80015e0 <NVIC_EncodePriority>
 80016c4:	4602      	mov	r2, r0
 80016c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016ca:	4611      	mov	r1, r2
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7ff ff5d 	bl	800158c <__NVIC_SetPriority>
}
 80016d2:	bf00      	nop
 80016d4:	3718      	adds	r7, #24
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}

080016da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016da:	b580      	push	{r7, lr}
 80016dc:	b082      	sub	sp, #8
 80016de:	af00      	add	r7, sp, #0
 80016e0:	4603      	mov	r3, r0
 80016e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7ff ff31 	bl	8001550 <__NVIC_EnableIRQ>
}
 80016ee:	bf00      	nop
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}

080016f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016f6:	b580      	push	{r7, lr}
 80016f8:	b082      	sub	sp, #8
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f7ff ffa2 	bl	8001648 <SysTick_Config>
 8001704:	4603      	mov	r3, r0
}
 8001706:	4618      	mov	r0, r3
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
	...

08001710 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001710:	b480      	push	{r7}
 8001712:	b087      	sub	sp, #28
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800171a:	2300      	movs	r3, #0
 800171c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800171e:	e14e      	b.n	80019be <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	2101      	movs	r1, #1
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	fa01 f303 	lsl.w	r3, r1, r3
 800172c:	4013      	ands	r3, r2
 800172e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	2b00      	cmp	r3, #0
 8001734:	f000 8140 	beq.w	80019b8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f003 0303 	and.w	r3, r3, #3
 8001740:	2b01      	cmp	r3, #1
 8001742:	d005      	beq.n	8001750 <HAL_GPIO_Init+0x40>
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f003 0303 	and.w	r3, r3, #3
 800174c:	2b02      	cmp	r3, #2
 800174e:	d130      	bne.n	80017b2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	005b      	lsls	r3, r3, #1
 800175a:	2203      	movs	r2, #3
 800175c:	fa02 f303 	lsl.w	r3, r2, r3
 8001760:	43db      	mvns	r3, r3
 8001762:	693a      	ldr	r2, [r7, #16]
 8001764:	4013      	ands	r3, r2
 8001766:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	68da      	ldr	r2, [r3, #12]
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	005b      	lsls	r3, r3, #1
 8001770:	fa02 f303 	lsl.w	r3, r2, r3
 8001774:	693a      	ldr	r2, [r7, #16]
 8001776:	4313      	orrs	r3, r2
 8001778:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	693a      	ldr	r2, [r7, #16]
 800177e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001786:	2201      	movs	r2, #1
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	fa02 f303 	lsl.w	r3, r2, r3
 800178e:	43db      	mvns	r3, r3
 8001790:	693a      	ldr	r2, [r7, #16]
 8001792:	4013      	ands	r3, r2
 8001794:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	091b      	lsrs	r3, r3, #4
 800179c:	f003 0201 	and.w	r2, r3, #1
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	fa02 f303 	lsl.w	r3, r2, r3
 80017a6:	693a      	ldr	r2, [r7, #16]
 80017a8:	4313      	orrs	r3, r2
 80017aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	693a      	ldr	r2, [r7, #16]
 80017b0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	f003 0303 	and.w	r3, r3, #3
 80017ba:	2b03      	cmp	r3, #3
 80017bc:	d017      	beq.n	80017ee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	68db      	ldr	r3, [r3, #12]
 80017c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	005b      	lsls	r3, r3, #1
 80017c8:	2203      	movs	r2, #3
 80017ca:	fa02 f303 	lsl.w	r3, r2, r3
 80017ce:	43db      	mvns	r3, r3
 80017d0:	693a      	ldr	r2, [r7, #16]
 80017d2:	4013      	ands	r3, r2
 80017d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	689a      	ldr	r2, [r3, #8]
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	005b      	lsls	r3, r3, #1
 80017de:	fa02 f303 	lsl.w	r3, r2, r3
 80017e2:	693a      	ldr	r2, [r7, #16]
 80017e4:	4313      	orrs	r3, r2
 80017e6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	693a      	ldr	r2, [r7, #16]
 80017ec:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f003 0303 	and.w	r3, r3, #3
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d123      	bne.n	8001842 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	08da      	lsrs	r2, r3, #3
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	3208      	adds	r2, #8
 8001802:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001806:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	f003 0307 	and.w	r3, r3, #7
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	220f      	movs	r2, #15
 8001812:	fa02 f303 	lsl.w	r3, r2, r3
 8001816:	43db      	mvns	r3, r3
 8001818:	693a      	ldr	r2, [r7, #16]
 800181a:	4013      	ands	r3, r2
 800181c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	691a      	ldr	r2, [r3, #16]
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	f003 0307 	and.w	r3, r3, #7
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	fa02 f303 	lsl.w	r3, r2, r3
 800182e:	693a      	ldr	r2, [r7, #16]
 8001830:	4313      	orrs	r3, r2
 8001832:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	08da      	lsrs	r2, r3, #3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	3208      	adds	r2, #8
 800183c:	6939      	ldr	r1, [r7, #16]
 800183e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	005b      	lsls	r3, r3, #1
 800184c:	2203      	movs	r2, #3
 800184e:	fa02 f303 	lsl.w	r3, r2, r3
 8001852:	43db      	mvns	r3, r3
 8001854:	693a      	ldr	r2, [r7, #16]
 8001856:	4013      	ands	r3, r2
 8001858:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	f003 0203 	and.w	r2, r3, #3
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	005b      	lsls	r3, r3, #1
 8001866:	fa02 f303 	lsl.w	r3, r2, r3
 800186a:	693a      	ldr	r2, [r7, #16]
 800186c:	4313      	orrs	r3, r2
 800186e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	693a      	ldr	r2, [r7, #16]
 8001874:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800187e:	2b00      	cmp	r3, #0
 8001880:	f000 809a 	beq.w	80019b8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001884:	4b55      	ldr	r3, [pc, #340]	@ (80019dc <HAL_GPIO_Init+0x2cc>)
 8001886:	699b      	ldr	r3, [r3, #24]
 8001888:	4a54      	ldr	r2, [pc, #336]	@ (80019dc <HAL_GPIO_Init+0x2cc>)
 800188a:	f043 0301 	orr.w	r3, r3, #1
 800188e:	6193      	str	r3, [r2, #24]
 8001890:	4b52      	ldr	r3, [pc, #328]	@ (80019dc <HAL_GPIO_Init+0x2cc>)
 8001892:	699b      	ldr	r3, [r3, #24]
 8001894:	f003 0301 	and.w	r3, r3, #1
 8001898:	60bb      	str	r3, [r7, #8]
 800189a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800189c:	4a50      	ldr	r2, [pc, #320]	@ (80019e0 <HAL_GPIO_Init+0x2d0>)
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	089b      	lsrs	r3, r3, #2
 80018a2:	3302      	adds	r3, #2
 80018a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	f003 0303 	and.w	r3, r3, #3
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	220f      	movs	r2, #15
 80018b4:	fa02 f303 	lsl.w	r3, r2, r3
 80018b8:	43db      	mvns	r3, r3
 80018ba:	693a      	ldr	r2, [r7, #16]
 80018bc:	4013      	ands	r3, r2
 80018be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80018c6:	d013      	beq.n	80018f0 <HAL_GPIO_Init+0x1e0>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	4a46      	ldr	r2, [pc, #280]	@ (80019e4 <HAL_GPIO_Init+0x2d4>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d00d      	beq.n	80018ec <HAL_GPIO_Init+0x1dc>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	4a45      	ldr	r2, [pc, #276]	@ (80019e8 <HAL_GPIO_Init+0x2d8>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d007      	beq.n	80018e8 <HAL_GPIO_Init+0x1d8>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	4a44      	ldr	r2, [pc, #272]	@ (80019ec <HAL_GPIO_Init+0x2dc>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d101      	bne.n	80018e4 <HAL_GPIO_Init+0x1d4>
 80018e0:	2303      	movs	r3, #3
 80018e2:	e006      	b.n	80018f2 <HAL_GPIO_Init+0x1e2>
 80018e4:	2305      	movs	r3, #5
 80018e6:	e004      	b.n	80018f2 <HAL_GPIO_Init+0x1e2>
 80018e8:	2302      	movs	r3, #2
 80018ea:	e002      	b.n	80018f2 <HAL_GPIO_Init+0x1e2>
 80018ec:	2301      	movs	r3, #1
 80018ee:	e000      	b.n	80018f2 <HAL_GPIO_Init+0x1e2>
 80018f0:	2300      	movs	r3, #0
 80018f2:	697a      	ldr	r2, [r7, #20]
 80018f4:	f002 0203 	and.w	r2, r2, #3
 80018f8:	0092      	lsls	r2, r2, #2
 80018fa:	4093      	lsls	r3, r2
 80018fc:	693a      	ldr	r2, [r7, #16]
 80018fe:	4313      	orrs	r3, r2
 8001900:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001902:	4937      	ldr	r1, [pc, #220]	@ (80019e0 <HAL_GPIO_Init+0x2d0>)
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	089b      	lsrs	r3, r3, #2
 8001908:	3302      	adds	r3, #2
 800190a:	693a      	ldr	r2, [r7, #16]
 800190c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001910:	4b37      	ldr	r3, [pc, #220]	@ (80019f0 <HAL_GPIO_Init+0x2e0>)
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	43db      	mvns	r3, r3
 800191a:	693a      	ldr	r2, [r7, #16]
 800191c:	4013      	ands	r3, r2
 800191e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001928:	2b00      	cmp	r3, #0
 800192a:	d003      	beq.n	8001934 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 800192c:	693a      	ldr	r2, [r7, #16]
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	4313      	orrs	r3, r2
 8001932:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001934:	4a2e      	ldr	r2, [pc, #184]	@ (80019f0 <HAL_GPIO_Init+0x2e0>)
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800193a:	4b2d      	ldr	r3, [pc, #180]	@ (80019f0 <HAL_GPIO_Init+0x2e0>)
 800193c:	68db      	ldr	r3, [r3, #12]
 800193e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	43db      	mvns	r3, r3
 8001944:	693a      	ldr	r2, [r7, #16]
 8001946:	4013      	ands	r3, r2
 8001948:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d003      	beq.n	800195e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001956:	693a      	ldr	r2, [r7, #16]
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	4313      	orrs	r3, r2
 800195c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800195e:	4a24      	ldr	r2, [pc, #144]	@ (80019f0 <HAL_GPIO_Init+0x2e0>)
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001964:	4b22      	ldr	r3, [pc, #136]	@ (80019f0 <HAL_GPIO_Init+0x2e0>)
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	43db      	mvns	r3, r3
 800196e:	693a      	ldr	r2, [r7, #16]
 8001970:	4013      	ands	r3, r2
 8001972:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800197c:	2b00      	cmp	r3, #0
 800197e:	d003      	beq.n	8001988 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001980:	693a      	ldr	r2, [r7, #16]
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	4313      	orrs	r3, r2
 8001986:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001988:	4a19      	ldr	r2, [pc, #100]	@ (80019f0 <HAL_GPIO_Init+0x2e0>)
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800198e:	4b18      	ldr	r3, [pc, #96]	@ (80019f0 <HAL_GPIO_Init+0x2e0>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	43db      	mvns	r3, r3
 8001998:	693a      	ldr	r2, [r7, #16]
 800199a:	4013      	ands	r3, r2
 800199c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d003      	beq.n	80019b2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80019aa:	693a      	ldr	r2, [r7, #16]
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	4313      	orrs	r3, r2
 80019b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80019b2:	4a0f      	ldr	r2, [pc, #60]	@ (80019f0 <HAL_GPIO_Init+0x2e0>)
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	3301      	adds	r3, #1
 80019bc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	fa22 f303 	lsr.w	r3, r2, r3
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	f47f aea9 	bne.w	8001720 <HAL_GPIO_Init+0x10>
  }
}
 80019ce:	bf00      	nop
 80019d0:	bf00      	nop
 80019d2:	371c      	adds	r7, #28
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr
 80019dc:	40021000 	.word	0x40021000
 80019e0:	40010000 	.word	0x40010000
 80019e4:	48000400 	.word	0x48000400
 80019e8:	48000800 	.word	0x48000800
 80019ec:	48000c00 	.word	0x48000c00
 80019f0:	40010400 	.word	0x40010400

080019f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a00:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a04:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a0a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d102      	bne.n	8001a1a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	f001 b823 	b.w	8002a60 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a1e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 0301 	and.w	r3, r3, #1
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	f000 817d 	beq.w	8001d2a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001a30:	4bbc      	ldr	r3, [pc, #752]	@ (8001d24 <HAL_RCC_OscConfig+0x330>)
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f003 030c 	and.w	r3, r3, #12
 8001a38:	2b04      	cmp	r3, #4
 8001a3a:	d00c      	beq.n	8001a56 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a3c:	4bb9      	ldr	r3, [pc, #740]	@ (8001d24 <HAL_RCC_OscConfig+0x330>)
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f003 030c 	and.w	r3, r3, #12
 8001a44:	2b08      	cmp	r3, #8
 8001a46:	d15c      	bne.n	8001b02 <HAL_RCC_OscConfig+0x10e>
 8001a48:	4bb6      	ldr	r3, [pc, #728]	@ (8001d24 <HAL_RCC_OscConfig+0x330>)
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a54:	d155      	bne.n	8001b02 <HAL_RCC_OscConfig+0x10e>
 8001a56:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001a5a:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a5e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8001a62:	fa93 f3a3 	rbit	r3, r3
 8001a66:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001a6a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a6e:	fab3 f383 	clz	r3, r3
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	095b      	lsrs	r3, r3, #5
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	f043 0301 	orr.w	r3, r3, #1
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d102      	bne.n	8001a88 <HAL_RCC_OscConfig+0x94>
 8001a82:	4ba8      	ldr	r3, [pc, #672]	@ (8001d24 <HAL_RCC_OscConfig+0x330>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	e015      	b.n	8001ab4 <HAL_RCC_OscConfig+0xc0>
 8001a88:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001a8c:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a90:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8001a94:	fa93 f3a3 	rbit	r3, r3
 8001a98:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001a9c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001aa0:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001aa4:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8001aa8:	fa93 f3a3 	rbit	r3, r3
 8001aac:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8001ab0:	4b9c      	ldr	r3, [pc, #624]	@ (8001d24 <HAL_RCC_OscConfig+0x330>)
 8001ab2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ab4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001ab8:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8001abc:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001ac0:	fa92 f2a2 	rbit	r2, r2
 8001ac4:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8001ac8:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8001acc:	fab2 f282 	clz	r2, r2
 8001ad0:	b2d2      	uxtb	r2, r2
 8001ad2:	f042 0220 	orr.w	r2, r2, #32
 8001ad6:	b2d2      	uxtb	r2, r2
 8001ad8:	f002 021f 	and.w	r2, r2, #31
 8001adc:	2101      	movs	r1, #1
 8001ade:	fa01 f202 	lsl.w	r2, r1, r2
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	f000 811f 	beq.w	8001d28 <HAL_RCC_OscConfig+0x334>
 8001aea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001aee:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	f040 8116 	bne.w	8001d28 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	f000 bfaf 	b.w	8002a60 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b06:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b12:	d106      	bne.n	8001b22 <HAL_RCC_OscConfig+0x12e>
 8001b14:	4b83      	ldr	r3, [pc, #524]	@ (8001d24 <HAL_RCC_OscConfig+0x330>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a82      	ldr	r2, [pc, #520]	@ (8001d24 <HAL_RCC_OscConfig+0x330>)
 8001b1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b1e:	6013      	str	r3, [r2, #0]
 8001b20:	e036      	b.n	8001b90 <HAL_RCC_OscConfig+0x19c>
 8001b22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b26:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d10c      	bne.n	8001b4c <HAL_RCC_OscConfig+0x158>
 8001b32:	4b7c      	ldr	r3, [pc, #496]	@ (8001d24 <HAL_RCC_OscConfig+0x330>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a7b      	ldr	r2, [pc, #492]	@ (8001d24 <HAL_RCC_OscConfig+0x330>)
 8001b38:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b3c:	6013      	str	r3, [r2, #0]
 8001b3e:	4b79      	ldr	r3, [pc, #484]	@ (8001d24 <HAL_RCC_OscConfig+0x330>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a78      	ldr	r2, [pc, #480]	@ (8001d24 <HAL_RCC_OscConfig+0x330>)
 8001b44:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b48:	6013      	str	r3, [r2, #0]
 8001b4a:	e021      	b.n	8001b90 <HAL_RCC_OscConfig+0x19c>
 8001b4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b50:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001b5c:	d10c      	bne.n	8001b78 <HAL_RCC_OscConfig+0x184>
 8001b5e:	4b71      	ldr	r3, [pc, #452]	@ (8001d24 <HAL_RCC_OscConfig+0x330>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a70      	ldr	r2, [pc, #448]	@ (8001d24 <HAL_RCC_OscConfig+0x330>)
 8001b64:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b68:	6013      	str	r3, [r2, #0]
 8001b6a:	4b6e      	ldr	r3, [pc, #440]	@ (8001d24 <HAL_RCC_OscConfig+0x330>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a6d      	ldr	r2, [pc, #436]	@ (8001d24 <HAL_RCC_OscConfig+0x330>)
 8001b70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b74:	6013      	str	r3, [r2, #0]
 8001b76:	e00b      	b.n	8001b90 <HAL_RCC_OscConfig+0x19c>
 8001b78:	4b6a      	ldr	r3, [pc, #424]	@ (8001d24 <HAL_RCC_OscConfig+0x330>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a69      	ldr	r2, [pc, #420]	@ (8001d24 <HAL_RCC_OscConfig+0x330>)
 8001b7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b82:	6013      	str	r3, [r2, #0]
 8001b84:	4b67      	ldr	r3, [pc, #412]	@ (8001d24 <HAL_RCC_OscConfig+0x330>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a66      	ldr	r2, [pc, #408]	@ (8001d24 <HAL_RCC_OscConfig+0x330>)
 8001b8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b8e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b90:	4b64      	ldr	r3, [pc, #400]	@ (8001d24 <HAL_RCC_OscConfig+0x330>)
 8001b92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b94:	f023 020f 	bic.w	r2, r3, #15
 8001b98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b9c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	495f      	ldr	r1, [pc, #380]	@ (8001d24 <HAL_RCC_OscConfig+0x330>)
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001baa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bae:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d059      	beq.n	8001c6e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bba:	f7fe fe05 	bl	80007c8 <HAL_GetTick>
 8001bbe:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bc2:	e00a      	b.n	8001bda <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bc4:	f7fe fe00 	bl	80007c8 <HAL_GetTick>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001bce:	1ad3      	subs	r3, r2, r3
 8001bd0:	2b64      	cmp	r3, #100	@ 0x64
 8001bd2:	d902      	bls.n	8001bda <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001bd4:	2303      	movs	r3, #3
 8001bd6:	f000 bf43 	b.w	8002a60 <HAL_RCC_OscConfig+0x106c>
 8001bda:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001bde:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001be6:	fa93 f3a3 	rbit	r3, r3
 8001bea:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8001bee:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bf2:	fab3 f383 	clz	r3, r3
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	095b      	lsrs	r3, r3, #5
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	f043 0301 	orr.w	r3, r3, #1
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d102      	bne.n	8001c0c <HAL_RCC_OscConfig+0x218>
 8001c06:	4b47      	ldr	r3, [pc, #284]	@ (8001d24 <HAL_RCC_OscConfig+0x330>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	e015      	b.n	8001c38 <HAL_RCC_OscConfig+0x244>
 8001c0c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c10:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c14:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001c18:	fa93 f3a3 	rbit	r3, r3
 8001c1c:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001c20:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c24:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001c28:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8001c2c:	fa93 f3a3 	rbit	r3, r3
 8001c30:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8001c34:	4b3b      	ldr	r3, [pc, #236]	@ (8001d24 <HAL_RCC_OscConfig+0x330>)
 8001c36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c38:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001c3c:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8001c40:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001c44:	fa92 f2a2 	rbit	r2, r2
 8001c48:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8001c4c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8001c50:	fab2 f282 	clz	r2, r2
 8001c54:	b2d2      	uxtb	r2, r2
 8001c56:	f042 0220 	orr.w	r2, r2, #32
 8001c5a:	b2d2      	uxtb	r2, r2
 8001c5c:	f002 021f 	and.w	r2, r2, #31
 8001c60:	2101      	movs	r1, #1
 8001c62:	fa01 f202 	lsl.w	r2, r1, r2
 8001c66:	4013      	ands	r3, r2
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d0ab      	beq.n	8001bc4 <HAL_RCC_OscConfig+0x1d0>
 8001c6c:	e05d      	b.n	8001d2a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c6e:	f7fe fdab 	bl	80007c8 <HAL_GetTick>
 8001c72:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c76:	e00a      	b.n	8001c8e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c78:	f7fe fda6 	bl	80007c8 <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	2b64      	cmp	r3, #100	@ 0x64
 8001c86:	d902      	bls.n	8001c8e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	f000 bee9 	b.w	8002a60 <HAL_RCC_OscConfig+0x106c>
 8001c8e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c92:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c96:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8001c9a:	fa93 f3a3 	rbit	r3, r3
 8001c9e:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8001ca2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ca6:	fab3 f383 	clz	r3, r3
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	095b      	lsrs	r3, r3, #5
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	f043 0301 	orr.w	r3, r3, #1
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d102      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x2cc>
 8001cba:	4b1a      	ldr	r3, [pc, #104]	@ (8001d24 <HAL_RCC_OscConfig+0x330>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	e015      	b.n	8001cec <HAL_RCC_OscConfig+0x2f8>
 8001cc0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001cc4:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8001ccc:	fa93 f3a3 	rbit	r3, r3
 8001cd0:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001cd4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001cd8:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001cdc:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8001ce0:	fa93 f3a3 	rbit	r3, r3
 8001ce4:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8001ce8:	4b0e      	ldr	r3, [pc, #56]	@ (8001d24 <HAL_RCC_OscConfig+0x330>)
 8001cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cec:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001cf0:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8001cf4:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001cf8:	fa92 f2a2 	rbit	r2, r2
 8001cfc:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8001d00:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001d04:	fab2 f282 	clz	r2, r2
 8001d08:	b2d2      	uxtb	r2, r2
 8001d0a:	f042 0220 	orr.w	r2, r2, #32
 8001d0e:	b2d2      	uxtb	r2, r2
 8001d10:	f002 021f 	and.w	r2, r2, #31
 8001d14:	2101      	movs	r1, #1
 8001d16:	fa01 f202 	lsl.w	r2, r1, r2
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d1ab      	bne.n	8001c78 <HAL_RCC_OscConfig+0x284>
 8001d20:	e003      	b.n	8001d2a <HAL_RCC_OscConfig+0x336>
 8001d22:	bf00      	nop
 8001d24:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d2e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0302 	and.w	r3, r3, #2
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	f000 817d 	beq.w	800203a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001d40:	4ba6      	ldr	r3, [pc, #664]	@ (8001fdc <HAL_RCC_OscConfig+0x5e8>)
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f003 030c 	and.w	r3, r3, #12
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d00b      	beq.n	8001d64 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001d4c:	4ba3      	ldr	r3, [pc, #652]	@ (8001fdc <HAL_RCC_OscConfig+0x5e8>)
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f003 030c 	and.w	r3, r3, #12
 8001d54:	2b08      	cmp	r3, #8
 8001d56:	d172      	bne.n	8001e3e <HAL_RCC_OscConfig+0x44a>
 8001d58:	4ba0      	ldr	r3, [pc, #640]	@ (8001fdc <HAL_RCC_OscConfig+0x5e8>)
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d16c      	bne.n	8001e3e <HAL_RCC_OscConfig+0x44a>
 8001d64:	2302      	movs	r3, #2
 8001d66:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d6a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001d6e:	fa93 f3a3 	rbit	r3, r3
 8001d72:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8001d76:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d7a:	fab3 f383 	clz	r3, r3
 8001d7e:	b2db      	uxtb	r3, r3
 8001d80:	095b      	lsrs	r3, r3, #5
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	f043 0301 	orr.w	r3, r3, #1
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d102      	bne.n	8001d94 <HAL_RCC_OscConfig+0x3a0>
 8001d8e:	4b93      	ldr	r3, [pc, #588]	@ (8001fdc <HAL_RCC_OscConfig+0x5e8>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	e013      	b.n	8001dbc <HAL_RCC_OscConfig+0x3c8>
 8001d94:	2302      	movs	r3, #2
 8001d96:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d9a:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8001d9e:	fa93 f3a3 	rbit	r3, r3
 8001da2:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001da6:	2302      	movs	r3, #2
 8001da8:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001dac:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8001db0:	fa93 f3a3 	rbit	r3, r3
 8001db4:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8001db8:	4b88      	ldr	r3, [pc, #544]	@ (8001fdc <HAL_RCC_OscConfig+0x5e8>)
 8001dba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dbc:	2202      	movs	r2, #2
 8001dbe:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8001dc2:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001dc6:	fa92 f2a2 	rbit	r2, r2
 8001dca:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8001dce:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8001dd2:	fab2 f282 	clz	r2, r2
 8001dd6:	b2d2      	uxtb	r2, r2
 8001dd8:	f042 0220 	orr.w	r2, r2, #32
 8001ddc:	b2d2      	uxtb	r2, r2
 8001dde:	f002 021f 	and.w	r2, r2, #31
 8001de2:	2101      	movs	r1, #1
 8001de4:	fa01 f202 	lsl.w	r2, r1, r2
 8001de8:	4013      	ands	r3, r2
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d00a      	beq.n	8001e04 <HAL_RCC_OscConfig+0x410>
 8001dee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001df2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	691b      	ldr	r3, [r3, #16]
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d002      	beq.n	8001e04 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	f000 be2e 	b.w	8002a60 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e04:	4b75      	ldr	r3, [pc, #468]	@ (8001fdc <HAL_RCC_OscConfig+0x5e8>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e10:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	695b      	ldr	r3, [r3, #20]
 8001e18:	21f8      	movs	r1, #248	@ 0xf8
 8001e1a:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e1e:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001e22:	fa91 f1a1 	rbit	r1, r1
 8001e26:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8001e2a:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8001e2e:	fab1 f181 	clz	r1, r1
 8001e32:	b2c9      	uxtb	r1, r1
 8001e34:	408b      	lsls	r3, r1
 8001e36:	4969      	ldr	r1, [pc, #420]	@ (8001fdc <HAL_RCC_OscConfig+0x5e8>)
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e3c:	e0fd      	b.n	800203a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e42:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	691b      	ldr	r3, [r3, #16]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	f000 8088 	beq.w	8001f60 <HAL_RCC_OscConfig+0x56c>
 8001e50:	2301      	movs	r3, #1
 8001e52:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e56:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001e5a:	fa93 f3a3 	rbit	r3, r3
 8001e5e:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8001e62:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e66:	fab3 f383 	clz	r3, r3
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001e70:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	461a      	mov	r2, r3
 8001e78:	2301      	movs	r3, #1
 8001e7a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e7c:	f7fe fca4 	bl	80007c8 <HAL_GetTick>
 8001e80:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e84:	e00a      	b.n	8001e9c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e86:	f7fe fc9f 	bl	80007c8 <HAL_GetTick>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	2b02      	cmp	r3, #2
 8001e94:	d902      	bls.n	8001e9c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	f000 bde2 	b.w	8002a60 <HAL_RCC_OscConfig+0x106c>
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea2:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8001ea6:	fa93 f3a3 	rbit	r3, r3
 8001eaa:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8001eae:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eb2:	fab3 f383 	clz	r3, r3
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	095b      	lsrs	r3, r3, #5
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	f043 0301 	orr.w	r3, r3, #1
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d102      	bne.n	8001ecc <HAL_RCC_OscConfig+0x4d8>
 8001ec6:	4b45      	ldr	r3, [pc, #276]	@ (8001fdc <HAL_RCC_OscConfig+0x5e8>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	e013      	b.n	8001ef4 <HAL_RCC_OscConfig+0x500>
 8001ecc:	2302      	movs	r3, #2
 8001ece:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed2:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8001ed6:	fa93 f3a3 	rbit	r3, r3
 8001eda:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001ede:	2302      	movs	r3, #2
 8001ee0:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001ee4:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8001ee8:	fa93 f3a3 	rbit	r3, r3
 8001eec:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8001ef0:	4b3a      	ldr	r3, [pc, #232]	@ (8001fdc <HAL_RCC_OscConfig+0x5e8>)
 8001ef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ef4:	2202      	movs	r2, #2
 8001ef6:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8001efa:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001efe:	fa92 f2a2 	rbit	r2, r2
 8001f02:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8001f06:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8001f0a:	fab2 f282 	clz	r2, r2
 8001f0e:	b2d2      	uxtb	r2, r2
 8001f10:	f042 0220 	orr.w	r2, r2, #32
 8001f14:	b2d2      	uxtb	r2, r2
 8001f16:	f002 021f 	and.w	r2, r2, #31
 8001f1a:	2101      	movs	r1, #1
 8001f1c:	fa01 f202 	lsl.w	r2, r1, r2
 8001f20:	4013      	ands	r3, r2
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d0af      	beq.n	8001e86 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f26:	4b2d      	ldr	r3, [pc, #180]	@ (8001fdc <HAL_RCC_OscConfig+0x5e8>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f32:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	695b      	ldr	r3, [r3, #20]
 8001f3a:	21f8      	movs	r1, #248	@ 0xf8
 8001f3c:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f40:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001f44:	fa91 f1a1 	rbit	r1, r1
 8001f48:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8001f4c:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8001f50:	fab1 f181 	clz	r1, r1
 8001f54:	b2c9      	uxtb	r1, r1
 8001f56:	408b      	lsls	r3, r1
 8001f58:	4920      	ldr	r1, [pc, #128]	@ (8001fdc <HAL_RCC_OscConfig+0x5e8>)
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	600b      	str	r3, [r1, #0]
 8001f5e:	e06c      	b.n	800203a <HAL_RCC_OscConfig+0x646>
 8001f60:	2301      	movs	r3, #1
 8001f62:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f66:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001f6a:	fa93 f3a3 	rbit	r3, r3
 8001f6e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8001f72:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f76:	fab3 f383 	clz	r3, r3
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001f80:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	461a      	mov	r2, r3
 8001f88:	2300      	movs	r3, #0
 8001f8a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f8c:	f7fe fc1c 	bl	80007c8 <HAL_GetTick>
 8001f90:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f94:	e00a      	b.n	8001fac <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f96:	f7fe fc17 	bl	80007c8 <HAL_GetTick>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d902      	bls.n	8001fac <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	f000 bd5a 	b.w	8002a60 <HAL_RCC_OscConfig+0x106c>
 8001fac:	2302      	movs	r3, #2
 8001fae:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb2:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001fb6:	fa93 f3a3 	rbit	r3, r3
 8001fba:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8001fbe:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fc2:	fab3 f383 	clz	r3, r3
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	095b      	lsrs	r3, r3, #5
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	f043 0301 	orr.w	r3, r3, #1
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d104      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x5ec>
 8001fd6:	4b01      	ldr	r3, [pc, #4]	@ (8001fdc <HAL_RCC_OscConfig+0x5e8>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	e015      	b.n	8002008 <HAL_RCC_OscConfig+0x614>
 8001fdc:	40021000 	.word	0x40021000
 8001fe0:	2302      	movs	r3, #2
 8001fe2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001fea:	fa93 f3a3 	rbit	r3, r3
 8001fee:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001ff2:	2302      	movs	r3, #2
 8001ff4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001ff8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001ffc:	fa93 f3a3 	rbit	r3, r3
 8002000:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002004:	4bc8      	ldr	r3, [pc, #800]	@ (8002328 <HAL_RCC_OscConfig+0x934>)
 8002006:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002008:	2202      	movs	r2, #2
 800200a:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 800200e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002012:	fa92 f2a2 	rbit	r2, r2
 8002016:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 800201a:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 800201e:	fab2 f282 	clz	r2, r2
 8002022:	b2d2      	uxtb	r2, r2
 8002024:	f042 0220 	orr.w	r2, r2, #32
 8002028:	b2d2      	uxtb	r2, r2
 800202a:	f002 021f 	and.w	r2, r2, #31
 800202e:	2101      	movs	r1, #1
 8002030:	fa01 f202 	lsl.w	r2, r1, r2
 8002034:	4013      	ands	r3, r2
 8002036:	2b00      	cmp	r3, #0
 8002038:	d1ad      	bne.n	8001f96 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800203a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800203e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0308 	and.w	r3, r3, #8
 800204a:	2b00      	cmp	r3, #0
 800204c:	f000 8110 	beq.w	8002270 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002050:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002054:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	699b      	ldr	r3, [r3, #24]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d079      	beq.n	8002154 <HAL_RCC_OscConfig+0x760>
 8002060:	2301      	movs	r3, #1
 8002062:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002066:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800206a:	fa93 f3a3 	rbit	r3, r3
 800206e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8002072:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002076:	fab3 f383 	clz	r3, r3
 800207a:	b2db      	uxtb	r3, r3
 800207c:	461a      	mov	r2, r3
 800207e:	4bab      	ldr	r3, [pc, #684]	@ (800232c <HAL_RCC_OscConfig+0x938>)
 8002080:	4413      	add	r3, r2
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	461a      	mov	r2, r3
 8002086:	2301      	movs	r3, #1
 8002088:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800208a:	f7fe fb9d 	bl	80007c8 <HAL_GetTick>
 800208e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002092:	e00a      	b.n	80020aa <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002094:	f7fe fb98 	bl	80007c8 <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	d902      	bls.n	80020aa <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80020a4:	2303      	movs	r3, #3
 80020a6:	f000 bcdb 	b.w	8002a60 <HAL_RCC_OscConfig+0x106c>
 80020aa:	2302      	movs	r3, #2
 80020ac:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b0:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80020b4:	fa93 f3a3 	rbit	r3, r3
 80020b8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80020bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020c0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80020c4:	2202      	movs	r2, #2
 80020c6:	601a      	str	r2, [r3, #0]
 80020c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020cc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	fa93 f2a3 	rbit	r2, r3
 80020d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80020de:	601a      	str	r2, [r3, #0]
 80020e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80020e8:	2202      	movs	r2, #2
 80020ea:	601a      	str	r2, [r3, #0]
 80020ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	fa93 f2a3 	rbit	r2, r3
 80020fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020fe:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002102:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002104:	4b88      	ldr	r3, [pc, #544]	@ (8002328 <HAL_RCC_OscConfig+0x934>)
 8002106:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002108:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800210c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002110:	2102      	movs	r1, #2
 8002112:	6019      	str	r1, [r3, #0]
 8002114:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002118:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	fa93 f1a3 	rbit	r1, r3
 8002122:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002126:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800212a:	6019      	str	r1, [r3, #0]
  return result;
 800212c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002130:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	fab3 f383 	clz	r3, r3
 800213a:	b2db      	uxtb	r3, r3
 800213c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002140:	b2db      	uxtb	r3, r3
 8002142:	f003 031f 	and.w	r3, r3, #31
 8002146:	2101      	movs	r1, #1
 8002148:	fa01 f303 	lsl.w	r3, r1, r3
 800214c:	4013      	ands	r3, r2
 800214e:	2b00      	cmp	r3, #0
 8002150:	d0a0      	beq.n	8002094 <HAL_RCC_OscConfig+0x6a0>
 8002152:	e08d      	b.n	8002270 <HAL_RCC_OscConfig+0x87c>
 8002154:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002158:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800215c:	2201      	movs	r2, #1
 800215e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002160:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002164:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	fa93 f2a3 	rbit	r2, r3
 800216e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002172:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002176:	601a      	str	r2, [r3, #0]
  return result;
 8002178:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800217c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002180:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002182:	fab3 f383 	clz	r3, r3
 8002186:	b2db      	uxtb	r3, r3
 8002188:	461a      	mov	r2, r3
 800218a:	4b68      	ldr	r3, [pc, #416]	@ (800232c <HAL_RCC_OscConfig+0x938>)
 800218c:	4413      	add	r3, r2
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	461a      	mov	r2, r3
 8002192:	2300      	movs	r3, #0
 8002194:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002196:	f7fe fb17 	bl	80007c8 <HAL_GetTick>
 800219a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800219e:	e00a      	b.n	80021b6 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021a0:	f7fe fb12 	bl	80007c8 <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80021aa:	1ad3      	subs	r3, r2, r3
 80021ac:	2b02      	cmp	r3, #2
 80021ae:	d902      	bls.n	80021b6 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80021b0:	2303      	movs	r3, #3
 80021b2:	f000 bc55 	b.w	8002a60 <HAL_RCC_OscConfig+0x106c>
 80021b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021ba:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80021be:	2202      	movs	r2, #2
 80021c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021c6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	fa93 f2a3 	rbit	r2, r3
 80021d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021d4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80021d8:	601a      	str	r2, [r3, #0]
 80021da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021de:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80021e2:	2202      	movs	r2, #2
 80021e4:	601a      	str	r2, [r3, #0]
 80021e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021ea:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	fa93 f2a3 	rbit	r2, r3
 80021f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021f8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80021fc:	601a      	str	r2, [r3, #0]
 80021fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002202:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002206:	2202      	movs	r2, #2
 8002208:	601a      	str	r2, [r3, #0]
 800220a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800220e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	fa93 f2a3 	rbit	r2, r3
 8002218:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800221c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002220:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002222:	4b41      	ldr	r3, [pc, #260]	@ (8002328 <HAL_RCC_OscConfig+0x934>)
 8002224:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002226:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800222a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800222e:	2102      	movs	r1, #2
 8002230:	6019      	str	r1, [r3, #0]
 8002232:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002236:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	fa93 f1a3 	rbit	r1, r3
 8002240:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002244:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002248:	6019      	str	r1, [r3, #0]
  return result;
 800224a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800224e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	fab3 f383 	clz	r3, r3
 8002258:	b2db      	uxtb	r3, r3
 800225a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800225e:	b2db      	uxtb	r3, r3
 8002260:	f003 031f 	and.w	r3, r3, #31
 8002264:	2101      	movs	r1, #1
 8002266:	fa01 f303 	lsl.w	r3, r1, r3
 800226a:	4013      	ands	r3, r2
 800226c:	2b00      	cmp	r3, #0
 800226e:	d197      	bne.n	80021a0 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002270:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002274:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0304 	and.w	r3, r3, #4
 8002280:	2b00      	cmp	r3, #0
 8002282:	f000 81a1 	beq.w	80025c8 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002286:	2300      	movs	r3, #0
 8002288:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800228c:	4b26      	ldr	r3, [pc, #152]	@ (8002328 <HAL_RCC_OscConfig+0x934>)
 800228e:	69db      	ldr	r3, [r3, #28]
 8002290:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002294:	2b00      	cmp	r3, #0
 8002296:	d116      	bne.n	80022c6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002298:	4b23      	ldr	r3, [pc, #140]	@ (8002328 <HAL_RCC_OscConfig+0x934>)
 800229a:	69db      	ldr	r3, [r3, #28]
 800229c:	4a22      	ldr	r2, [pc, #136]	@ (8002328 <HAL_RCC_OscConfig+0x934>)
 800229e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022a2:	61d3      	str	r3, [r2, #28]
 80022a4:	4b20      	ldr	r3, [pc, #128]	@ (8002328 <HAL_RCC_OscConfig+0x934>)
 80022a6:	69db      	ldr	r3, [r3, #28]
 80022a8:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80022ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022b0:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80022b4:	601a      	str	r2, [r3, #0]
 80022b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022ba:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80022be:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80022c0:	2301      	movs	r3, #1
 80022c2:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022c6:	4b1a      	ldr	r3, [pc, #104]	@ (8002330 <HAL_RCC_OscConfig+0x93c>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d11a      	bne.n	8002308 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022d2:	4b17      	ldr	r3, [pc, #92]	@ (8002330 <HAL_RCC_OscConfig+0x93c>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a16      	ldr	r2, [pc, #88]	@ (8002330 <HAL_RCC_OscConfig+0x93c>)
 80022d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022dc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022de:	f7fe fa73 	bl	80007c8 <HAL_GetTick>
 80022e2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022e6:	e009      	b.n	80022fc <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022e8:	f7fe fa6e 	bl	80007c8 <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80022f2:	1ad3      	subs	r3, r2, r3
 80022f4:	2b64      	cmp	r3, #100	@ 0x64
 80022f6:	d901      	bls.n	80022fc <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80022f8:	2303      	movs	r3, #3
 80022fa:	e3b1      	b.n	8002a60 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022fc:	4b0c      	ldr	r3, [pc, #48]	@ (8002330 <HAL_RCC_OscConfig+0x93c>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002304:	2b00      	cmp	r3, #0
 8002306:	d0ef      	beq.n	80022e8 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002308:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800230c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	2b01      	cmp	r3, #1
 8002316:	d10d      	bne.n	8002334 <HAL_RCC_OscConfig+0x940>
 8002318:	4b03      	ldr	r3, [pc, #12]	@ (8002328 <HAL_RCC_OscConfig+0x934>)
 800231a:	6a1b      	ldr	r3, [r3, #32]
 800231c:	4a02      	ldr	r2, [pc, #8]	@ (8002328 <HAL_RCC_OscConfig+0x934>)
 800231e:	f043 0301 	orr.w	r3, r3, #1
 8002322:	6213      	str	r3, [r2, #32]
 8002324:	e03c      	b.n	80023a0 <HAL_RCC_OscConfig+0x9ac>
 8002326:	bf00      	nop
 8002328:	40021000 	.word	0x40021000
 800232c:	10908120 	.word	0x10908120
 8002330:	40007000 	.word	0x40007000
 8002334:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002338:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d10c      	bne.n	800235e <HAL_RCC_OscConfig+0x96a>
 8002344:	4bc1      	ldr	r3, [pc, #772]	@ (800264c <HAL_RCC_OscConfig+0xc58>)
 8002346:	6a1b      	ldr	r3, [r3, #32]
 8002348:	4ac0      	ldr	r2, [pc, #768]	@ (800264c <HAL_RCC_OscConfig+0xc58>)
 800234a:	f023 0301 	bic.w	r3, r3, #1
 800234e:	6213      	str	r3, [r2, #32]
 8002350:	4bbe      	ldr	r3, [pc, #760]	@ (800264c <HAL_RCC_OscConfig+0xc58>)
 8002352:	6a1b      	ldr	r3, [r3, #32]
 8002354:	4abd      	ldr	r2, [pc, #756]	@ (800264c <HAL_RCC_OscConfig+0xc58>)
 8002356:	f023 0304 	bic.w	r3, r3, #4
 800235a:	6213      	str	r3, [r2, #32]
 800235c:	e020      	b.n	80023a0 <HAL_RCC_OscConfig+0x9ac>
 800235e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002362:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	2b05      	cmp	r3, #5
 800236c:	d10c      	bne.n	8002388 <HAL_RCC_OscConfig+0x994>
 800236e:	4bb7      	ldr	r3, [pc, #732]	@ (800264c <HAL_RCC_OscConfig+0xc58>)
 8002370:	6a1b      	ldr	r3, [r3, #32]
 8002372:	4ab6      	ldr	r2, [pc, #728]	@ (800264c <HAL_RCC_OscConfig+0xc58>)
 8002374:	f043 0304 	orr.w	r3, r3, #4
 8002378:	6213      	str	r3, [r2, #32]
 800237a:	4bb4      	ldr	r3, [pc, #720]	@ (800264c <HAL_RCC_OscConfig+0xc58>)
 800237c:	6a1b      	ldr	r3, [r3, #32]
 800237e:	4ab3      	ldr	r2, [pc, #716]	@ (800264c <HAL_RCC_OscConfig+0xc58>)
 8002380:	f043 0301 	orr.w	r3, r3, #1
 8002384:	6213      	str	r3, [r2, #32]
 8002386:	e00b      	b.n	80023a0 <HAL_RCC_OscConfig+0x9ac>
 8002388:	4bb0      	ldr	r3, [pc, #704]	@ (800264c <HAL_RCC_OscConfig+0xc58>)
 800238a:	6a1b      	ldr	r3, [r3, #32]
 800238c:	4aaf      	ldr	r2, [pc, #700]	@ (800264c <HAL_RCC_OscConfig+0xc58>)
 800238e:	f023 0301 	bic.w	r3, r3, #1
 8002392:	6213      	str	r3, [r2, #32]
 8002394:	4bad      	ldr	r3, [pc, #692]	@ (800264c <HAL_RCC_OscConfig+0xc58>)
 8002396:	6a1b      	ldr	r3, [r3, #32]
 8002398:	4aac      	ldr	r2, [pc, #688]	@ (800264c <HAL_RCC_OscConfig+0xc58>)
 800239a:	f023 0304 	bic.w	r3, r3, #4
 800239e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023a4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	f000 8081 	beq.w	80024b4 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023b2:	f7fe fa09 	bl	80007c8 <HAL_GetTick>
 80023b6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023ba:	e00b      	b.n	80023d4 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023bc:	f7fe fa04 	bl	80007c8 <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80023c6:	1ad3      	subs	r3, r2, r3
 80023c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d901      	bls.n	80023d4 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80023d0:	2303      	movs	r3, #3
 80023d2:	e345      	b.n	8002a60 <HAL_RCC_OscConfig+0x106c>
 80023d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023d8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80023dc:	2202      	movs	r2, #2
 80023de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023e4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	fa93 f2a3 	rbit	r2, r3
 80023ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023f2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80023f6:	601a      	str	r2, [r3, #0]
 80023f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023fc:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002400:	2202      	movs	r2, #2
 8002402:	601a      	str	r2, [r3, #0]
 8002404:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002408:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	fa93 f2a3 	rbit	r2, r3
 8002412:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002416:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800241a:	601a      	str	r2, [r3, #0]
  return result;
 800241c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002420:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002424:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002426:	fab3 f383 	clz	r3, r3
 800242a:	b2db      	uxtb	r3, r3
 800242c:	095b      	lsrs	r3, r3, #5
 800242e:	b2db      	uxtb	r3, r3
 8002430:	f043 0302 	orr.w	r3, r3, #2
 8002434:	b2db      	uxtb	r3, r3
 8002436:	2b02      	cmp	r3, #2
 8002438:	d102      	bne.n	8002440 <HAL_RCC_OscConfig+0xa4c>
 800243a:	4b84      	ldr	r3, [pc, #528]	@ (800264c <HAL_RCC_OscConfig+0xc58>)
 800243c:	6a1b      	ldr	r3, [r3, #32]
 800243e:	e013      	b.n	8002468 <HAL_RCC_OscConfig+0xa74>
 8002440:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002444:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002448:	2202      	movs	r2, #2
 800244a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800244c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002450:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	fa93 f2a3 	rbit	r2, r3
 800245a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800245e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002462:	601a      	str	r2, [r3, #0]
 8002464:	4b79      	ldr	r3, [pc, #484]	@ (800264c <HAL_RCC_OscConfig+0xc58>)
 8002466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002468:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800246c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002470:	2102      	movs	r1, #2
 8002472:	6011      	str	r1, [r2, #0]
 8002474:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002478:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 800247c:	6812      	ldr	r2, [r2, #0]
 800247e:	fa92 f1a2 	rbit	r1, r2
 8002482:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002486:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800248a:	6011      	str	r1, [r2, #0]
  return result;
 800248c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002490:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002494:	6812      	ldr	r2, [r2, #0]
 8002496:	fab2 f282 	clz	r2, r2
 800249a:	b2d2      	uxtb	r2, r2
 800249c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80024a0:	b2d2      	uxtb	r2, r2
 80024a2:	f002 021f 	and.w	r2, r2, #31
 80024a6:	2101      	movs	r1, #1
 80024a8:	fa01 f202 	lsl.w	r2, r1, r2
 80024ac:	4013      	ands	r3, r2
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d084      	beq.n	80023bc <HAL_RCC_OscConfig+0x9c8>
 80024b2:	e07f      	b.n	80025b4 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024b4:	f7fe f988 	bl	80007c8 <HAL_GetTick>
 80024b8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024bc:	e00b      	b.n	80024d6 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024be:	f7fe f983 	bl	80007c8 <HAL_GetTick>
 80024c2:	4602      	mov	r2, r0
 80024c4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d901      	bls.n	80024d6 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80024d2:	2303      	movs	r3, #3
 80024d4:	e2c4      	b.n	8002a60 <HAL_RCC_OscConfig+0x106c>
 80024d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024da:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80024de:	2202      	movs	r2, #2
 80024e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024e6:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	fa93 f2a3 	rbit	r2, r3
 80024f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024f4:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80024f8:	601a      	str	r2, [r3, #0]
 80024fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024fe:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002502:	2202      	movs	r2, #2
 8002504:	601a      	str	r2, [r3, #0]
 8002506:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800250a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	fa93 f2a3 	rbit	r2, r3
 8002514:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002518:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800251c:	601a      	str	r2, [r3, #0]
  return result;
 800251e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002522:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002526:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002528:	fab3 f383 	clz	r3, r3
 800252c:	b2db      	uxtb	r3, r3
 800252e:	095b      	lsrs	r3, r3, #5
 8002530:	b2db      	uxtb	r3, r3
 8002532:	f043 0302 	orr.w	r3, r3, #2
 8002536:	b2db      	uxtb	r3, r3
 8002538:	2b02      	cmp	r3, #2
 800253a:	d102      	bne.n	8002542 <HAL_RCC_OscConfig+0xb4e>
 800253c:	4b43      	ldr	r3, [pc, #268]	@ (800264c <HAL_RCC_OscConfig+0xc58>)
 800253e:	6a1b      	ldr	r3, [r3, #32]
 8002540:	e013      	b.n	800256a <HAL_RCC_OscConfig+0xb76>
 8002542:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002546:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800254a:	2202      	movs	r2, #2
 800254c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800254e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002552:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	fa93 f2a3 	rbit	r2, r3
 800255c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002560:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002564:	601a      	str	r2, [r3, #0]
 8002566:	4b39      	ldr	r3, [pc, #228]	@ (800264c <HAL_RCC_OscConfig+0xc58>)
 8002568:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800256a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800256e:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002572:	2102      	movs	r1, #2
 8002574:	6011      	str	r1, [r2, #0]
 8002576:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800257a:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800257e:	6812      	ldr	r2, [r2, #0]
 8002580:	fa92 f1a2 	rbit	r1, r2
 8002584:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002588:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800258c:	6011      	str	r1, [r2, #0]
  return result;
 800258e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002592:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002596:	6812      	ldr	r2, [r2, #0]
 8002598:	fab2 f282 	clz	r2, r2
 800259c:	b2d2      	uxtb	r2, r2
 800259e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80025a2:	b2d2      	uxtb	r2, r2
 80025a4:	f002 021f 	and.w	r2, r2, #31
 80025a8:	2101      	movs	r1, #1
 80025aa:	fa01 f202 	lsl.w	r2, r1, r2
 80025ae:	4013      	ands	r3, r2
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d184      	bne.n	80024be <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80025b4:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d105      	bne.n	80025c8 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025bc:	4b23      	ldr	r3, [pc, #140]	@ (800264c <HAL_RCC_OscConfig+0xc58>)
 80025be:	69db      	ldr	r3, [r3, #28]
 80025c0:	4a22      	ldr	r2, [pc, #136]	@ (800264c <HAL_RCC_OscConfig+0xc58>)
 80025c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025c6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025cc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	69db      	ldr	r3, [r3, #28]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	f000 8242 	beq.w	8002a5e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025da:	4b1c      	ldr	r3, [pc, #112]	@ (800264c <HAL_RCC_OscConfig+0xc58>)
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	f003 030c 	and.w	r3, r3, #12
 80025e2:	2b08      	cmp	r3, #8
 80025e4:	f000 8213 	beq.w	8002a0e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025ec:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	69db      	ldr	r3, [r3, #28]
 80025f4:	2b02      	cmp	r3, #2
 80025f6:	f040 8162 	bne.w	80028be <HAL_RCC_OscConfig+0xeca>
 80025fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025fe:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002602:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002606:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002608:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800260c:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	fa93 f2a3 	rbit	r2, r3
 8002616:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800261a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800261e:	601a      	str	r2, [r3, #0]
  return result;
 8002620:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002624:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002628:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800262a:	fab3 f383 	clz	r3, r3
 800262e:	b2db      	uxtb	r3, r3
 8002630:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002634:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	461a      	mov	r2, r3
 800263c:	2300      	movs	r3, #0
 800263e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002640:	f7fe f8c2 	bl	80007c8 <HAL_GetTick>
 8002644:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002648:	e00c      	b.n	8002664 <HAL_RCC_OscConfig+0xc70>
 800264a:	bf00      	nop
 800264c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002650:	f7fe f8ba 	bl	80007c8 <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	2b02      	cmp	r3, #2
 800265e:	d901      	bls.n	8002664 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002660:	2303      	movs	r3, #3
 8002662:	e1fd      	b.n	8002a60 <HAL_RCC_OscConfig+0x106c>
 8002664:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002668:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800266c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002670:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002672:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002676:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	fa93 f2a3 	rbit	r2, r3
 8002680:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002684:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002688:	601a      	str	r2, [r3, #0]
  return result;
 800268a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800268e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002692:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002694:	fab3 f383 	clz	r3, r3
 8002698:	b2db      	uxtb	r3, r3
 800269a:	095b      	lsrs	r3, r3, #5
 800269c:	b2db      	uxtb	r3, r3
 800269e:	f043 0301 	orr.w	r3, r3, #1
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d102      	bne.n	80026ae <HAL_RCC_OscConfig+0xcba>
 80026a8:	4bb0      	ldr	r3, [pc, #704]	@ (800296c <HAL_RCC_OscConfig+0xf78>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	e027      	b.n	80026fe <HAL_RCC_OscConfig+0xd0a>
 80026ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026b2:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80026b6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80026ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026c0:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	fa93 f2a3 	rbit	r2, r3
 80026ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026ce:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80026d2:	601a      	str	r2, [r3, #0]
 80026d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026d8:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80026dc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80026e0:	601a      	str	r2, [r3, #0]
 80026e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026e6:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	fa93 f2a3 	rbit	r2, r3
 80026f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026f4:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80026f8:	601a      	str	r2, [r3, #0]
 80026fa:	4b9c      	ldr	r3, [pc, #624]	@ (800296c <HAL_RCC_OscConfig+0xf78>)
 80026fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026fe:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002702:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002706:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800270a:	6011      	str	r1, [r2, #0]
 800270c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002710:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002714:	6812      	ldr	r2, [r2, #0]
 8002716:	fa92 f1a2 	rbit	r1, r2
 800271a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800271e:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002722:	6011      	str	r1, [r2, #0]
  return result;
 8002724:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002728:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800272c:	6812      	ldr	r2, [r2, #0]
 800272e:	fab2 f282 	clz	r2, r2
 8002732:	b2d2      	uxtb	r2, r2
 8002734:	f042 0220 	orr.w	r2, r2, #32
 8002738:	b2d2      	uxtb	r2, r2
 800273a:	f002 021f 	and.w	r2, r2, #31
 800273e:	2101      	movs	r1, #1
 8002740:	fa01 f202 	lsl.w	r2, r1, r2
 8002744:	4013      	ands	r3, r2
 8002746:	2b00      	cmp	r3, #0
 8002748:	d182      	bne.n	8002650 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800274a:	4b88      	ldr	r3, [pc, #544]	@ (800296c <HAL_RCC_OscConfig+0xf78>)
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002752:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002756:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800275e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002762:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	6a1b      	ldr	r3, [r3, #32]
 800276a:	430b      	orrs	r3, r1
 800276c:	497f      	ldr	r1, [pc, #508]	@ (800296c <HAL_RCC_OscConfig+0xf78>)
 800276e:	4313      	orrs	r3, r2
 8002770:	604b      	str	r3, [r1, #4]
 8002772:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002776:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800277a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800277e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002780:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002784:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	fa93 f2a3 	rbit	r2, r3
 800278e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002792:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002796:	601a      	str	r2, [r3, #0]
  return result;
 8002798:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800279c:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80027a0:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027a2:	fab3 f383 	clz	r3, r3
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80027ac:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	461a      	mov	r2, r3
 80027b4:	2301      	movs	r3, #1
 80027b6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b8:	f7fe f806 	bl	80007c8 <HAL_GetTick>
 80027bc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027c0:	e009      	b.n	80027d6 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027c2:	f7fe f801 	bl	80007c8 <HAL_GetTick>
 80027c6:	4602      	mov	r2, r0
 80027c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	d901      	bls.n	80027d6 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e144      	b.n	8002a60 <HAL_RCC_OscConfig+0x106c>
 80027d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027da:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80027de:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80027e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027e8:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	fa93 f2a3 	rbit	r2, r3
 80027f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027f6:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80027fa:	601a      	str	r2, [r3, #0]
  return result;
 80027fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002800:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002804:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002806:	fab3 f383 	clz	r3, r3
 800280a:	b2db      	uxtb	r3, r3
 800280c:	095b      	lsrs	r3, r3, #5
 800280e:	b2db      	uxtb	r3, r3
 8002810:	f043 0301 	orr.w	r3, r3, #1
 8002814:	b2db      	uxtb	r3, r3
 8002816:	2b01      	cmp	r3, #1
 8002818:	d102      	bne.n	8002820 <HAL_RCC_OscConfig+0xe2c>
 800281a:	4b54      	ldr	r3, [pc, #336]	@ (800296c <HAL_RCC_OscConfig+0xf78>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	e027      	b.n	8002870 <HAL_RCC_OscConfig+0xe7c>
 8002820:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002824:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002828:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800282c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800282e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002832:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	fa93 f2a3 	rbit	r2, r3
 800283c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002840:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002844:	601a      	str	r2, [r3, #0]
 8002846:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800284a:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800284e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002852:	601a      	str	r2, [r3, #0]
 8002854:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002858:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	fa93 f2a3 	rbit	r2, r3
 8002862:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002866:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800286a:	601a      	str	r2, [r3, #0]
 800286c:	4b3f      	ldr	r3, [pc, #252]	@ (800296c <HAL_RCC_OscConfig+0xf78>)
 800286e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002870:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002874:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002878:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800287c:	6011      	str	r1, [r2, #0]
 800287e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002882:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002886:	6812      	ldr	r2, [r2, #0]
 8002888:	fa92 f1a2 	rbit	r1, r2
 800288c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002890:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002894:	6011      	str	r1, [r2, #0]
  return result;
 8002896:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800289a:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800289e:	6812      	ldr	r2, [r2, #0]
 80028a0:	fab2 f282 	clz	r2, r2
 80028a4:	b2d2      	uxtb	r2, r2
 80028a6:	f042 0220 	orr.w	r2, r2, #32
 80028aa:	b2d2      	uxtb	r2, r2
 80028ac:	f002 021f 	and.w	r2, r2, #31
 80028b0:	2101      	movs	r1, #1
 80028b2:	fa01 f202 	lsl.w	r2, r1, r2
 80028b6:	4013      	ands	r3, r2
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d082      	beq.n	80027c2 <HAL_RCC_OscConfig+0xdce>
 80028bc:	e0cf      	b.n	8002a5e <HAL_RCC_OscConfig+0x106a>
 80028be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028c2:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80028c6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80028ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028d0:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	fa93 f2a3 	rbit	r2, r3
 80028da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028de:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80028e2:	601a      	str	r2, [r3, #0]
  return result;
 80028e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028e8:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80028ec:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028ee:	fab3 f383 	clz	r3, r3
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80028f8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	461a      	mov	r2, r3
 8002900:	2300      	movs	r3, #0
 8002902:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002904:	f7fd ff60 	bl	80007c8 <HAL_GetTick>
 8002908:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800290c:	e009      	b.n	8002922 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800290e:	f7fd ff5b 	bl	80007c8 <HAL_GetTick>
 8002912:	4602      	mov	r2, r0
 8002914:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	2b02      	cmp	r3, #2
 800291c:	d901      	bls.n	8002922 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800291e:	2303      	movs	r3, #3
 8002920:	e09e      	b.n	8002a60 <HAL_RCC_OscConfig+0x106c>
 8002922:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002926:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800292a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800292e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002930:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002934:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	fa93 f2a3 	rbit	r2, r3
 800293e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002942:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002946:	601a      	str	r2, [r3, #0]
  return result;
 8002948:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800294c:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002950:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002952:	fab3 f383 	clz	r3, r3
 8002956:	b2db      	uxtb	r3, r3
 8002958:	095b      	lsrs	r3, r3, #5
 800295a:	b2db      	uxtb	r3, r3
 800295c:	f043 0301 	orr.w	r3, r3, #1
 8002960:	b2db      	uxtb	r3, r3
 8002962:	2b01      	cmp	r3, #1
 8002964:	d104      	bne.n	8002970 <HAL_RCC_OscConfig+0xf7c>
 8002966:	4b01      	ldr	r3, [pc, #4]	@ (800296c <HAL_RCC_OscConfig+0xf78>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	e029      	b.n	80029c0 <HAL_RCC_OscConfig+0xfcc>
 800296c:	40021000 	.word	0x40021000
 8002970:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002974:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002978:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800297c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800297e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002982:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	fa93 f2a3 	rbit	r2, r3
 800298c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002990:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002994:	601a      	str	r2, [r3, #0]
 8002996:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800299a:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800299e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80029a2:	601a      	str	r2, [r3, #0]
 80029a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029a8:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	fa93 f2a3 	rbit	r2, r3
 80029b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029b6:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80029ba:	601a      	str	r2, [r3, #0]
 80029bc:	4b2b      	ldr	r3, [pc, #172]	@ (8002a6c <HAL_RCC_OscConfig+0x1078>)
 80029be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029c0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80029c4:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80029c8:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80029cc:	6011      	str	r1, [r2, #0]
 80029ce:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80029d2:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80029d6:	6812      	ldr	r2, [r2, #0]
 80029d8:	fa92 f1a2 	rbit	r1, r2
 80029dc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80029e0:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80029e4:	6011      	str	r1, [r2, #0]
  return result;
 80029e6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80029ea:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80029ee:	6812      	ldr	r2, [r2, #0]
 80029f0:	fab2 f282 	clz	r2, r2
 80029f4:	b2d2      	uxtb	r2, r2
 80029f6:	f042 0220 	orr.w	r2, r2, #32
 80029fa:	b2d2      	uxtb	r2, r2
 80029fc:	f002 021f 	and.w	r2, r2, #31
 8002a00:	2101      	movs	r1, #1
 8002a02:	fa01 f202 	lsl.w	r2, r1, r2
 8002a06:	4013      	ands	r3, r2
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d180      	bne.n	800290e <HAL_RCC_OscConfig+0xf1a>
 8002a0c:	e027      	b.n	8002a5e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a12:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	69db      	ldr	r3, [r3, #28]
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d101      	bne.n	8002a22 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e01e      	b.n	8002a60 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a22:	4b12      	ldr	r3, [pc, #72]	@ (8002a6c <HAL_RCC_OscConfig+0x1078>)
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002a2a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002a2e:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002a32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a36:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	6a1b      	ldr	r3, [r3, #32]
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d10b      	bne.n	8002a5a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002a42:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002a46:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002a4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a4e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d001      	beq.n	8002a5e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e000      	b.n	8002a60 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002a5e:	2300      	movs	r3, #0
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	40021000 	.word	0x40021000

08002a70 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b09e      	sub	sp, #120	@ 0x78
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d101      	bne.n	8002a88 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e162      	b.n	8002d4e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a88:	4b90      	ldr	r3, [pc, #576]	@ (8002ccc <HAL_RCC_ClockConfig+0x25c>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0307 	and.w	r3, r3, #7
 8002a90:	683a      	ldr	r2, [r7, #0]
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d910      	bls.n	8002ab8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a96:	4b8d      	ldr	r3, [pc, #564]	@ (8002ccc <HAL_RCC_ClockConfig+0x25c>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f023 0207 	bic.w	r2, r3, #7
 8002a9e:	498b      	ldr	r1, [pc, #556]	@ (8002ccc <HAL_RCC_ClockConfig+0x25c>)
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aa6:	4b89      	ldr	r3, [pc, #548]	@ (8002ccc <HAL_RCC_ClockConfig+0x25c>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0307 	and.w	r3, r3, #7
 8002aae:	683a      	ldr	r2, [r7, #0]
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d001      	beq.n	8002ab8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e14a      	b.n	8002d4e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0302 	and.w	r3, r3, #2
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d008      	beq.n	8002ad6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ac4:	4b82      	ldr	r3, [pc, #520]	@ (8002cd0 <HAL_RCC_ClockConfig+0x260>)
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	497f      	ldr	r1, [pc, #508]	@ (8002cd0 <HAL_RCC_ClockConfig+0x260>)
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0301 	and.w	r3, r3, #1
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	f000 80dc 	beq.w	8002c9c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d13c      	bne.n	8002b66 <HAL_RCC_ClockConfig+0xf6>
 8002aec:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002af0:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002af4:	fa93 f3a3 	rbit	r3, r3
 8002af8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002afa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002afc:	fab3 f383 	clz	r3, r3
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	095b      	lsrs	r3, r3, #5
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	f043 0301 	orr.w	r3, r3, #1
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d102      	bne.n	8002b16 <HAL_RCC_ClockConfig+0xa6>
 8002b10:	4b6f      	ldr	r3, [pc, #444]	@ (8002cd0 <HAL_RCC_ClockConfig+0x260>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	e00f      	b.n	8002b36 <HAL_RCC_ClockConfig+0xc6>
 8002b16:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002b1a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b1c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002b1e:	fa93 f3a3 	rbit	r3, r3
 8002b22:	667b      	str	r3, [r7, #100]	@ 0x64
 8002b24:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002b28:	663b      	str	r3, [r7, #96]	@ 0x60
 8002b2a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002b2c:	fa93 f3a3 	rbit	r3, r3
 8002b30:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002b32:	4b67      	ldr	r3, [pc, #412]	@ (8002cd0 <HAL_RCC_ClockConfig+0x260>)
 8002b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b36:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002b3a:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002b3c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002b3e:	fa92 f2a2 	rbit	r2, r2
 8002b42:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002b44:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002b46:	fab2 f282 	clz	r2, r2
 8002b4a:	b2d2      	uxtb	r2, r2
 8002b4c:	f042 0220 	orr.w	r2, r2, #32
 8002b50:	b2d2      	uxtb	r2, r2
 8002b52:	f002 021f 	and.w	r2, r2, #31
 8002b56:	2101      	movs	r1, #1
 8002b58:	fa01 f202 	lsl.w	r2, r1, r2
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d17b      	bne.n	8002c5a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e0f3      	b.n	8002d4e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d13c      	bne.n	8002be8 <HAL_RCC_ClockConfig+0x178>
 8002b6e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002b72:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b74:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b76:	fa93 f3a3 	rbit	r3, r3
 8002b7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002b7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b7e:	fab3 f383 	clz	r3, r3
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	095b      	lsrs	r3, r3, #5
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	f043 0301 	orr.w	r3, r3, #1
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d102      	bne.n	8002b98 <HAL_RCC_ClockConfig+0x128>
 8002b92:	4b4f      	ldr	r3, [pc, #316]	@ (8002cd0 <HAL_RCC_ClockConfig+0x260>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	e00f      	b.n	8002bb8 <HAL_RCC_ClockConfig+0x148>
 8002b98:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002b9c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002ba0:	fa93 f3a3 	rbit	r3, r3
 8002ba4:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ba6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002baa:	643b      	str	r3, [r7, #64]	@ 0x40
 8002bac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002bae:	fa93 f3a3 	rbit	r3, r3
 8002bb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002bb4:	4b46      	ldr	r3, [pc, #280]	@ (8002cd0 <HAL_RCC_ClockConfig+0x260>)
 8002bb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bb8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002bbc:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002bbe:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002bc0:	fa92 f2a2 	rbit	r2, r2
 8002bc4:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002bc6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002bc8:	fab2 f282 	clz	r2, r2
 8002bcc:	b2d2      	uxtb	r2, r2
 8002bce:	f042 0220 	orr.w	r2, r2, #32
 8002bd2:	b2d2      	uxtb	r2, r2
 8002bd4:	f002 021f 	and.w	r2, r2, #31
 8002bd8:	2101      	movs	r1, #1
 8002bda:	fa01 f202 	lsl.w	r2, r1, r2
 8002bde:	4013      	ands	r3, r2
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d13a      	bne.n	8002c5a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e0b2      	b.n	8002d4e <HAL_RCC_ClockConfig+0x2de>
 8002be8:	2302      	movs	r3, #2
 8002bea:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bee:	fa93 f3a3 	rbit	r3, r3
 8002bf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002bf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bf6:	fab3 f383 	clz	r3, r3
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	095b      	lsrs	r3, r3, #5
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	f043 0301 	orr.w	r3, r3, #1
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d102      	bne.n	8002c10 <HAL_RCC_ClockConfig+0x1a0>
 8002c0a:	4b31      	ldr	r3, [pc, #196]	@ (8002cd0 <HAL_RCC_ClockConfig+0x260>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	e00d      	b.n	8002c2c <HAL_RCC_ClockConfig+0x1bc>
 8002c10:	2302      	movs	r3, #2
 8002c12:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c16:	fa93 f3a3 	rbit	r3, r3
 8002c1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c1c:	2302      	movs	r3, #2
 8002c1e:	623b      	str	r3, [r7, #32]
 8002c20:	6a3b      	ldr	r3, [r7, #32]
 8002c22:	fa93 f3a3 	rbit	r3, r3
 8002c26:	61fb      	str	r3, [r7, #28]
 8002c28:	4b29      	ldr	r3, [pc, #164]	@ (8002cd0 <HAL_RCC_ClockConfig+0x260>)
 8002c2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c2c:	2202      	movs	r2, #2
 8002c2e:	61ba      	str	r2, [r7, #24]
 8002c30:	69ba      	ldr	r2, [r7, #24]
 8002c32:	fa92 f2a2 	rbit	r2, r2
 8002c36:	617a      	str	r2, [r7, #20]
  return result;
 8002c38:	697a      	ldr	r2, [r7, #20]
 8002c3a:	fab2 f282 	clz	r2, r2
 8002c3e:	b2d2      	uxtb	r2, r2
 8002c40:	f042 0220 	orr.w	r2, r2, #32
 8002c44:	b2d2      	uxtb	r2, r2
 8002c46:	f002 021f 	and.w	r2, r2, #31
 8002c4a:	2101      	movs	r1, #1
 8002c4c:	fa01 f202 	lsl.w	r2, r1, r2
 8002c50:	4013      	ands	r3, r2
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d101      	bne.n	8002c5a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e079      	b.n	8002d4e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c5a:	4b1d      	ldr	r3, [pc, #116]	@ (8002cd0 <HAL_RCC_ClockConfig+0x260>)
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f023 0203 	bic.w	r2, r3, #3
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	491a      	ldr	r1, [pc, #104]	@ (8002cd0 <HAL_RCC_ClockConfig+0x260>)
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c6c:	f7fd fdac 	bl	80007c8 <HAL_GetTick>
 8002c70:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c72:	e00a      	b.n	8002c8a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c74:	f7fd fda8 	bl	80007c8 <HAL_GetTick>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d901      	bls.n	8002c8a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e061      	b.n	8002d4e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c8a:	4b11      	ldr	r3, [pc, #68]	@ (8002cd0 <HAL_RCC_ClockConfig+0x260>)
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	f003 020c 	and.w	r2, r3, #12
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d1eb      	bne.n	8002c74 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c9c:	4b0b      	ldr	r3, [pc, #44]	@ (8002ccc <HAL_RCC_ClockConfig+0x25c>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 0307 	and.w	r3, r3, #7
 8002ca4:	683a      	ldr	r2, [r7, #0]
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d214      	bcs.n	8002cd4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002caa:	4b08      	ldr	r3, [pc, #32]	@ (8002ccc <HAL_RCC_ClockConfig+0x25c>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f023 0207 	bic.w	r2, r3, #7
 8002cb2:	4906      	ldr	r1, [pc, #24]	@ (8002ccc <HAL_RCC_ClockConfig+0x25c>)
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cba:	4b04      	ldr	r3, [pc, #16]	@ (8002ccc <HAL_RCC_ClockConfig+0x25c>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0307 	and.w	r3, r3, #7
 8002cc2:	683a      	ldr	r2, [r7, #0]
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d005      	beq.n	8002cd4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e040      	b.n	8002d4e <HAL_RCC_ClockConfig+0x2de>
 8002ccc:	40022000 	.word	0x40022000
 8002cd0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0304 	and.w	r3, r3, #4
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d008      	beq.n	8002cf2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ce0:	4b1d      	ldr	r3, [pc, #116]	@ (8002d58 <HAL_RCC_ClockConfig+0x2e8>)
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	491a      	ldr	r1, [pc, #104]	@ (8002d58 <HAL_RCC_ClockConfig+0x2e8>)
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 0308 	and.w	r3, r3, #8
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d009      	beq.n	8002d12 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002cfe:	4b16      	ldr	r3, [pc, #88]	@ (8002d58 <HAL_RCC_ClockConfig+0x2e8>)
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	691b      	ldr	r3, [r3, #16]
 8002d0a:	00db      	lsls	r3, r3, #3
 8002d0c:	4912      	ldr	r1, [pc, #72]	@ (8002d58 <HAL_RCC_ClockConfig+0x2e8>)
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002d12:	f000 f829 	bl	8002d68 <HAL_RCC_GetSysClockFreq>
 8002d16:	4601      	mov	r1, r0
 8002d18:	4b0f      	ldr	r3, [pc, #60]	@ (8002d58 <HAL_RCC_ClockConfig+0x2e8>)
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d20:	22f0      	movs	r2, #240	@ 0xf0
 8002d22:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d24:	693a      	ldr	r2, [r7, #16]
 8002d26:	fa92 f2a2 	rbit	r2, r2
 8002d2a:	60fa      	str	r2, [r7, #12]
  return result;
 8002d2c:	68fa      	ldr	r2, [r7, #12]
 8002d2e:	fab2 f282 	clz	r2, r2
 8002d32:	b2d2      	uxtb	r2, r2
 8002d34:	40d3      	lsrs	r3, r2
 8002d36:	4a09      	ldr	r2, [pc, #36]	@ (8002d5c <HAL_RCC_ClockConfig+0x2ec>)
 8002d38:	5cd3      	ldrb	r3, [r2, r3]
 8002d3a:	fa21 f303 	lsr.w	r3, r1, r3
 8002d3e:	4a08      	ldr	r2, [pc, #32]	@ (8002d60 <HAL_RCC_ClockConfig+0x2f0>)
 8002d40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002d42:	4b08      	ldr	r3, [pc, #32]	@ (8002d64 <HAL_RCC_ClockConfig+0x2f4>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4618      	mov	r0, r3
 8002d48:	f7fd fcfa 	bl	8000740 <HAL_InitTick>
  
  return HAL_OK;
 8002d4c:	2300      	movs	r3, #0
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3778      	adds	r7, #120	@ 0x78
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	40021000 	.word	0x40021000
 8002d5c:	08003660 	.word	0x08003660
 8002d60:	20000000 	.word	0x20000000
 8002d64:	20000004 	.word	0x20000004

08002d68 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b087      	sub	sp, #28
 8002d6c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	60fb      	str	r3, [r7, #12]
 8002d72:	2300      	movs	r3, #0
 8002d74:	60bb      	str	r3, [r7, #8]
 8002d76:	2300      	movs	r3, #0
 8002d78:	617b      	str	r3, [r7, #20]
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002d82:	4b1e      	ldr	r3, [pc, #120]	@ (8002dfc <HAL_RCC_GetSysClockFreq+0x94>)
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	f003 030c 	and.w	r3, r3, #12
 8002d8e:	2b04      	cmp	r3, #4
 8002d90:	d002      	beq.n	8002d98 <HAL_RCC_GetSysClockFreq+0x30>
 8002d92:	2b08      	cmp	r3, #8
 8002d94:	d003      	beq.n	8002d9e <HAL_RCC_GetSysClockFreq+0x36>
 8002d96:	e026      	b.n	8002de6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d98:	4b19      	ldr	r3, [pc, #100]	@ (8002e00 <HAL_RCC_GetSysClockFreq+0x98>)
 8002d9a:	613b      	str	r3, [r7, #16]
      break;
 8002d9c:	e026      	b.n	8002dec <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	0c9b      	lsrs	r3, r3, #18
 8002da2:	f003 030f 	and.w	r3, r3, #15
 8002da6:	4a17      	ldr	r2, [pc, #92]	@ (8002e04 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002da8:	5cd3      	ldrb	r3, [r2, r3]
 8002daa:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002dac:	4b13      	ldr	r3, [pc, #76]	@ (8002dfc <HAL_RCC_GetSysClockFreq+0x94>)
 8002dae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002db0:	f003 030f 	and.w	r3, r3, #15
 8002db4:	4a14      	ldr	r2, [pc, #80]	@ (8002e08 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002db6:	5cd3      	ldrb	r3, [r2, r3]
 8002db8:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d008      	beq.n	8002dd6 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002dc4:	4a0e      	ldr	r2, [pc, #56]	@ (8002e00 <HAL_RCC_GetSysClockFreq+0x98>)
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	fb02 f303 	mul.w	r3, r2, r3
 8002dd2:	617b      	str	r3, [r7, #20]
 8002dd4:	e004      	b.n	8002de0 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4a0c      	ldr	r2, [pc, #48]	@ (8002e0c <HAL_RCC_GetSysClockFreq+0xa4>)
 8002dda:	fb02 f303 	mul.w	r3, r2, r3
 8002dde:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	613b      	str	r3, [r7, #16]
      break;
 8002de4:	e002      	b.n	8002dec <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002de6:	4b06      	ldr	r3, [pc, #24]	@ (8002e00 <HAL_RCC_GetSysClockFreq+0x98>)
 8002de8:	613b      	str	r3, [r7, #16]
      break;
 8002dea:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002dec:	693b      	ldr	r3, [r7, #16]
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	371c      	adds	r7, #28
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr
 8002dfa:	bf00      	nop
 8002dfc:	40021000 	.word	0x40021000
 8002e00:	007a1200 	.word	0x007a1200
 8002e04:	08003678 	.word	0x08003678
 8002e08:	08003688 	.word	0x08003688
 8002e0c:	003d0900 	.word	0x003d0900

08002e10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e10:	b480      	push	{r7}
 8002e12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e14:	4b03      	ldr	r3, [pc, #12]	@ (8002e24 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e16:	681b      	ldr	r3, [r3, #0]
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr
 8002e22:	bf00      	nop
 8002e24:	20000000 	.word	0x20000000

08002e28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b082      	sub	sp, #8
 8002e2c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002e2e:	f7ff ffef 	bl	8002e10 <HAL_RCC_GetHCLKFreq>
 8002e32:	4601      	mov	r1, r0
 8002e34:	4b0b      	ldr	r3, [pc, #44]	@ (8002e64 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002e3c:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002e40:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	fa92 f2a2 	rbit	r2, r2
 8002e48:	603a      	str	r2, [r7, #0]
  return result;
 8002e4a:	683a      	ldr	r2, [r7, #0]
 8002e4c:	fab2 f282 	clz	r2, r2
 8002e50:	b2d2      	uxtb	r2, r2
 8002e52:	40d3      	lsrs	r3, r2
 8002e54:	4a04      	ldr	r2, [pc, #16]	@ (8002e68 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002e56:	5cd3      	ldrb	r3, [r2, r3]
 8002e58:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3708      	adds	r7, #8
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	40021000 	.word	0x40021000
 8002e68:	08003670 	.word	0x08003670

08002e6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b082      	sub	sp, #8
 8002e70:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002e72:	f7ff ffcd 	bl	8002e10 <HAL_RCC_GetHCLKFreq>
 8002e76:	4601      	mov	r1, r0
 8002e78:	4b0b      	ldr	r3, [pc, #44]	@ (8002ea8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8002e80:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002e84:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	fa92 f2a2 	rbit	r2, r2
 8002e8c:	603a      	str	r2, [r7, #0]
  return result;
 8002e8e:	683a      	ldr	r2, [r7, #0]
 8002e90:	fab2 f282 	clz	r2, r2
 8002e94:	b2d2      	uxtb	r2, r2
 8002e96:	40d3      	lsrs	r3, r2
 8002e98:	4a04      	ldr	r2, [pc, #16]	@ (8002eac <HAL_RCC_GetPCLK2Freq+0x40>)
 8002e9a:	5cd3      	ldrb	r3, [r2, r3]
 8002e9c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3708      	adds	r7, #8
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	40021000 	.word	0x40021000
 8002eac:	08003670 	.word	0x08003670

08002eb0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b082      	sub	sp, #8
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d101      	bne.n	8002ec2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e040      	b.n	8002f44 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d106      	bne.n	8002ed8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f7fd fb64 	bl	80005a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2224      	movs	r2, #36	@ 0x24
 8002edc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f022 0201 	bic.w	r2, r2, #1
 8002eec:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d002      	beq.n	8002efc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f000 f95e 	bl	80031b8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	f000 f825 	bl	8002f4c <UART_SetConfig>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d101      	bne.n	8002f0c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e01b      	b.n	8002f44 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	685a      	ldr	r2, [r3, #4]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002f1a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	689a      	ldr	r2, [r3, #8]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002f2a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f042 0201 	orr.w	r2, r2, #1
 8002f3a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	f000 f9dd 	bl	80032fc <UART_CheckIdleState>
 8002f42:	4603      	mov	r3, r0
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3708      	adds	r7, #8
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}

08002f4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b088      	sub	sp, #32
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f54:	2300      	movs	r3, #0
 8002f56:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	689a      	ldr	r2, [r3, #8]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	691b      	ldr	r3, [r3, #16]
 8002f60:	431a      	orrs	r2, r3
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	695b      	ldr	r3, [r3, #20]
 8002f66:	431a      	orrs	r2, r3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	69db      	ldr	r3, [r3, #28]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	4b8a      	ldr	r3, [pc, #552]	@ (80031a0 <UART_SetConfig+0x254>)
 8002f78:	4013      	ands	r3, r2
 8002f7a:	687a      	ldr	r2, [r7, #4]
 8002f7c:	6812      	ldr	r2, [r2, #0]
 8002f7e:	6979      	ldr	r1, [r7, #20]
 8002f80:	430b      	orrs	r3, r1
 8002f82:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	68da      	ldr	r2, [r3, #12]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	430a      	orrs	r2, r1
 8002f98:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	699b      	ldr	r3, [r3, #24]
 8002f9e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6a1b      	ldr	r3, [r3, #32]
 8002fa4:	697a      	ldr	r2, [r7, #20]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	697a      	ldr	r2, [r7, #20]
 8002fba:	430a      	orrs	r2, r1
 8002fbc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a78      	ldr	r2, [pc, #480]	@ (80031a4 <UART_SetConfig+0x258>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d120      	bne.n	800300a <UART_SetConfig+0xbe>
 8002fc8:	4b77      	ldr	r3, [pc, #476]	@ (80031a8 <UART_SetConfig+0x25c>)
 8002fca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fcc:	f003 0303 	and.w	r3, r3, #3
 8002fd0:	2b03      	cmp	r3, #3
 8002fd2:	d817      	bhi.n	8003004 <UART_SetConfig+0xb8>
 8002fd4:	a201      	add	r2, pc, #4	@ (adr r2, 8002fdc <UART_SetConfig+0x90>)
 8002fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fda:	bf00      	nop
 8002fdc:	08002fed 	.word	0x08002fed
 8002fe0:	08002ff9 	.word	0x08002ff9
 8002fe4:	08002fff 	.word	0x08002fff
 8002fe8:	08002ff3 	.word	0x08002ff3
 8002fec:	2300      	movs	r3, #0
 8002fee:	77fb      	strb	r3, [r7, #31]
 8002ff0:	e01d      	b.n	800302e <UART_SetConfig+0xe2>
 8002ff2:	2302      	movs	r3, #2
 8002ff4:	77fb      	strb	r3, [r7, #31]
 8002ff6:	e01a      	b.n	800302e <UART_SetConfig+0xe2>
 8002ff8:	2304      	movs	r3, #4
 8002ffa:	77fb      	strb	r3, [r7, #31]
 8002ffc:	e017      	b.n	800302e <UART_SetConfig+0xe2>
 8002ffe:	2308      	movs	r3, #8
 8003000:	77fb      	strb	r3, [r7, #31]
 8003002:	e014      	b.n	800302e <UART_SetConfig+0xe2>
 8003004:	2310      	movs	r3, #16
 8003006:	77fb      	strb	r3, [r7, #31]
 8003008:	e011      	b.n	800302e <UART_SetConfig+0xe2>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a67      	ldr	r2, [pc, #412]	@ (80031ac <UART_SetConfig+0x260>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d102      	bne.n	800301a <UART_SetConfig+0xce>
 8003014:	2300      	movs	r3, #0
 8003016:	77fb      	strb	r3, [r7, #31]
 8003018:	e009      	b.n	800302e <UART_SetConfig+0xe2>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a64      	ldr	r2, [pc, #400]	@ (80031b0 <UART_SetConfig+0x264>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d102      	bne.n	800302a <UART_SetConfig+0xde>
 8003024:	2300      	movs	r3, #0
 8003026:	77fb      	strb	r3, [r7, #31]
 8003028:	e001      	b.n	800302e <UART_SetConfig+0xe2>
 800302a:	2310      	movs	r3, #16
 800302c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	69db      	ldr	r3, [r3, #28]
 8003032:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003036:	d15a      	bne.n	80030ee <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8003038:	7ffb      	ldrb	r3, [r7, #31]
 800303a:	2b08      	cmp	r3, #8
 800303c:	d827      	bhi.n	800308e <UART_SetConfig+0x142>
 800303e:	a201      	add	r2, pc, #4	@ (adr r2, 8003044 <UART_SetConfig+0xf8>)
 8003040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003044:	08003069 	.word	0x08003069
 8003048:	08003071 	.word	0x08003071
 800304c:	08003079 	.word	0x08003079
 8003050:	0800308f 	.word	0x0800308f
 8003054:	0800307f 	.word	0x0800307f
 8003058:	0800308f 	.word	0x0800308f
 800305c:	0800308f 	.word	0x0800308f
 8003060:	0800308f 	.word	0x0800308f
 8003064:	08003087 	.word	0x08003087
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003068:	f7ff fede 	bl	8002e28 <HAL_RCC_GetPCLK1Freq>
 800306c:	61b8      	str	r0, [r7, #24]
        break;
 800306e:	e013      	b.n	8003098 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003070:	f7ff fefc 	bl	8002e6c <HAL_RCC_GetPCLK2Freq>
 8003074:	61b8      	str	r0, [r7, #24]
        break;
 8003076:	e00f      	b.n	8003098 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003078:	4b4e      	ldr	r3, [pc, #312]	@ (80031b4 <UART_SetConfig+0x268>)
 800307a:	61bb      	str	r3, [r7, #24]
        break;
 800307c:	e00c      	b.n	8003098 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800307e:	f7ff fe73 	bl	8002d68 <HAL_RCC_GetSysClockFreq>
 8003082:	61b8      	str	r0, [r7, #24]
        break;
 8003084:	e008      	b.n	8003098 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003086:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800308a:	61bb      	str	r3, [r7, #24]
        break;
 800308c:	e004      	b.n	8003098 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800308e:	2300      	movs	r3, #0
 8003090:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	77bb      	strb	r3, [r7, #30]
        break;
 8003096:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003098:	69bb      	ldr	r3, [r7, #24]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d074      	beq.n	8003188 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800309e:	69bb      	ldr	r3, [r7, #24]
 80030a0:	005a      	lsls	r2, r3, #1
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	085b      	lsrs	r3, r3, #1
 80030a8:	441a      	add	r2, r3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80030b2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	2b0f      	cmp	r3, #15
 80030b8:	d916      	bls.n	80030e8 <UART_SetConfig+0x19c>
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030c0:	d212      	bcs.n	80030e8 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	f023 030f 	bic.w	r3, r3, #15
 80030ca:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	085b      	lsrs	r3, r3, #1
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	f003 0307 	and.w	r3, r3, #7
 80030d6:	b29a      	uxth	r2, r3
 80030d8:	89fb      	ldrh	r3, [r7, #14]
 80030da:	4313      	orrs	r3, r2
 80030dc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	89fa      	ldrh	r2, [r7, #14]
 80030e4:	60da      	str	r2, [r3, #12]
 80030e6:	e04f      	b.n	8003188 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	77bb      	strb	r3, [r7, #30]
 80030ec:	e04c      	b.n	8003188 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80030ee:	7ffb      	ldrb	r3, [r7, #31]
 80030f0:	2b08      	cmp	r3, #8
 80030f2:	d828      	bhi.n	8003146 <UART_SetConfig+0x1fa>
 80030f4:	a201      	add	r2, pc, #4	@ (adr r2, 80030fc <UART_SetConfig+0x1b0>)
 80030f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030fa:	bf00      	nop
 80030fc:	08003121 	.word	0x08003121
 8003100:	08003129 	.word	0x08003129
 8003104:	08003131 	.word	0x08003131
 8003108:	08003147 	.word	0x08003147
 800310c:	08003137 	.word	0x08003137
 8003110:	08003147 	.word	0x08003147
 8003114:	08003147 	.word	0x08003147
 8003118:	08003147 	.word	0x08003147
 800311c:	0800313f 	.word	0x0800313f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003120:	f7ff fe82 	bl	8002e28 <HAL_RCC_GetPCLK1Freq>
 8003124:	61b8      	str	r0, [r7, #24]
        break;
 8003126:	e013      	b.n	8003150 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003128:	f7ff fea0 	bl	8002e6c <HAL_RCC_GetPCLK2Freq>
 800312c:	61b8      	str	r0, [r7, #24]
        break;
 800312e:	e00f      	b.n	8003150 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003130:	4b20      	ldr	r3, [pc, #128]	@ (80031b4 <UART_SetConfig+0x268>)
 8003132:	61bb      	str	r3, [r7, #24]
        break;
 8003134:	e00c      	b.n	8003150 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003136:	f7ff fe17 	bl	8002d68 <HAL_RCC_GetSysClockFreq>
 800313a:	61b8      	str	r0, [r7, #24]
        break;
 800313c:	e008      	b.n	8003150 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800313e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003142:	61bb      	str	r3, [r7, #24]
        break;
 8003144:	e004      	b.n	8003150 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003146:	2300      	movs	r3, #0
 8003148:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	77bb      	strb	r3, [r7, #30]
        break;
 800314e:	bf00      	nop
    }

    if (pclk != 0U)
 8003150:	69bb      	ldr	r3, [r7, #24]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d018      	beq.n	8003188 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	085a      	lsrs	r2, r3, #1
 800315c:	69bb      	ldr	r3, [r7, #24]
 800315e:	441a      	add	r2, r3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	fbb2 f3f3 	udiv	r3, r2, r3
 8003168:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	2b0f      	cmp	r3, #15
 800316e:	d909      	bls.n	8003184 <UART_SetConfig+0x238>
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003176:	d205      	bcs.n	8003184 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	b29a      	uxth	r2, r3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	60da      	str	r2, [r3, #12]
 8003182:	e001      	b.n	8003188 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2200      	movs	r2, #0
 800318c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003194:	7fbb      	ldrb	r3, [r7, #30]
}
 8003196:	4618      	mov	r0, r3
 8003198:	3720      	adds	r7, #32
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	efff69f3 	.word	0xefff69f3
 80031a4:	40013800 	.word	0x40013800
 80031a8:	40021000 	.word	0x40021000
 80031ac:	40004400 	.word	0x40004400
 80031b0:	40004800 	.word	0x40004800
 80031b4:	007a1200 	.word	0x007a1200

080031b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b083      	sub	sp, #12
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031c4:	f003 0308 	and.w	r3, r3, #8
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d00a      	beq.n	80031e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	430a      	orrs	r2, r1
 80031e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031e6:	f003 0301 	and.w	r3, r3, #1
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d00a      	beq.n	8003204 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	430a      	orrs	r2, r1
 8003202:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003208:	f003 0302 	and.w	r3, r3, #2
 800320c:	2b00      	cmp	r3, #0
 800320e:	d00a      	beq.n	8003226 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	430a      	orrs	r2, r1
 8003224:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800322a:	f003 0304 	and.w	r3, r3, #4
 800322e:	2b00      	cmp	r3, #0
 8003230:	d00a      	beq.n	8003248 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	430a      	orrs	r2, r1
 8003246:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800324c:	f003 0310 	and.w	r3, r3, #16
 8003250:	2b00      	cmp	r3, #0
 8003252:	d00a      	beq.n	800326a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	430a      	orrs	r2, r1
 8003268:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800326e:	f003 0320 	and.w	r3, r3, #32
 8003272:	2b00      	cmp	r3, #0
 8003274:	d00a      	beq.n	800328c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	430a      	orrs	r2, r1
 800328a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003290:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003294:	2b00      	cmp	r3, #0
 8003296:	d01a      	beq.n	80032ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	430a      	orrs	r2, r1
 80032ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80032b6:	d10a      	bne.n	80032ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	430a      	orrs	r2, r1
 80032cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d00a      	beq.n	80032f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	430a      	orrs	r2, r1
 80032ee:	605a      	str	r2, [r3, #4]
  }
}
 80032f0:	bf00      	nop
 80032f2:	370c      	adds	r7, #12
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr

080032fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b098      	sub	sp, #96	@ 0x60
 8003300:	af02      	add	r7, sp, #8
 8003302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2200      	movs	r2, #0
 8003308:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800330c:	f7fd fa5c 	bl	80007c8 <HAL_GetTick>
 8003310:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0308 	and.w	r3, r3, #8
 800331c:	2b08      	cmp	r3, #8
 800331e:	d12e      	bne.n	800337e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003320:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003324:	9300      	str	r3, [sp, #0]
 8003326:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003328:	2200      	movs	r2, #0
 800332a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f000 f88c 	bl	800344c <UART_WaitOnFlagUntilTimeout>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d021      	beq.n	800337e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003340:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003342:	e853 3f00 	ldrex	r3, [r3]
 8003346:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003348:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800334a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800334e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	461a      	mov	r2, r3
 8003356:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003358:	647b      	str	r3, [r7, #68]	@ 0x44
 800335a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800335c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800335e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003360:	e841 2300 	strex	r3, r2, [r1]
 8003364:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003366:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003368:	2b00      	cmp	r3, #0
 800336a:	d1e6      	bne.n	800333a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2220      	movs	r2, #32
 8003370:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2200      	movs	r2, #0
 8003376:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e062      	b.n	8003444 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0304 	and.w	r3, r3, #4
 8003388:	2b04      	cmp	r3, #4
 800338a:	d149      	bne.n	8003420 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800338c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003390:	9300      	str	r3, [sp, #0]
 8003392:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003394:	2200      	movs	r2, #0
 8003396:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f000 f856 	bl	800344c <UART_WaitOnFlagUntilTimeout>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d03c      	beq.n	8003420 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ae:	e853 3f00 	ldrex	r3, [r3]
 80033b2:	623b      	str	r3, [r7, #32]
   return(result);
 80033b4:	6a3b      	ldr	r3, [r7, #32]
 80033b6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80033ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	461a      	mov	r2, r3
 80033c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80033c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80033c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033c8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80033ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80033cc:	e841 2300 	strex	r3, r2, [r1]
 80033d0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80033d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d1e6      	bne.n	80033a6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	3308      	adds	r3, #8
 80033de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	e853 3f00 	ldrex	r3, [r3]
 80033e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f023 0301 	bic.w	r3, r3, #1
 80033ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	3308      	adds	r3, #8
 80033f6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80033f8:	61fa      	str	r2, [r7, #28]
 80033fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033fc:	69b9      	ldr	r1, [r7, #24]
 80033fe:	69fa      	ldr	r2, [r7, #28]
 8003400:	e841 2300 	strex	r3, r2, [r1]
 8003404:	617b      	str	r3, [r7, #20]
   return(result);
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d1e5      	bne.n	80033d8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2220      	movs	r2, #32
 8003410:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800341c:	2303      	movs	r3, #3
 800341e:	e011      	b.n	8003444 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2220      	movs	r2, #32
 8003424:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2220      	movs	r2, #32
 800342a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2200      	movs	r2, #0
 8003438:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003442:	2300      	movs	r3, #0
}
 8003444:	4618      	mov	r0, r3
 8003446:	3758      	adds	r7, #88	@ 0x58
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}

0800344c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b084      	sub	sp, #16
 8003450:	af00      	add	r7, sp, #0
 8003452:	60f8      	str	r0, [r7, #12]
 8003454:	60b9      	str	r1, [r7, #8]
 8003456:	603b      	str	r3, [r7, #0]
 8003458:	4613      	mov	r3, r2
 800345a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800345c:	e04f      	b.n	80034fe <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800345e:	69bb      	ldr	r3, [r7, #24]
 8003460:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003464:	d04b      	beq.n	80034fe <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003466:	f7fd f9af 	bl	80007c8 <HAL_GetTick>
 800346a:	4602      	mov	r2, r0
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	1ad3      	subs	r3, r2, r3
 8003470:	69ba      	ldr	r2, [r7, #24]
 8003472:	429a      	cmp	r2, r3
 8003474:	d302      	bcc.n	800347c <UART_WaitOnFlagUntilTimeout+0x30>
 8003476:	69bb      	ldr	r3, [r7, #24]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d101      	bne.n	8003480 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800347c:	2303      	movs	r3, #3
 800347e:	e04e      	b.n	800351e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0304 	and.w	r3, r3, #4
 800348a:	2b00      	cmp	r3, #0
 800348c:	d037      	beq.n	80034fe <UART_WaitOnFlagUntilTimeout+0xb2>
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	2b80      	cmp	r3, #128	@ 0x80
 8003492:	d034      	beq.n	80034fe <UART_WaitOnFlagUntilTimeout+0xb2>
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	2b40      	cmp	r3, #64	@ 0x40
 8003498:	d031      	beq.n	80034fe <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	69db      	ldr	r3, [r3, #28]
 80034a0:	f003 0308 	and.w	r3, r3, #8
 80034a4:	2b08      	cmp	r3, #8
 80034a6:	d110      	bne.n	80034ca <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	2208      	movs	r2, #8
 80034ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80034b0:	68f8      	ldr	r0, [r7, #12]
 80034b2:	f000 f838 	bl	8003526 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2208      	movs	r2, #8
 80034ba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2200      	movs	r2, #0
 80034c2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e029      	b.n	800351e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	69db      	ldr	r3, [r3, #28]
 80034d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80034d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80034d8:	d111      	bne.n	80034fe <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80034e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80034e4:	68f8      	ldr	r0, [r7, #12]
 80034e6:	f000 f81e 	bl	8003526 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2220      	movs	r2, #32
 80034ee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2200      	movs	r2, #0
 80034f6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e00f      	b.n	800351e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	69da      	ldr	r2, [r3, #28]
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	4013      	ands	r3, r2
 8003508:	68ba      	ldr	r2, [r7, #8]
 800350a:	429a      	cmp	r2, r3
 800350c:	bf0c      	ite	eq
 800350e:	2301      	moveq	r3, #1
 8003510:	2300      	movne	r3, #0
 8003512:	b2db      	uxtb	r3, r3
 8003514:	461a      	mov	r2, r3
 8003516:	79fb      	ldrb	r3, [r7, #7]
 8003518:	429a      	cmp	r2, r3
 800351a:	d0a0      	beq.n	800345e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800351c:	2300      	movs	r3, #0
}
 800351e:	4618      	mov	r0, r3
 8003520:	3710      	adds	r7, #16
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}

08003526 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003526:	b480      	push	{r7}
 8003528:	b095      	sub	sp, #84	@ 0x54
 800352a:	af00      	add	r7, sp, #0
 800352c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003534:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003536:	e853 3f00 	ldrex	r3, [r3]
 800353a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800353c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800353e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003542:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	461a      	mov	r2, r3
 800354a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800354c:	643b      	str	r3, [r7, #64]	@ 0x40
 800354e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003550:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003552:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003554:	e841 2300 	strex	r3, r2, [r1]
 8003558:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800355a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800355c:	2b00      	cmp	r3, #0
 800355e:	d1e6      	bne.n	800352e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	3308      	adds	r3, #8
 8003566:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003568:	6a3b      	ldr	r3, [r7, #32]
 800356a:	e853 3f00 	ldrex	r3, [r3]
 800356e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003570:	69fb      	ldr	r3, [r7, #28]
 8003572:	f023 0301 	bic.w	r3, r3, #1
 8003576:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	3308      	adds	r3, #8
 800357e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003580:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003582:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003584:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003586:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003588:	e841 2300 	strex	r3, r2, [r1]
 800358c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800358e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003590:	2b00      	cmp	r3, #0
 8003592:	d1e5      	bne.n	8003560 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003598:	2b01      	cmp	r3, #1
 800359a:	d118      	bne.n	80035ce <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	e853 3f00 	ldrex	r3, [r3]
 80035a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	f023 0310 	bic.w	r3, r3, #16
 80035b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	461a      	mov	r2, r3
 80035b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80035ba:	61bb      	str	r3, [r7, #24]
 80035bc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035be:	6979      	ldr	r1, [r7, #20]
 80035c0:	69ba      	ldr	r2, [r7, #24]
 80035c2:	e841 2300 	strex	r3, r2, [r1]
 80035c6:	613b      	str	r3, [r7, #16]
   return(result);
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d1e6      	bne.n	800359c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2220      	movs	r2, #32
 80035d2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2200      	movs	r2, #0
 80035e0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80035e2:	bf00      	nop
 80035e4:	3754      	adds	r7, #84	@ 0x54
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr

080035ee <memset>:
 80035ee:	4402      	add	r2, r0
 80035f0:	4603      	mov	r3, r0
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d100      	bne.n	80035f8 <memset+0xa>
 80035f6:	4770      	bx	lr
 80035f8:	f803 1b01 	strb.w	r1, [r3], #1
 80035fc:	e7f9      	b.n	80035f2 <memset+0x4>
	...

08003600 <__libc_init_array>:
 8003600:	b570      	push	{r4, r5, r6, lr}
 8003602:	4d0d      	ldr	r5, [pc, #52]	@ (8003638 <__libc_init_array+0x38>)
 8003604:	4c0d      	ldr	r4, [pc, #52]	@ (800363c <__libc_init_array+0x3c>)
 8003606:	1b64      	subs	r4, r4, r5
 8003608:	10a4      	asrs	r4, r4, #2
 800360a:	2600      	movs	r6, #0
 800360c:	42a6      	cmp	r6, r4
 800360e:	d109      	bne.n	8003624 <__libc_init_array+0x24>
 8003610:	4d0b      	ldr	r5, [pc, #44]	@ (8003640 <__libc_init_array+0x40>)
 8003612:	4c0c      	ldr	r4, [pc, #48]	@ (8003644 <__libc_init_array+0x44>)
 8003614:	f000 f818 	bl	8003648 <_init>
 8003618:	1b64      	subs	r4, r4, r5
 800361a:	10a4      	asrs	r4, r4, #2
 800361c:	2600      	movs	r6, #0
 800361e:	42a6      	cmp	r6, r4
 8003620:	d105      	bne.n	800362e <__libc_init_array+0x2e>
 8003622:	bd70      	pop	{r4, r5, r6, pc}
 8003624:	f855 3b04 	ldr.w	r3, [r5], #4
 8003628:	4798      	blx	r3
 800362a:	3601      	adds	r6, #1
 800362c:	e7ee      	b.n	800360c <__libc_init_array+0xc>
 800362e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003632:	4798      	blx	r3
 8003634:	3601      	adds	r6, #1
 8003636:	e7f2      	b.n	800361e <__libc_init_array+0x1e>
 8003638:	08003698 	.word	0x08003698
 800363c:	08003698 	.word	0x08003698
 8003640:	08003698 	.word	0x08003698
 8003644:	0800369c 	.word	0x0800369c

08003648 <_init>:
 8003648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800364a:	bf00      	nop
 800364c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800364e:	bc08      	pop	{r3}
 8003650:	469e      	mov	lr, r3
 8003652:	4770      	bx	lr

08003654 <_fini>:
 8003654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003656:	bf00      	nop
 8003658:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800365a:	bc08      	pop	{r3}
 800365c:	469e      	mov	lr, r3
 800365e:	4770      	bx	lr
